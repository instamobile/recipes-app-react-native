{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport DiscreteGestureHandler from \"./DiscreteGestureHandler\";\nimport * as NodeManager from \"./NodeManager\";\nimport PressGestureHandler from \"./PressGestureHandler\";\nimport { TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from \"./utils\";\n\nvar NativeViewGestureHandler = function (_PressGestureHandler) {\n  _inherits(NativeViewGestureHandler, _PressGestureHandler);\n\n  var _super = _createSuper(NativeViewGestureHandler);\n\n  function NativeViewGestureHandler() {\n    _classCallCheck(this, NativeViewGestureHandler);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(NativeViewGestureHandler, [{\n    key: \"onRawEvent\",\n    value: function onRawEvent(ev) {\n      var _this = this;\n\n      _get(_getPrototypeOf(NativeViewGestureHandler.prototype), \"onRawEvent\", this).call(this, ev);\n\n      if (!ev.isFinal) {\n        if (TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ({\n          x: ev.deltaX,\n          y: ev.deltaY\n        }), 10)) {\n          if (this.config.disallowInterruption) {\n            var gestures = Object.values(NodeManager.getNodes()).filter(function (gesture) {\n              var handlerTag = gesture.handlerTag,\n                  view = gesture.view,\n                  isGestureRunning = gesture.isGestureRunning;\n              return handlerTag !== _this.handlerTag && isGestureRunning && gesture instanceof DiscreteGestureHandler && view && _this.view.contains(view);\n            });\n\n            for (var _iterator = _createForOfIteratorHelperLoose(gestures), _step; !(_step = _iterator()).done;) {\n              var gesture = _step.value;\n              gesture.forceInvalidate(ev);\n            }\n          }\n        }\n      }\n    }\n  }]);\n\n  return NativeViewGestureHandler;\n}(PressGestureHandler);\n\nexport default NativeViewGestureHandler;","map":{"version":3,"sources":["C:/learning/Group-Project/node_modules/react-native-gesture-handler/web/NativeViewGestureHandler.js"],"names":["DiscreteGestureHandler","NodeManager","PressGestureHandler","TEST_MIN_IF_NOT_NAN","VEC_LEN_SQ","NativeViewGestureHandler","ev","isFinal","x","deltaX","y","deltaY","config","disallowInterruption","gestures","Object","values","getNodes","filter","gesture","handlerTag","view","isGestureRunning","contains","forceInvalidate"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,sBAAP;AACA,OAAO,KAAKC,WAAZ;AACA,OAAOC,mBAAP;AACA,SAASC,mBAAT,EAA8BC,UAA9B;;IAEMC,wB;;;;;;;;;;;;;WACJ,oBAAWC,EAAX,EAAe;AAAA;;AACb,+FAAiBA,EAAjB;;AACA,UAAI,CAACA,EAAE,CAACC,OAAR,EAAiB;AAEf,YAAIJ,mBAAmB,CAACC,UAAU,CAAC;AAAEI,UAAAA,CAAC,EAAEF,EAAE,CAACG,MAAR;AAAgBC,UAAAA,CAAC,EAAEJ,EAAE,CAACK;AAAtB,SAAD,CAAX,EAA6C,EAA7C,CAAvB,EAAyE;AACvE,cAAI,KAAKC,MAAL,CAAYC,oBAAhB,EAAsC;AACpC,gBAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAcf,WAAW,CAACgB,QAAZ,EAAd,EAAsCC,MAAtC,CAA6C,UAAAC,OAAO,EAAI;AACvE,kBAAQC,UAAR,GAA+CD,OAA/C,CAAQC,UAAR;AAAA,kBAAoBC,IAApB,GAA+CF,OAA/C,CAAoBE,IAApB;AAAA,kBAA0BC,gBAA1B,GAA+CH,OAA/C,CAA0BG,gBAA1B;AACA,qBAEEF,UAAU,KAAK,KAAI,CAACA,UAApB,IAEAE,gBAFA,IAIAH,OAAO,YAAYnB,sBAJnB,IAMAqB,IANA,IAOA,KAAI,CAACA,IAAL,CAAUE,QAAV,CAAmBF,IAAnB,CATF;AAWD,aAbgB,CAAjB;;AAeA,iEAAsBP,QAAtB,wCAAgC;AAAA,kBAArBK,OAAqB;AAE9BA,cAAAA,OAAO,CAACK,eAAR,CAAwBlB,EAAxB;AACD;AACF;AACF;AACF;AACF;;;;EA7BoCJ,mB;;AAgCvC,eAAeG,wBAAf","sourcesContent":["import DiscreteGestureHandler from './DiscreteGestureHandler';\nimport * as NodeManager from './NodeManager';\nimport PressGestureHandler from './PressGestureHandler';\nimport { TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from './utils';\n\nclass NativeViewGestureHandler extends PressGestureHandler {\n  onRawEvent(ev) {\n    super.onRawEvent(ev);\n    if (!ev.isFinal) {\n      // if (this.ref instanceof ScrollView) {\n      if (TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ({ x: ev.deltaX, y: ev.deltaY }), 10)) {\n        if (this.config.disallowInterruption) {\n          const gestures = Object.values(NodeManager.getNodes()).filter(gesture => {\n            const { handlerTag, view, isGestureRunning } = gesture;\n            return (\n              // Check if this gesture isn't self\n              handlerTag !== this.handlerTag &&\n              // Ensure the gesture needs to be cancelled\n              isGestureRunning &&\n              // ScrollView can cancel discrete gestures like taps and presses\n              gesture instanceof DiscreteGestureHandler &&\n              // Ensure a view exists and is a child of the current view\n              view &&\n              this.view.contains(view)\n            );\n          });\n          // Cancel all of the gestures that passed the filter\n          for (const gesture of gestures) {\n            // TODO: Bacon: Send some cached event.\n            gesture.forceInvalidate(ev);\n          }\n        }\n      }\n    }\n  }\n}\n\nexport default NativeViewGestureHandler;\n"]},"metadata":{},"sourceType":"module"}