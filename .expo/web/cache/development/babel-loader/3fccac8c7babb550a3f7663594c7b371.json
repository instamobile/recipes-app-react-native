{"ast":null,"code":"var g;\n\ng = function () {\n  return this;\n}();\n\ntry {\n  g = g || new Function(\"return this\")();\n} catch (e) {\n  if (typeof window === \"object\") g = window;\n}\n\nmodule.exports = g;","map":{"version":3,"sources":["C:/Users/nayla/AppData/Roaming/npm/node_modules/expo-cli/node_modules/webpack/buildin/global.js"],"names":["g","Function","e","window","module","exports"],"mappings":"AAAA,IAAIA,CAAJ;;AAGAA,CAAC,GAAI,YAAW;AACf,SAAO,IAAP;AACA,CAFG,EAAJ;;AAIA,IAAI;AAEHA,EAAAA,CAAC,GAAGA,CAAC,IAAI,IAAIC,QAAJ,CAAa,aAAb,GAAT;AACA,CAHD,CAGE,OAAOC,CAAP,EAAU;AAEX,MAAI,OAAOC,MAAP,KAAkB,QAAtB,EAAgCH,CAAC,GAAGG,MAAJ;AAChC;;AAMDC,MAAM,CAACC,OAAP,GAAiBL,CAAjB","sourcesContent":["var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n"]},"metadata":{},"sourceType":"script"}