{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { val } from \"../val\";\nimport AnimatedNode from \"./AnimatedNode\";\nimport invariant from 'fbjs/lib/invariant';\nvar NEWTON_ITERATIONS = 4;\nvar NEWTON_MIN_SLOPE = 0.001;\nvar SUBDIVISION_PRECISION = 0.0000001;\nvar SUBDIVISION_MAX_ITERATIONS = 10;\nvar kSplineTableSize = 11;\nvar kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\nvar float32ArraySupported = typeof Float32Array === 'function';\n\nfunction A(aA1, aA2) {\n  return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n}\n\nfunction B(aA1, aA2) {\n  return 3.0 * aA2 - 6.0 * aA1;\n}\n\nfunction C(aA1) {\n  return 3.0 * aA1;\n}\n\nfunction calcBezier(aT, aA1, aA2) {\n  return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n}\n\nfunction getSlope(aT, aA1, aA2) {\n  return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n}\n\nfunction binarySubdivide(aX, aA, aB, mX1, mX2) {\n  var currentX = 0;\n  var currentT = 0;\n  var i = 0;\n\n  do {\n    currentT = aA + (aB - aA) / 2.0;\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\n\n    if (currentX > 0.0) {\n      aB = currentT;\n    } else {\n      aA = currentT;\n    }\n  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n\n  return currentT;\n}\n\nfunction newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n  for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n    var currentSlope = getSlope(aGuessT, mX1, mX2);\n\n    if (currentSlope === 0.0) {\n      return aGuessT;\n    }\n\n    var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n    aGuessT -= currentX / currentSlope;\n  }\n\n  return aGuessT;\n}\n\nfunction bezier(mX1, mY1, mX2, mY2) {\n  var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n\n  if (mX1 !== mY1 || mX2 !== mY2) {\n    for (var i = 0; i < kSplineTableSize; ++i) {\n      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n    }\n  }\n\n  function getTForX(aX) {\n    var intervalStart = 0.0;\n    var currentSample = 1;\n    var lastSample = kSplineTableSize - 1;\n\n    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n      intervalStart += kSampleStepSize;\n    }\n\n    --currentSample;\n    var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    var guessForT = intervalStart + dist * kSampleStepSize;\n    var initialSlope = getSlope(guessForT, mX1, mX2);\n\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n    }\n  }\n\n  return function BezierEasing(x) {\n    if (mX1 === mY1 && mX2 === mY2) {\n      return x;\n    }\n\n    if (x === 0) {\n      return 0;\n    }\n\n    if (x === 1) {\n      return 1;\n    }\n\n    return calcBezier(getTForX(x), mY1, mY2);\n  };\n}\n\nvar AnimatedBezier = function (_AnimatedNode) {\n  _inherits(AnimatedBezier, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedBezier);\n\n  function AnimatedBezier(value, mX1, mY1, mX2, mY2) {\n    var _this;\n\n    _classCallCheck(this, AnimatedBezier);\n\n    invariant(value instanceof AnimatedNode, \"Reanimated: Bezier node argument should be of type AnimatedNode but got \".concat(value));\n    _this = _super.call(this, {\n      type: 'bezier',\n      mX1: mX1,\n      mY1: mY1,\n      mX2: mX2,\n      mY2: mY2,\n      input: value\n    }, [value]);\n\n    _defineProperty(_assertThisInitialized(_this), \"_value\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_bezier\", void 0);\n\n    _this._value = value;\n    _this._bezier = bezier(mX1, mY1, mX2, mY2);\n    return _this;\n  }\n\n  _createClass(AnimatedBezier, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedBezier, id: \".concat(this.__nodeID);\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      return this._bezier(val(this._value));\n    }\n  }]);\n\n  return AnimatedBezier;\n}(AnimatedNode);\n\nexport { AnimatedBezier as default };","map":{"version":3,"sources":["AnimatedBezier.js"],"names":["NEWTON_ITERATIONS","NEWTON_MIN_SLOPE","SUBDIVISION_PRECISION","SUBDIVISION_MAX_ITERATIONS","kSplineTableSize","kSampleStepSize","float32ArraySupported","A","B","C","currentX","currentT","i","aA","aB","calcBezier","Math","currentSlope","getSlope","aGuessT","sampleValues","mX1","mX2","intervalStart","currentSample","lastSample","dist","aX","guessForT","initialSlope","newtonRaphsonIterate","binarySubdivide","x","getTForX","constructor","invariant","value","type","mY1","mY2","input","bezier","toString","__onEvaluate","val"],"mappings":"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","sourcesContent":["import { val } from '../val';\nimport AnimatedNode from './AnimatedNode';\nimport invariant from 'fbjs/lib/invariant';\n\n// These values are established by empiricism with tests (tradeoff: performance VS precision)\nvar NEWTON_ITERATIONS = 4;\nvar NEWTON_MIN_SLOPE = 0.001;\nvar SUBDIVISION_PRECISION = 0.0000001;\nvar SUBDIVISION_MAX_ITERATIONS = 10;\n\nvar kSplineTableSize = 11;\nvar kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n\nvar float32ArraySupported = typeof Float32Array === 'function';\n\nfunction A(aA1, aA2) {\n  return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n}\nfunction B(aA1, aA2) {\n  return 3.0 * aA2 - 6.0 * aA1;\n}\nfunction C(aA1) {\n  return 3.0 * aA1;\n}\n\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nfunction calcBezier(aT, aA1, aA2) {\n  return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n}\n\n// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\nfunction getSlope(aT, aA1, aA2) {\n  return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n}\n\nfunction binarySubdivide(aX, aA, aB, mX1, mX2) {\n  var currentX = 0;\n  var currentT = 0;\n  var i = 0;\n  do {\n    currentT = aA + (aB - aA) / 2.0;\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\n    if (currentX > 0.0) {\n      aB = currentT;\n    } else {\n      aA = currentT;\n    }\n  } while (\n    Math.abs(currentX) > SUBDIVISION_PRECISION &&\n    ++i < SUBDIVISION_MAX_ITERATIONS\n  );\n  return currentT;\n}\n\nfunction newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n  for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n    var currentSlope = getSlope(aGuessT, mX1, mX2);\n    if (currentSlope === 0.0) {\n      return aGuessT;\n    }\n    var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n    aGuessT -= currentX / currentSlope;\n  }\n  return aGuessT;\n}\n\nfunction bezier(mX1, mY1, mX2, mY2) {\n  // Precompute samples table\n  var sampleValues = float32ArraySupported\n    ? new Float32Array(kSplineTableSize)\n    : new Array(kSplineTableSize);\n  if (mX1 !== mY1 || mX2 !== mY2) {\n    for (var i = 0; i < kSplineTableSize; ++i) {\n      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n    }\n  }\n\n  function getTForX(aX) {\n    var intervalStart = 0.0;\n    var currentSample = 1;\n    var lastSample = kSplineTableSize - 1;\n\n    for (\n      ;\n      currentSample !== lastSample && sampleValues[currentSample] <= aX;\n      ++currentSample\n    ) {\n      intervalStart += kSampleStepSize;\n    }\n    --currentSample;\n\n    // Interpolate to provide an initial guess for t\n    var dist =\n      (aX - sampleValues[currentSample]) /\n      (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    var guessForT = intervalStart + dist * kSampleStepSize;\n\n    var initialSlope = getSlope(guessForT, mX1, mX2);\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(\n        aX,\n        intervalStart,\n        intervalStart + kSampleStepSize,\n        mX1,\n        mX2\n      );\n    }\n  }\n\n  return function BezierEasing(x) {\n    if (mX1 === mY1 && mX2 === mY2) {\n      return x; // linear\n    }\n    // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n    if (x === 0) {\n      return 0;\n    }\n    if (x === 1) {\n      return 1;\n    }\n    return calcBezier(getTForX(x), mY1, mY2);\n  };\n}\n\nexport default class AnimatedBezier extends AnimatedNode {\n  _value;\n  _bezier;\n\n  constructor(value, mX1, mY1, mX2, mY2) {\n    invariant(\n      value instanceof AnimatedNode,\n      `Reanimated: Bezier node argument should be of type AnimatedNode but got ${value}`\n    );\n    super({ type: 'bezier', mX1, mY1, mX2, mY2, input: value }, [\n      value,\n    ]);\n    this._value = value;\n    this._bezier = bezier(mX1, mY1, mX2, mY2);\n  }\n\n  toString() {\n    return `AnimatedBezier, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    return this._bezier(val(this._value));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}