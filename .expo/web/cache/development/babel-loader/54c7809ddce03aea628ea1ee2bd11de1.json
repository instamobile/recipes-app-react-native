{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as NavigationActions from \"../NavigationActions\";\nimport * as StackActions from \"./StackActions\";\nimport createConfigGetter from \"./createConfigGetter\";\nimport getScreenForRouteName from \"./getScreenForRouteName\";\nimport StateUtils from \"../StateUtils\";\nimport validateRouteConfigMap from \"./validateRouteConfigMap\";\nimport invariant from \"../utils/invariant\";\nimport { generateKey } from \"./KeyGenerator\";\nimport { createPathParser } from \"./pathUtils\";\n\nfunction behavesLikePushAction(action) {\n  return action.type === NavigationActions.NAVIGATE || action.type === StackActions.PUSH;\n}\n\nvar defaultActionCreators = function defaultActionCreators() {\n  return {};\n};\n\nfunction isResetToRootStack(action) {\n  return action.type === StackActions.RESET && action.key === null;\n}\n\nexport default (function (routeConfigs) {\n  var stackConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  validateRouteConfigMap(routeConfigs);\n  var childRouters = {};\n  var routeNames = Object.keys(routeConfigs);\n  routeNames.forEach(function (routeName) {\n    var routeConfig = routeConfigs[routeName];\n    var screen = routeConfig && routeConfig.screen ? routeConfig.screen : routeConfig;\n\n    if (screen && screen.router) {\n      childRouters[routeName] = screen.router;\n    } else {\n      childRouters[routeName] = null;\n    }\n  });\n  var initialRouteParams = stackConfig.initialRouteParams;\n  var getCustomActionCreators = stackConfig.getCustomActionCreators || defaultActionCreators;\n  var initialRouteName = stackConfig.initialRouteName || routeNames[0];\n  var initialChildRouter = childRouters[initialRouteName];\n\n  function getInitialState(action) {\n    var route = {};\n    var childRouter = childRouters[action.routeName];\n\n    if (behavesLikePushAction(action) && childRouter !== undefined) {\n      var childState = {};\n\n      if (childRouter !== null) {\n        var childAction = action.action || NavigationActions.init({\n          params: action.params\n        });\n        childState = childRouter.getStateForAction(childAction);\n      }\n\n      return {\n        key: 'StackRouterRoot',\n        isTransitioning: false,\n        index: 0,\n        routes: [_objectSpread(_objectSpread({\n          params: action.params\n        }, childState), {}, {\n          key: action.key || generateKey(),\n          routeName: action.routeName\n        })]\n      };\n    }\n\n    if (initialChildRouter) {\n      route = initialChildRouter.getStateForAction(NavigationActions.navigate({\n        routeName: initialRouteName,\n        params: initialRouteParams\n      }));\n    }\n\n    var params = (routeConfigs[initialRouteName].params || route.params || action.params || initialRouteParams) && _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, routeConfigs[initialRouteName].params || {}), route.params || {}), action.params || {}), initialRouteParams || {});\n\n    var initialRouteKey = stackConfig.initialRouteKey;\n    route = _objectSpread(_objectSpread(_objectSpread({}, route), params ? {\n      params: params\n    } : {}), {}, {\n      routeName: initialRouteName,\n      key: action.key || initialRouteKey || generateKey()\n    });\n    return {\n      key: 'StackRouterRoot',\n      isTransitioning: false,\n      index: 0,\n      routes: [route]\n    };\n  }\n\n  function getParamsForRouteAndAction(routeName, action) {\n    var routeConfig = routeConfigs[routeName];\n\n    if (routeConfig && routeConfig.params) {\n      return _objectSpread(_objectSpread({}, routeConfig.params), action.params);\n    } else {\n      return action.params;\n    }\n  }\n\n  var _createPathParser = createPathParser(childRouters, routeConfigs, stackConfig),\n      getPathAndParamsForRoute = _createPathParser.getPathAndParamsForRoute,\n      _getActionForPathAndParams = _createPathParser.getActionForPathAndParams;\n\n  return {\n    childRouters: childRouters,\n    getComponentForState: function getComponentForState(state) {\n      var activeChildRoute = state.routes[state.index];\n      var routeName = activeChildRoute.routeName;\n\n      if (childRouters[routeName]) {\n        return childRouters[routeName].getComponentForState(activeChildRoute);\n      }\n\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n    getComponentForRouteName: function getComponentForRouteName(routeName) {\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n    getActionCreators: function getActionCreators(route, navStateKey) {\n      return _objectSpread(_objectSpread({}, getCustomActionCreators(route, navStateKey)), {}, {\n        pop: function pop(n, params) {\n          return StackActions.pop(_objectSpread({\n            n: n\n          }, params));\n        },\n        popToTop: function popToTop(params) {\n          return StackActions.popToTop(params);\n        },\n        push: function push(routeName, params, action) {\n          return StackActions.push({\n            routeName: routeName,\n            params: params,\n            action: action\n          });\n        },\n        replace: function replace(replaceWith, params, action, newKey) {\n          if (typeof replaceWith === 'string') {\n            return StackActions.replace({\n              routeName: replaceWith,\n              params: params,\n              action: action,\n              key: route.key,\n              newKey: newKey\n            });\n          }\n\n          invariant(typeof replaceWith === 'object', 'Must replaceWith an object or a string');\n          invariant(params == null, 'Params must not be provided to .replace() when specifying an object');\n          invariant(action == null, 'Child action must not be provided to .replace() when specifying an object');\n          invariant(newKey == null, 'Child action must not be provided to .replace() when specifying an object');\n          return StackActions.replace(replaceWith);\n        },\n        reset: function reset(actions, index) {\n          return StackActions.reset({\n            actions: actions,\n            index: index == null ? actions.length - 1 : index,\n            key: navStateKey\n          });\n        },\n        dismiss: function dismiss() {\n          return NavigationActions.back({\n            key: navStateKey\n          });\n        }\n      });\n    },\n    getStateForAction: function getStateForAction(action, state) {\n      if (!state) {\n        return getInitialState(action);\n      }\n\n      var activeChildRoute = state.routes[state.index];\n\n      if (!isResetToRootStack(action) && action.type !== NavigationActions.NAVIGATE) {\n        var activeChildRouter = childRouters[activeChildRoute.routeName];\n\n        if (activeChildRouter) {\n          var route = activeChildRouter.getStateForAction(action, activeChildRoute);\n\n          if (route !== null && route !== activeChildRoute) {\n            return StateUtils.replaceAt(state, activeChildRoute.key, route, action.type === NavigationActions.SET_PARAMS);\n          }\n        }\n      } else if (action.type === NavigationActions.NAVIGATE) {\n        for (var _iterator = _createForOfIteratorHelperLoose(state.routes.slice().reverse()), _step; !(_step = _iterator()).done;) {\n          var childRoute = _step.value;\n          var childRouter = childRouters[childRoute.routeName];\n          var childAction = action.routeName === childRoute.routeName && action.action ? action.action : action;\n\n          if (childRouter) {\n            var nextRouteState = childRouter.getStateForAction(childAction, childRoute);\n\n            if (nextRouteState === null || nextRouteState !== childRoute) {\n              var newState = StateUtils.replaceAndPrune(state, nextRouteState ? nextRouteState.key : childRoute.key, nextRouteState ? nextRouteState : childRoute);\n              return _objectSpread(_objectSpread({}, newState), {}, {\n                isTransitioning: state.index !== newState.index ? action.immediate !== true : state.isTransitioning\n              });\n            }\n          }\n        }\n      }\n\n      if (behavesLikePushAction(action) && childRouters[action.routeName] !== undefined) {\n          var _childRouter = childRouters[action.routeName];\n\n          var _route;\n\n          invariant(action.type !== StackActions.PUSH || action.key == null, 'StackRouter does not support key on the push action');\n          var lastRouteIndex = state.routes.findIndex(function (r) {\n            if (action.key) {\n              return r.key === action.key;\n            } else {\n              return r.routeName === action.routeName;\n            }\n          });\n\n          if (action.type !== StackActions.PUSH && lastRouteIndex !== -1) {\n            if (state.index === lastRouteIndex && !action.params) {\n              return null;\n            }\n\n            var routes = state.routes.slice(0, lastRouteIndex + 1);\n\n            if (action.params) {\n              var _route2 = state.routes[lastRouteIndex];\n              routes[lastRouteIndex] = _objectSpread(_objectSpread({}, _route2), {}, {\n                params: _objectSpread(_objectSpread({}, _route2.params), action.params)\n              });\n            }\n\n            return _objectSpread(_objectSpread({}, state), {}, {\n              isTransitioning: state.index !== lastRouteIndex ? action.immediate !== true : state.isTransitioning,\n              index: lastRouteIndex,\n              routes: routes\n            });\n          }\n\n          if (_childRouter) {\n            var _childAction = action.action || NavigationActions.init({\n              params: getParamsForRouteAndAction(action.routeName, action)\n            });\n\n            _route = _objectSpread(_objectSpread({\n              params: getParamsForRouteAndAction(action.routeName, action)\n            }, _childRouter.getStateForAction(_childAction)), {}, {\n              routeName: action.routeName,\n              key: action.key || generateKey()\n            });\n          } else {\n            _route = {\n              params: getParamsForRouteAndAction(action.routeName, action),\n              routeName: action.routeName,\n              key: action.key || generateKey()\n            };\n          }\n\n          return _objectSpread(_objectSpread({}, StateUtils.push(state, _route)), {}, {\n            isTransitioning: action.immediate !== true\n          });\n        } else if (action.type === StackActions.PUSH && childRouters[action.routeName] === undefined) {\n        return state;\n      }\n\n      if (behavesLikePushAction(action)) {\n        var childRouterNames = Object.keys(childRouters);\n\n        for (var i = 0; i < childRouterNames.length; i++) {\n          var childRouterName = childRouterNames[i];\n          var _childRouter2 = childRouters[childRouterName];\n\n          if (_childRouter2) {\n            var initChildRoute = _childRouter2.getStateForAction(NavigationActions.init());\n\n            var navigatedChildRoute = _childRouter2.getStateForAction(action, initChildRoute);\n\n            var routeToPush = null;\n\n            if (navigatedChildRoute === null) {\n              routeToPush = initChildRoute;\n            } else if (navigatedChildRoute !== initChildRoute) {\n              routeToPush = navigatedChildRoute;\n            }\n\n            if (routeToPush) {\n              var _route3 = _objectSpread(_objectSpread({}, routeToPush), {}, {\n                routeName: childRouterName,\n                key: action.key || generateKey()\n              });\n\n              return _objectSpread(_objectSpread({}, StateUtils.push(state, _route3)), {}, {\n                isTransitioning: action.immediate !== true\n              });\n            }\n          }\n        }\n      }\n\n      if (action.type === StackActions.POP_TO_TOP) {\n        if (action.key && state.key !== action.key) {\n          return state;\n        }\n\n        if (state.index > 0) {\n          return _objectSpread(_objectSpread({}, state), {}, {\n            isTransitioning: action.immediate !== true,\n            index: 0,\n            routes: [state.routes[0]]\n          });\n        }\n\n        return state;\n      }\n\n      if (action.type === StackActions.REPLACE) {\n        var routeIndex;\n\n        if (action.key === undefined && state.routes.length) {\n          routeIndex = state.routes.length - 1;\n        } else {\n          routeIndex = state.routes.findIndex(function (r) {\n            return r.key === action.key;\n          });\n        }\n\n        if (routeIndex !== -1) {\n          var _childRouter3 = childRouters[action.routeName];\n          var childState = {};\n\n          if (_childRouter3) {\n            var _childAction2 = action.action || NavigationActions.init({\n              params: getParamsForRouteAndAction(action.routeName, action)\n            });\n\n            childState = _childRouter3.getStateForAction(_childAction2);\n          }\n\n          var _routes = _toConsumableArray(state.routes);\n\n          _routes[routeIndex] = _objectSpread(_objectSpread({\n            params: getParamsForRouteAndAction(action.routeName, action)\n          }, childState), {}, {\n            routeName: action.routeName,\n            key: action.newKey || generateKey()\n          });\n          return _objectSpread(_objectSpread({}, state), {}, {\n            routes: _routes\n          });\n        }\n      }\n\n      if (action.type === StackActions.COMPLETE_TRANSITION && (action.key == null || action.key === state.key) && action.toChildKey === state.routes[state.index].key && state.isTransitioning) {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isTransitioning: false\n        });\n      }\n\n      if (action.type === NavigationActions.SET_PARAMS) {\n        var key = action.key;\n        var lastRoute = state.routes.find(function (route) {\n          return route.key === key;\n        });\n\n        if (lastRoute) {\n          var params = _objectSpread(_objectSpread({}, lastRoute.params), action.params);\n\n          var _routes2 = _toConsumableArray(state.routes);\n\n          _routes2[state.routes.indexOf(lastRoute)] = _objectSpread(_objectSpread({}, lastRoute), {}, {\n            params: params\n          });\n          return _objectSpread(_objectSpread({}, state), {}, {\n            routes: _routes2\n          });\n        }\n      }\n\n      if (action.type === StackActions.RESET) {\n        if (action.key != null && action.key !== state.key) {\n          return state;\n        }\n\n        var newStackActions = action.actions;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          routes: newStackActions.map(function (newStackAction) {\n            var router = childRouters[newStackAction.routeName];\n            var childState = {};\n\n            if (router) {\n              var _childAction3 = newStackAction.action || NavigationActions.init({\n                params: getParamsForRouteAndAction(newStackAction.routeName, newStackAction)\n              });\n\n              childState = router.getStateForAction(_childAction3);\n            }\n\n            return _objectSpread(_objectSpread({\n              params: getParamsForRouteAndAction(newStackAction.routeName, newStackAction)\n            }, childState), {}, {\n              routeName: newStackAction.routeName,\n              key: newStackAction.key || generateKey()\n            });\n          }),\n          index: action.index\n        });\n      }\n\n      if (action.type === NavigationActions.BACK || action.type === StackActions.POP) {\n        var _key = action.key,\n            n = action.n,\n            immediate = action.immediate,\n            prune = action.prune;\n\n        if (action.type === StackActions.POP && prune === false && _key) {\n          var index = state.routes.findIndex(function (r) {\n            return r.key === _key;\n          });\n\n          if (index > 0) {\n            var count = Math.max(index - (n !== null && n !== void 0 ? n : 1) + 1, 1);\n\n            var _routes3 = state.routes.slice(0, count).concat(state.routes.slice(index + 1));\n\n            if (_routes3.length) {\n              return _objectSpread(_objectSpread({}, state), {}, {\n                routes: _routes3,\n                index: _routes3.length - 1,\n                isTransitioning: immediate !== true\n              });\n            }\n          }\n        } else {\n          var backRouteIndex = state.index;\n\n          if (action.type === StackActions.POP && n != null) {\n            backRouteIndex = Math.max(1, state.index - n + 1);\n          } else if (_key) {\n            var backRoute = state.routes.find(function (route) {\n              return route.key === _key;\n            });\n            backRouteIndex = state.routes.indexOf(backRoute);\n          }\n\n          if (backRouteIndex > 0) {\n            return _objectSpread(_objectSpread({}, state), {}, {\n              routes: state.routes.slice(0, backRouteIndex),\n              index: backRouteIndex - 1,\n              isTransitioning: immediate !== true\n            });\n          }\n        }\n      }\n\n      var keyIndex = action.key ? StateUtils.indexOf(state, action.key) : -1;\n\n      for (var _iterator2 = _createForOfIteratorHelperLoose(state.routes.slice().reverse()), _step2; !(_step2 = _iterator2()).done;) {\n        var _childRoute = _step2.value;\n\n        if (_childRoute.key === activeChildRoute.key) {\n          continue;\n        }\n\n        if (keyIndex >= 0 && _childRoute.key !== action.key) {\n          continue;\n        }\n\n        var _childRouter4 = childRouters[_childRoute.routeName];\n\n        if (_childRouter4) {\n          var _route4 = _childRouter4.getStateForAction(action, _childRoute);\n\n          if (_route4 === null) {\n            return state;\n          } else if (_route4 && _route4 !== _childRoute) {\n            return StateUtils.replaceAt(state, _childRoute.key, _route4, action.preserveFocus || action.type.includes('DRAWER'));\n          }\n        }\n      }\n\n      return state;\n    },\n    getPathAndParamsForState: function getPathAndParamsForState(state) {\n      var route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n    getActionForPathAndParams: function getActionForPathAndParams(path, params) {\n      return _getActionForPathAndParams(path, params);\n    },\n    getScreenOptions: createConfigGetter(routeConfigs, stackConfig.defaultNavigationOptions)\n  };\n});","map":{"version":3,"sources":["StackRouter.js"],"names":["action","NavigationActions","StackActions","defaultActionCreators","stackConfig","validateRouteConfigMap","childRouters","routeNames","Object","routeName","routeConfig","routeConfigs","screen","initialRouteParams","getCustomActionCreators","initialRouteName","initialChildRouter","route","childRouter","behavesLikePushAction","childState","childAction","params","key","isTransitioning","index","routes","generateKey","initialRouteKey","getActionForPathAndParams","createPathParser","getComponentForState","activeChildRoute","state","getScreenForRouteName","getComponentForRouteName","getActionCreators","pop","n","popToTop","push","replace","newKey","invariant","reset","actions","navStateKey","dismiss","getStateForAction","getInitialState","isResetToRootStack","activeChildRouter","StateUtils","childRoute","nextRouteState","newState","lastRouteIndex","r","getParamsForRouteAndAction","childRouterNames","i","childRouterName","initChildRoute","navigatedChildRoute","routeToPush","routeIndex","lastRoute","newStackActions","newStackAction","router","prune","count","Math","immediate","backRouteIndex","backRoute","keyIndex","getPathAndParamsForState","getPathAndParamsForRoute","getScreenOptions","createConfigGetter"],"mappings":";;;;;;;;;;;;;AAAA,OAAO,KAAP,iBAAA;AACA,OAAO,KAAP,YAAA;AACA,OAAA,kBAAA;AACA,OAAA,qBAAA;AACA,OAAA,UAAA;AACA,OAAA,sBAAA;AACA,OAAA,SAAA;AACA,SAAA,WAAA;AACA,SAAA,gBAAA;;AAEA,SAAA,qBAAA,CAAA,MAAA,EAAuC;AACrC,SACEA,MAAM,CAANA,IAAAA,KAAgBC,iBAAiB,CAAjCD,QAAAA,IACAA,MAAM,CAANA,IAAAA,KAAgBE,YAAY,CAF9B,IAAA;AAID;;AAED,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB;AAAA,SAA9B,EAA8B;AAAA,CAA9B;;AAEA,SAAA,kBAAA,CAAA,MAAA,EAAoC;AAClC,SAAOH,MAAM,CAANA,IAAAA,KAAgBE,YAAY,CAA5BF,KAAAA,IAAsCA,MAAM,CAANA,GAAAA,KAA7C,IAAA;AACD;;AAED,gBAAe,UAAA,YAAA,EAAoC;AAAA,MAArBI,WAAqB,uEAApC,EAAoC;AAEjDC,EAAAA,sBAAsB,CAAtBA,YAAsB,CAAtBA;AAEA,MAAMC,YAAY,GAAlB,EAAA;AACA,MAAMC,UAAU,GAAGC,MAAM,CAANA,IAAAA,CAL8B,YAK9BA,CAAnB;AAGAD,EAAAA,UAAU,CAAVA,OAAAA,CAAoBE,UAAAA,SAAD,EAAe;AAIhC,QAAMC,WAAW,GAAGC,YAAY,CAAhC,SAAgC,CAAhC;AACA,QAAMC,MAAM,GACVF,WAAW,IAAIA,WAAW,CAA1BA,MAAAA,GAAoCA,WAAW,CAA/CA,MAAAA,GADF,WAAA;;AAEA,QAAIE,MAAM,IAAIA,MAAM,CAApB,MAAA,EAA6B;AAE3BN,MAAAA,YAAY,CAAZA,SAAY,CAAZA,GAA0BM,MAAM,CAAhCN,MAAAA;AAFF,KAAA,MAGO;AAELA,MAAAA,YAAY,CAAZA,SAAY,CAAZA,GAAAA,IAAAA;AACD;AAbHC,GAAAA;AARiD,MAwBzCM,kBAxByC,GAwBjD,WAxBiD,CAwBzCA,kBAxByC;AAyBjD,MAAMC,uBAAuB,GAC3BV,WAAW,CAAXA,uBAAAA,IADF,qBAAA;AAGA,MAAMW,gBAAgB,GAAGX,WAAW,CAAXA,gBAAAA,IAAgCG,UAAU,CAAnE,CAAmE,CAAnE;AAEA,MAAMS,kBAAkB,GAAGV,YAAY,CAAvC,gBAAuC,CAAvC;;AAEA,WAAA,eAAA,CAAA,MAAA,EAAiC;AAC/B,QAAIW,KAAK,GAAT,EAAA;AACA,QAAMC,WAAW,GAAGZ,YAAY,CAACN,MAAM,CAFR,SAEC,CAAhC;;AAGA,QAAImB,qBAAqB,CAArBA,MAAqB,CAArBA,IAAiCD,WAAW,KAAhD,SAAA,EAAgE;AAC9D,UAAIE,UAAU,GADgD,EAC9D;;AAEA,UAAIF,WAAW,KAAf,IAAA,EAA0B;AACxB,YAAMG,WAAW,GACfrB,MAAM,CAANA,MAAAA,IAAiB,iBAAiB,CAAjB,IAAA,CAAuB;AAAEsB,UAAAA,MAAM,EAAEtB,MAAM,CAACsB;AAAjB,SAAvB,CADnB;AAEAF,QAAAA,UAAU,GAAGF,WAAW,CAAXA,iBAAAA,CAAbE,WAAaF,CAAbE;AACD;;AAED,aAAO;AACLG,QAAAA,GAAG,EADE,iBAAA;AAELC,QAAAA,eAAe,EAFV,KAAA;AAGLC,QAAAA,KAAK,EAHA,CAAA;AAILC,QAAAA,MAAM,EAAE;AAEJJ,UAAAA,MAAM,EAAEtB,MAAM,CADhB;AADM,WACN,UADM;AAIJuB,UAAAA,GAAG,EAAEvB,MAAM,CAANA,GAAAA,IAAc2B,WAHrB,EADM;AAKJlB,UAAAA,SAAS,EAAET,MAAM,CAACS;AALd;AAJH,OAAP;AAaD;;AAED,QAAA,kBAAA,EAAwB;AACtBQ,MAAAA,KAAK,GAAG,kBAAkB,CAAlB,iBAAA,CACN,iBAAiB,CAAjB,QAAA,CAA2B;AACzBR,QAAAA,SAAS,EADgB,gBAAA;AAEzBa,QAAAA,MAAM,EAAET;AAFiB,OAA3B,CADM,CAARI;AAMD;;AACD,QAAMK,MAAM,GAAG,CAACX,YAAY,CAAZA,gBAAY,CAAZA,CAAAA,MAAAA,IACdM,KAAK,CADSN,MAAAA,IAEdX,MAAM,CAFQW,MAAAA,IAAD,kBAAA,iEAITA,YAAY,CAAZA,gBAAY,CAAZA,CAAAA,MAAAA,IADmB,EAHV,GAKTM,KAAK,CAALA,MAAAA,IAFmB,EAHV,GAMTjB,MAAM,CAANA,MAAAA,IAHmB,EAHV,GAOTa,kBAAkB,IAAtB,EAPa,CAAf;;AArC+B,QA8CvBe,eA9CuB,GA8C/B,WA9C+B,CA8CvBA,eA9CuB;AA+C/BX,IAAAA,KAAK,iDAAG,KAAH,GAECK,MAAM,GAAG;AAAEA,MAAAA,MAAAA,EAAAA;AAAF,KAAH,GAFJ,EAAH;AAGHb,MAAAA,SAAS,EAHH,gBAAH;AAIHc,MAAAA,GAAG,EAAEvB,MAAM,CAANA,GAAAA,IAAAA,eAAAA,IAAiC2B,WAAW;AAJ9C,MAALV;AAMA,WAAO;AACLM,MAAAA,GAAG,EADE,iBAAA;AAELC,MAAAA,eAAe,EAFV,KAAA;AAGLC,MAAAA,KAAK,EAHA,CAAA;AAILC,MAAAA,MAAM,EAAE,CAAA,KAAA;AAJH,KAAP;AAMD;;AAED,WAAA,0BAAA,CAAA,SAAA,EAAA,MAAA,EAAuD;AACrD,QAAIhB,WAAW,GAAGC,YAAY,CAA9B,SAA8B,CAA9B;;AACA,QAAID,WAAW,IAAIA,WAAW,CAA9B,MAAA,EAAuC;AACrC,6CAAYA,WAAW,CAAhB,MAAP,GAAmCV,MAAM,CAACsB,MAA1C;AADF,KAAA,MAEO;AACL,aAAOtB,MAAM,CAAb,MAAA;AACD;AACF;;AApGgD,0BAyG7C8B,gBAAgB,CAAA,YAAA,EAAA,YAAA,EAHpB,WAGoB,CAzG6B;AAAA,MAsG3C,wBAtG2C,qBAsG3C,wBAtG2C;AAAA,MAwG/CD,0BAxG+C,qBAwG/CA,yBAxG+C;;AA2GjD,SAAO;AACLvB,IAAAA,YADK,EACLA,YADK;AAGLyB,IAAAA,oBAHK,gCAGe,KAHf,EAGuB;AAC1B,UAAMC,gBAAgB,GAAGC,KAAK,CAALA,MAAAA,CAAaA,KAAK,CAA3C,KAAyBA,CAAzB;AAD0B,UAElBxB,SAFkB,GAE1B,gBAF0B,CAElBA,SAFkB;;AAG1B,UAAIH,YAAY,CAAhB,SAAgB,CAAhB,EAA6B;AAC3B,eAAOA,YAAY,CAAZA,SAAY,CAAZA,CAAAA,oBAAAA,CAAP,gBAAOA,CAAP;AACD;;AACD,aAAO4B,qBAAqB,CAAA,YAAA,EAA5B,SAA4B,CAA5B;AATG,KAAA;AAYLC,IAAAA,wBAZK,oCAYmB,SAZnB,EAY+B;AAClC,aAAOD,qBAAqB,CAAA,YAAA,EAA5B,SAA4B,CAA5B;AAbG,KAAA;AAgBLE,IAAAA,iBAhBK,6BAgBY,KAhBZ,EAgBY,WAhBZ,EAgBiC;AACpC,6CACKtB,uBAAuB,CAAA,KAAA,EADrB,WACqB,CAD5B;AAEEuB,QAAAA,GAAG,EAAE,aAAA,CAAA,EAAA,MAAA;AAAA,iBACH,YAAY,CAAZ,GAAA;AACEC,YAAAA,CADe,EACfA;AADF,aAEKhB,MAFL,EADG;AAAA,SAFP;AAOEiB,QAAAA,QAAQ,EAAGjB,kBAAAA,MAAD;AAAA,iBAAYpB,YAAY,CAAZA,QAAAA,CAPjB,MAOiBA,CAAZ;AAAA,SAPZ;AAQEsC,QAAAA,IAAI,EAAE,cAAA,SAAA,EAAA,MAAA,EAAA,MAAA;AAAA,iBACJ,YAAY,CAAZ,IAAA,CAAkB;AAChB/B,YAAAA,SADgB,EAChBA,SADgB;AAEhBa,YAAAA,MAFgB,EAEhBA,MAFgB;AAGhBtB,YAAAA,MAAAA,EAAAA;AAHgB,WAAlB,CADI;AAAA,SARR;AAcEyC,QAAAA,OAAO,EAAE,iBAAA,WAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAyC;AAChD,cAAI,OAAA,WAAA,KAAJ,QAAA,EAAqC;AACnC,mBAAO,YAAY,CAAZ,OAAA,CAAqB;AAC1BhC,cAAAA,SAAS,EADiB,WAAA;AAE1Ba,cAAAA,MAF0B,EAE1BA,MAF0B;AAG1BtB,cAAAA,MAH0B,EAG1BA,MAH0B;AAI1BuB,cAAAA,GAAG,EAAEN,KAAK,CAJgB,GAAA;AAK1ByB,cAAAA,MAAAA,EAAAA;AAL0B,aAArB,CAAP;AAOD;;AACDC,UAAAA,SAAS,CACP,OAAA,WAAA,KADO,QAAA,EAATA,wCAAS,CAATA;AAIAA,UAAAA,SAAS,CACPrB,MAAM,IADC,IAAA,EAATqB,qEAAS,CAATA;AAIAA,UAAAA,SAAS,CACP3C,MAAM,IADC,IAAA,EAAT2C,2EAAS,CAATA;AAIAA,UAAAA,SAAS,CACPD,MAAM,IADC,IAAA,EAATC,2EAAS,CAATA;AAIA,iBAAOzC,YAAY,CAAZA,OAAAA,CAAP,WAAOA,CAAP;AAxCG,SAAP;AA0CE0C,QAAAA,KAAK,EAAE,eAAA,OAAA,EAAA,KAAA;AAAA,iBACL,YAAY,CAAZ,KAAA,CAAmB;AACjBC,YAAAA,OADiB,EACjBA,OADiB;AAEjBpB,YAAAA,KAAK,EAAEA,KAAK,IAALA,IAAAA,GAAgBoB,OAAO,CAAPA,MAAAA,GAAhBpB,CAAAA,GAFU,KAAA;AAGjBF,YAAAA,GAAG,EAAEuB;AAHY,WAAnB,CADK;AAAA,SA1CT;AAgDEC,QAAAA,OAAO,EAAE;AAAA,iBACP,iBAAiB,CAAjB,IAAA,CAAuB;AACrBxB,YAAAA,GAAG,EAAEuB;AADgB,WAAvB,CADO;AAAA;AAhDX;AAjBG,KAAA;AAwELE,IAAAA,iBAxEK,6BAwEY,MAxEZ,EAwEY,KAxEZ,EAwE4B;AAE/B,UAAI,CAAJ,KAAA,EAAY;AACV,eAAOC,eAAe,CAAtB,MAAsB,CAAtB;AACD;;AAED,UAAMjB,gBAAgB,GAAGC,KAAK,CAALA,MAAAA,CAAaA,KAAK,CAA3C,KAAyBA,CAAzB;;AAEA,UACE,CAACiB,kBAAkB,CAAnB,MAAmB,CAAnB,IACAlD,MAAM,CAANA,IAAAA,KAAgBC,iBAAiB,CAFnC,QAAA,EAGE;AAEA,YAAMkD,iBAAiB,GAAG7C,YAAY,CAAC0B,gBAAgB,CAAvD,SAAsC,CAAtC;;AACA,YAAA,iBAAA,EAAuB;AACrB,cAAMf,KAAK,GAAGkC,iBAAiB,CAAjBA,iBAAAA,CAAAA,MAAAA,EAAd,gBAAcA,CAAd;;AAIA,cAAIlC,KAAK,KAALA,IAAAA,IAAkBA,KAAK,KAA3B,gBAAA,EAAkD;AAChD,mBAAOmC,UAAU,CAAVA,SAAAA,CAAAA,KAAAA,EAELpB,gBAAgB,CAFXoB,GAAAA,EAAAA,KAAAA,EAKLpD,MAAM,CAANA,IAAAA,KAAgBC,iBAAiB,CALnC,UAAOmD,CAAP;AAOD;AACF;AApBH,OAAA,MAqBO,IAAIpD,MAAM,CAANA,IAAAA,KAAgBC,iBAAiB,CAArC,QAAA,EAAgD;AAIrD,6DAAuBgC,KAAK,CAALA,MAAAA,CAAAA,KAAAA,GAAvB,OAAuBA,EAAvB,wCAAuD;AAAA,cAAvD,UAAuD;AACrD,cAAIf,WAAW,GAAGZ,YAAY,CAAC+C,UAAU,CAAzC,SAA8B,CAA9B;AACA,cAAIhC,WAAW,GACbrB,MAAM,CAANA,SAAAA,KAAqBqD,UAAU,CAA/BrD,SAAAA,IAA6CA,MAAM,CAAnDA,MAAAA,GACIA,MAAM,CADVA,MAAAA,GADF,MAAA;;AAKA,cAAA,WAAA,EAAiB;AACf,gBAAMsD,cAAc,GAAGpC,WAAW,CAAXA,iBAAAA,CAAAA,WAAAA,EAAvB,UAAuBA,CAAvB;;AAKA,gBAAIoC,cAAc,KAAdA,IAAAA,IAA2BA,cAAc,KAA7C,UAAA,EAA8D;AAC5D,kBAAMC,QAAQ,GAAGH,UAAU,CAAVA,eAAAA,CAAAA,KAAAA,EAEfE,cAAc,GAAGA,cAAc,CAAjB,GAAA,GAAwBD,UAAU,CAFjCD,GAAAA,EAGfE,cAAc,GAAA,cAAA,GAHhB,UAAiBF,CAAjB;AAKA,qDAAO,QAAP;AAEE5B,gBAAAA,eAAe,EACbS,KAAK,CAALA,KAAAA,KAAgBsB,QAAQ,CAAxBtB,KAAAA,GACIjC,MAAM,CAANA,SAAAA,KADJiC,IAAAA,GAEIA,KAAK,CAACT;AALd;AAOD;AACF;AACF;AA7D4B;;AAkE/B,UACEL,qBAAqB,CAArBA,MAAqB,CAArBA,IACAb,YAAY,CAACN,MAAM,CAAnBM,SAAY,CAAZA,KAFF,SAAA,EAGE;AACA,cAAMY,YAAW,GAAGZ,YAAY,CAACN,MAAM,CAAvC,SAAgC,CAAhC;;AACA,cAAA,MAAA;;AAEA2C,UAAAA,SAAS,CACP3C,MAAM,CAANA,IAAAA,KAAgBE,YAAY,CAA5BF,IAAAA,IAAqCA,MAAM,CAANA,GAAAA,IAD9B,IAAA,EAJT,qDAIS,CAAT2C;AAOA,cAAMa,cAAc,GAAG,KAAK,CAAL,MAAA,CAAA,SAAA,CAAwBC,UAAAA,CAAD,EAAO;AACnD,gBAAIzD,MAAM,CAAV,GAAA,EAAgB;AACd,qBAAOyD,CAAC,CAADA,GAAAA,KAAUzD,MAAM,CAAvB,GAAA;AADF,aAAA,MAEO;AACL,qBAAOyD,CAAC,CAADA,SAAAA,KAAgBzD,MAAM,CAA7B,SAAA;AACD;AAhBH,WAWuB,CAAvB;;AASA,cAAIA,MAAM,CAANA,IAAAA,KAAgBE,YAAY,CAA5BF,IAAAA,IAAqCwD,cAAc,KAAK,CAA5D,CAAA,EAAgE;AAE9D,gBAAIvB,KAAK,CAALA,KAAAA,KAAAA,cAAAA,IAAkC,CAACjC,MAAM,CAA7C,MAAA,EAAsD;AACpD,qBAAA,IAAA;AAH4D;;AAO9D,gBAAM0B,MAAM,GAAGO,KAAK,CAALA,MAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAAsBuB,cAAc,GAPW,CAO/CvB,CAAf;;AAGA,gBAAIjC,MAAM,CAAV,MAAA,EAAmB;AACjB,kBAAMiB,OAAK,GAAGgB,KAAK,CAALA,MAAAA,CAAd,cAAcA,CAAd;AACAP,cAAAA,MAAM,CAANA,cAAM,CAANA,mCAAyB,OAAzBA;AAEEJ,gBAAAA,MAAM,kCACDL,OAAK,CADF,MAAF,GAEDjB,MAAM,CAACsB,MAFN;AAFRI;AAZ4D;;AAqB9D,mDAAO,KAAP;AAEEF,cAAAA,eAAe,EACbS,KAAK,CAALA,KAAAA,KAAAA,cAAAA,GACIjC,MAAM,CAANA,SAAAA,KADJiC,IAAAA,GAEIA,KAAK,CALN,eAAP;AAMER,cAAAA,KAAK,EANA,cAAP;AAOEC,cAAAA,MAAAA,EAAAA;AAPF;AASD;;AAED,cAAA,YAAA,EAAiB;AAEf,gBAAML,YAAW,GACfrB,MAAM,CAANA,MAAAA,IACA,iBAAiB,CAAjB,IAAA,CAAuB;AACrBsB,cAAAA,MAAM,EAAEoC,0BAA0B,CAAC1D,MAAM,CAAP,SAAA,EAAA,MAAA;AADb,aAAvB,CAFF;;AAKAiB,YAAAA,MAAK;AACHK,cAAAA,MAAM,EAAEoC,0BAA0B,CAAC1D,MAAM,CAAP,SAAA,EAD5B,MAC4B;AAD/B,eAKAkB,YAAW,CAAXA,iBAAAA,CALG,YAKHA,CALA;AAMHT,cAAAA,SAAS,EAAET,MAAM,CANX,SAAH;AAOHuB,cAAAA,GAAG,EAAEvB,MAAM,CAANA,GAAAA,IAAc2B,WAAW;AAP3B,cAALV;AAPF,WAAA,MAgBO;AAELA,YAAAA,MAAK,GAAG;AACNK,cAAAA,MAAM,EAAEoC,0BAA0B,CAAC1D,MAAM,CAAP,SAAA,EAD5B,MAC4B,CAD5B;AAENS,cAAAA,SAAS,EAAET,MAAM,CAFX,SAAA;AAGNuB,cAAAA,GAAG,EAAEvB,MAAM,CAANA,GAAAA,IAAc2B,WAAW;AAHxB,aAARV;AAKD;;AACD,iDACKmC,UAAU,CAAVA,IAAAA,CAAAA,KAAAA,EADE,MACFA,CADL;AAEE5B,YAAAA,eAAe,EAAExB,MAAM,CAANA,SAAAA,KAAqB;AAFxC;AA/EF,SAAA,MAmFO,IACLA,MAAM,CAANA,IAAAA,KAAgBE,YAAY,CAA5BF,IAAAA,IACAM,YAAY,CAACN,MAAM,CAAnBM,SAAY,CAAZA,KAFK,SAAA,EAGL;AAEA,eAAA,KAAA;AA1J6B;;AA8J/B,UAAIa,qBAAqB,CAAzB,MAAyB,CAAzB,EAAmC;AACjC,YAAMwC,gBAAgB,GAAGnD,MAAM,CAANA,IAAAA,CAAzB,YAAyBA,CAAzB;;AACA,aAAK,IAAIoD,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGD,gBAAgB,CAApC,MAAA,EAA6CC,CAA7C,EAAA,EAAkD;AAChD,cAAMC,eAAe,GAAGF,gBAAgB,CAAxC,CAAwC,CAAxC;AACA,cAAMzC,aAAW,GAAGZ,YAAY,CAAhC,eAAgC,CAAhC;;AACA,cAAA,aAAA,EAAiB;AAEf,gBAAMwD,cAAc,GAAG5C,aAAW,CAAXA,iBAAAA,CACrBjB,iBAAiB,CAHJ,IAGbA,EADqBiB,CAAvB;;AAIA,gBAAM6C,mBAAmB,GAAG7C,aAAW,CAAXA,iBAAAA,CAAAA,MAAAA,EAA5B,cAA4BA,CAA5B;;AAIA,gBAAI8C,WAAW,GAAf,IAAA;;AACA,gBAAID,mBAAmB,KAAvB,IAAA,EAAkC;AAEhCC,cAAAA,WAAW,GAAXA,cAAAA;AAFF,aAAA,MAGO,IAAID,mBAAmB,KAAvB,cAAA,EAA4C;AAEjDC,cAAAA,WAAW,GAAXA,mBAAAA;AACD;;AACD,gBAAA,WAAA,EAAiB;AACf,kBAAM/C,OAAK,mCAAG,WAAH;AAETR,gBAAAA,SAAS,EAFG,eAAH;AAGTc,gBAAAA,GAAG,EAAEvB,MAAM,CAANA,GAAAA,IAAc2B,WAAW;AAHrB,gBAAX;;AAKA,qDACKyB,UAAU,CAAVA,IAAAA,CAAAA,KAAAA,EADE,OACFA,CADL;AAEE5B,gBAAAA,eAAe,EAAExB,MAAM,CAANA,SAAAA,KAAqB;AAFxC;AAID;AACF;AACF;AAjM4B;;AAqM/B,UAAIA,MAAM,CAANA,IAAAA,KAAgBE,YAAY,CAAhC,UAAA,EAA6C;AAG3C,YAAIF,MAAM,CAANA,GAAAA,IAAciC,KAAK,CAALA,GAAAA,KAAcjC,MAAM,CAAtC,GAAA,EAA4C;AAC1C,iBAAA,KAAA;AAJyC;;AAS3C,YAAIiC,KAAK,CAALA,KAAAA,GAAJ,CAAA,EAAqB;AACnB,iDAAO,KAAP;AAEET,YAAAA,eAAe,EAAExB,MAAM,CAANA,SAAAA,KAFZ,IAAP;AAGEyB,YAAAA,KAAK,EAHA,CAAP;AAIEC,YAAAA,MAAM,EAAE,CAACO,KAAK,CAALA,MAAAA,CAAD,CAACA,CAAD;AAJV;AAMD;;AACD,eAAA,KAAA;AAtN6B;;AA0N/B,UAAIjC,MAAM,CAANA,IAAAA,KAAgBE,YAAY,CAAhC,OAAA,EAA0C;AACxC,YADwC,UACxC;;AAGA,YAAIF,MAAM,CAANA,GAAAA,KAAAA,SAAAA,IAA4BiC,KAAK,CAALA,MAAAA,CAAhC,MAAA,EAAqD;AACnDgC,UAAAA,UAAU,GAAGhC,KAAK,CAALA,MAAAA,CAAAA,MAAAA,GAAbgC,CAAAA;AADF,SAAA,MAEO;AACLA,UAAAA,UAAU,GAAGhC,KAAK,CAALA,MAAAA,CAAAA,SAAAA,CAAwBwB,UAAAA,CAAD;AAAA,mBAAOA,CAAC,CAADA,GAAAA,KAAUzD,MAAM,CAA3DiE,GAAoC;AAAA,WAAvBhC,CAAbgC;AAPsC;;AAWxC,YAAIA,UAAU,KAAK,CAAnB,CAAA,EAAuB;AACrB,cAAM/C,aAAW,GAAGZ,YAAY,CAACN,MAAM,CAAvC,SAAgC,CAAhC;AACA,cAAIoB,UAAU,GAAd,EAAA;;AACA,cAAA,aAAA,EAAiB;AACf,gBAAMC,aAAW,GACfrB,MAAM,CAANA,MAAAA,IACA,iBAAiB,CAAjB,IAAA,CAAuB;AACrBsB,cAAAA,MAAM,EAAEoC,0BAA0B,CAAC1D,MAAM,CAAP,SAAA,EAAA,MAAA;AADb,aAAvB,CAFF;;AAKAoB,YAAAA,UAAU,GAAGF,aAAW,CAAXA,iBAAAA,CAAbE,aAAaF,CAAbE;AACD;;AACD,cAAMM,OAAM,sBAAOO,KAAK,CAAxB,MAAY,CAAZ;;AACAP,UAAAA,OAAM,CAANA,UAAM,CAANA;AACEJ,YAAAA,MAAM,EAAEoC,0BAA0B,CAAC1D,MAAM,CAAP,SAAA,EADf,MACe;AADpC0B,aAAqB,UAArBA;AAIEjB,YAAAA,SAAS,EAAET,MAAM,CAJE,SAArB0B;AAKEH,YAAAA,GAAG,EAAEvB,MAAM,CAANA,MAAAA,IAAiB2B,WAAW;AALnCD;AAOA,iDAAO,KAAP;AAAmBA,YAAAA,MAAAA,EAAAA;AAAnB;AACD;AAzP4B;;AA6P/B,UACE1B,MAAM,CAANA,IAAAA,KAAgBE,YAAY,CAA5BF,mBAAAA,KACCA,MAAM,CAANA,GAAAA,IAAAA,IAAAA,IAAsBA,MAAM,CAANA,GAAAA,KAAeiC,KAAK,CAD3CjC,GAAAA,KAEAA,MAAM,CAANA,UAAAA,KAAsBiC,KAAK,CAALA,MAAAA,CAAaA,KAAK,CAAlBA,KAAAA,EAFtBjC,GAAAA,IAGAiC,KAAK,CAJP,eAAA,EAKE;AACA,+CAAO,KAAP;AAEET,UAAAA,eAAe,EAAE;AAFnB;AAID;;AAED,UAAIxB,MAAM,CAANA,IAAAA,KAAgBC,iBAAiB,CAArC,UAAA,EAAkD;AAChD,YAAMsB,GAAG,GAAGvB,MAAM,CAAlB,GAAA;AACA,YAAMkE,SAAS,GAAGjC,KAAK,CAALA,MAAAA,CAAAA,IAAAA,CAAmBhB,UAAAA,KAAD;AAAA,iBAAWA,KAAK,CAALA,GAAAA,KAA/C,GAAoC;AAAA,SAAlBgB,CAAlB;;AACA,YAAA,SAAA,EAAe;AACb,cAAMX,MAAM,mCACP4C,SAAS,CADC,MAAH,GAEPlE,MAAM,CAACsB,MAFA,CAAZ;;AAIA,cAAMI,QAAM,sBAAOO,KAAK,CAAxB,MAAY,CAAZ;;AACAP,UAAAA,QAAM,CAACO,KAAK,CAALA,MAAAA,CAAAA,OAAAA,CAAPP,SAAOO,CAAD,CAANP,mCAA0C,SAA1CA;AAEEJ,YAAAA,MAAAA,EAAAA;AAFFI;AAIA,iDAAO,KAAP;AAEEA,YAAAA,MAAAA,EAAAA;AAFF;AAID;AACF;;AAED,UAAI1B,MAAM,CAANA,IAAAA,KAAgBE,YAAY,CAAhC,KAAA,EAAwC;AAEtC,YAAIF,MAAM,CAANA,GAAAA,IAAAA,IAAAA,IAAsBA,MAAM,CAANA,GAAAA,KAAeiC,KAAK,CAA9C,GAAA,EAAoD;AAGlD,iBAAA,KAAA;AACD;;AACD,YAAMkC,eAAe,GAAGnE,MAAM,CAA9B,OAAA;AAEA,+CAAO,KAAP;AAEE0B,UAAAA,MAAM,EAAE,eAAe,CAAf,GAAA,CAAqB0C,UAAAA,cAAD,EAAoB;AAC9C,gBAAMC,MAAM,GAAG/D,YAAY,CAAC8D,cAAc,CAA1C,SAA2B,CAA3B;AAEA,gBAAIhD,UAAU,GAAd,EAAA;;AAEA,gBAAA,MAAA,EAAY;AACV,kBAAMC,aAAW,GACf+C,cAAc,CAAdA,MAAAA,IACA,iBAAiB,CAAjB,IAAA,CAAuB;AACrB9C,gBAAAA,MAAM,EAAEoC,0BAA0B,CAChCU,cAAc,CADkB,SAAA,EAAA,cAAA;AADb,eAAvB,CAFF;;AASAhD,cAAAA,UAAU,GAAGiD,MAAM,CAANA,iBAAAA,CAAbjD,aAAaiD,CAAbjD;AACD;;AAED;AACEE,cAAAA,MAAM,EAAEoC,0BAA0B,CAChCU,cAAc,CADkB,SAAA,EAD7B,cAC6B;AADpC,eAAO,UAAP;AAME3D,cAAAA,SAAS,EAAE2D,cAAc,CANpB,SAAP;AAOE7C,cAAAA,GAAG,EAAE6C,cAAc,CAAdA,GAAAA,IAAsBzC,WAAW;AAPxC;AApBG,WAEG,CAFV;AA8BEF,UAAAA,KAAK,EAAEzB,MAAM,CAACyB;AA9BhB;AAgCD;;AAED,UACEzB,MAAM,CAANA,IAAAA,KAAgBC,iBAAiB,CAAjCD,IAAAA,IACAA,MAAM,CAANA,IAAAA,KAAgBE,YAAY,CAF9B,GAAA,EAGE;AAAA,YACM,IADN,GACA,MADA,CACM,GADN;AAAA,YACM,CADN,GACA,MADA,CACM,CADN;AAAA,YACM,SADN,GACA,MADA,CACM,SADN;AAAA,YAC2BoE,KAD3B,GACA,MADA,CAC2BA,KAD3B;;AAGA,YAAItE,MAAM,CAANA,IAAAA,KAAgBE,YAAY,CAA5BF,GAAAA,IAAoCsE,KAAK,KAAzCtE,KAAAA,IAAJ,IAAA,EAAgE;AAC9D,cAAMyB,KAAK,GAAGQ,KAAK,CAALA,MAAAA,CAAAA,SAAAA,CAAwBwB,UAAAA,CAAD;AAAA,mBAAOA,CAAC,CAADA,GAAAA,KAA5C,IAAqC;AAAA,WAAvBxB,CAAd;;AAEA,cAAIR,KAAK,GAAT,CAAA,EAAe;AACb,gBAAM8C,KAAK,GAAGC,IAAI,CAAJA,GAAAA,CAAS/C,KAAK,IAAIa,CAAJ,KAAA,IAAIA,IAAAA,CAAJ,KAAA,KAAA,CAAIA,GAAJ,CAAIA,GAATb,CAAK,CAALA,GAAT+C,CAAAA,EAAd,CAAcA,CAAd;;AACA,gBAAM9C,QAAM,GAAGO,KAAK,CAALA,MAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,MAAAA,CAELA,KAAK,CAALA,MAAAA,CAAAA,KAAAA,CAAmBR,KAAK,GAFlC,CAEUQ,CAFKA,CAAf;;AAIA,gBAAIP,QAAM,CAAV,MAAA,EAAmB;AACjB,qDAAO,KAAP;AAEEA,gBAAAA,MAFK,EAELA,QAFF;AAGED,gBAAAA,KAAK,EAAEC,QAAM,CAANA,MAAAA,GAHF,CAAP;AAIEF,gBAAAA,eAAe,EAAEiD,SAAS,KAAK;AAJjC;AAMD;AACF;AAjBH,SAAA,MAkBO;AACL,cAAIC,cAAc,GAAGzC,KAAK,CAA1B,KAAA;;AAEA,cAAIjC,MAAM,CAANA,IAAAA,KAAgBE,YAAY,CAA5BF,GAAAA,IAAoCsC,CAAC,IAAzC,IAAA,EAAmD;AAGjDoC,YAAAA,cAAc,GAAGF,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAYvC,KAAK,CAALA,KAAAA,GAAAA,CAAAA,GAA7ByC,CAAiBF,CAAjBE;AAHF,WAAA,MAIO,IAAA,IAAA,EAAS;AACd,gBAAMC,SAAS,GAAG1C,KAAK,CAALA,MAAAA,CAAAA,IAAAA,CAAmBhB,UAAAA,KAAD;AAAA,qBAAWA,KAAK,CAALA,GAAAA,KAA/C,IAAoC;AAAA,aAAlBgB,CAAlB;AACAyC,YAAAA,cAAc,GAAGzC,KAAK,CAALA,MAAAA,CAAAA,OAAAA,CAAjByC,SAAiBzC,CAAjByC;AACD;;AAED,cAAIA,cAAc,GAAlB,CAAA,EAAwB;AACtB,mDAAO,KAAP;AAEEhD,cAAAA,MAAM,EAAEO,KAAK,CAALA,MAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAFH,cAEGA,CAFV;AAGER,cAAAA,KAAK,EAAEiD,cAAc,GAHhB,CAAP;AAIElD,cAAAA,eAAe,EAAEiD,SAAS,KAAK;AAJjC;AAMD;AACF;AApX4B;;AA0X/B,UAAMG,QAAQ,GAAG5E,MAAM,CAANA,GAAAA,GAAaoD,UAAU,CAAVA,OAAAA,CAAAA,KAAAA,EAA0BpD,MAAM,CAA7CA,GAAaoD,CAAbpD,GAAqD,CA1XvC,CA0X/B;;AAIA,4DAAuBiC,KAAK,CAALA,MAAAA,CAAAA,KAAAA,GAAvB,OAAuBA,EAAvB,2CAAuD;AAAA,YAAvD,WAAuD;;AACrD,YAAIoB,WAAU,CAAVA,GAAAA,KAAmBrB,gBAAgB,CAAvC,GAAA,EAA6C;AAE3C;AAHmD;;AAQrD,YAAI4C,QAAQ,IAARA,CAAAA,IAAiBvB,WAAU,CAAVA,GAAAA,KAAmBrD,MAAM,CAA9C,GAAA,EAAoD;AAClD;AACD;;AACD,YAAIkB,aAAW,GAAGZ,YAAY,CAAC+C,WAAU,CAAzC,SAA8B,CAA9B;;AACA,YAAA,aAAA,EAAiB;AACf,cAAMpC,OAAK,GAAGC,aAAW,CAAXA,iBAAAA,CAAAA,MAAAA,EAAd,WAAcA,CAAd;;AAEA,cAAID,OAAK,KAAT,IAAA,EAAoB;AAClB,mBAAA,KAAA;AADF,WAAA,MAEO,IAAIA,OAAK,IAAIA,OAAK,KAAlB,WAAA,EAAmC;AACxC,mBAAOmC,UAAU,CAAVA,SAAAA,CAAAA,KAAAA,EAELC,WAAU,CAFLD,GAAAA,EAAAA,OAAAA,EAMLpD,MAAM,CAANA,aAAAA,IAAwBA,MAAM,CAANA,IAAAA,CAAAA,QAAAA,CAN1B,QAM0BA,CANnBoD,CAAP;AAQD;AACF;AACF;;AAED,aAAA,KAAA;AApeG,KAAA;AAueLyB,IAAAA,wBAveK,oCAuemB,KAvenB,EAue2B;AAC9B,UAAM5D,KAAK,GAAGgB,KAAK,CAALA,MAAAA,CAAaA,KAAK,CAAhC,KAAcA,CAAd;AACA,aAAO6C,wBAAwB,CAA/B,KAA+B,CAA/B;AAzeG,KAAA;AA4eLjD,IAAAA,yBA5eK,qCA4eoB,IA5epB,EA4eoB,MA5epB,EA4emC;AACtC,aAAOA,0BAAyB,CAAA,IAAA,EAAhC,MAAgC,CAAhC;AA7eG,KAAA;AAgfLkD,IAAAA,gBAAgB,EAAEC,kBAAkB,CAAA,YAAA,EAElC5E,WAAW,CAFuB,wBAAA;AAhf/B,GAAP;AA3GF,CAAA","sourcesContent":["import * as NavigationActions from '../NavigationActions';\nimport * as StackActions from './StackActions';\nimport createConfigGetter from './createConfigGetter';\nimport getScreenForRouteName from './getScreenForRouteName';\nimport StateUtils from '../StateUtils';\nimport validateRouteConfigMap from './validateRouteConfigMap';\nimport invariant from '../utils/invariant';\nimport { generateKey } from './KeyGenerator';\nimport { createPathParser } from './pathUtils';\n\nfunction behavesLikePushAction(action) {\n  return (\n    action.type === NavigationActions.NAVIGATE ||\n    action.type === StackActions.PUSH\n  );\n}\n\nconst defaultActionCreators = () => ({});\n\nfunction isResetToRootStack(action) {\n  return action.type === StackActions.RESET && action.key === null;\n}\n\nexport default (routeConfigs, stackConfig = {}) => {\n  // Fail fast on invalid route definitions\n  validateRouteConfigMap(routeConfigs);\n\n  const childRouters = {};\n  const routeNames = Object.keys(routeConfigs);\n\n  // Loop through routes and find child routers\n  routeNames.forEach((routeName) => {\n    // We're not using `getScreenForRouteName` here to preserve the lazy loading\n    // behaviour of routes. This means that routes with child routers must be\n    // defined using a component directly or with an object with a screen prop.\n    const routeConfig = routeConfigs[routeName];\n    const screen =\n      routeConfig && routeConfig.screen ? routeConfig.screen : routeConfig;\n    if (screen && screen.router) {\n      // If it has a router it's a navigator.\n      childRouters[routeName] = screen.router;\n    } else {\n      // If it doesn't have router it's an ordinary React component.\n      childRouters[routeName] = null;\n    }\n  });\n\n  const { initialRouteParams } = stackConfig;\n  const getCustomActionCreators =\n    stackConfig.getCustomActionCreators || defaultActionCreators;\n\n  const initialRouteName = stackConfig.initialRouteName || routeNames[0];\n\n  const initialChildRouter = childRouters[initialRouteName];\n\n  function getInitialState(action) {\n    let route = {};\n    const childRouter = childRouters[action.routeName];\n\n    // This is a push-like action, and childRouter will be a router or null if we are responsible for this routeName\n    if (behavesLikePushAction(action) && childRouter !== undefined) {\n      let childState = {};\n      // The router is null for normal leaf routes\n      if (childRouter !== null) {\n        const childAction =\n          action.action || NavigationActions.init({ params: action.params });\n        childState = childRouter.getStateForAction(childAction);\n      }\n\n      return {\n        key: 'StackRouterRoot',\n        isTransitioning: false,\n        index: 0,\n        routes: [\n          {\n            params: action.params,\n            ...childState,\n            key: action.key || generateKey(),\n            routeName: action.routeName,\n          },\n        ],\n      };\n    }\n\n    if (initialChildRouter) {\n      route = initialChildRouter.getStateForAction(\n        NavigationActions.navigate({\n          routeName: initialRouteName,\n          params: initialRouteParams,\n        })\n      );\n    }\n    const params = (routeConfigs[initialRouteName].params ||\n      route.params ||\n      action.params ||\n      initialRouteParams) && {\n      ...(routeConfigs[initialRouteName].params || {}),\n      ...(route.params || {}),\n      ...(action.params || {}),\n      ...(initialRouteParams || {}),\n    };\n    const { initialRouteKey } = stackConfig;\n    route = {\n      ...route,\n      ...(params ? { params } : {}),\n      routeName: initialRouteName,\n      key: action.key || initialRouteKey || generateKey(),\n    };\n    return {\n      key: 'StackRouterRoot',\n      isTransitioning: false,\n      index: 0,\n      routes: [route],\n    };\n  }\n\n  function getParamsForRouteAndAction(routeName, action) {\n    let routeConfig = routeConfigs[routeName];\n    if (routeConfig && routeConfig.params) {\n      return { ...routeConfig.params, ...action.params };\n    } else {\n      return action.params;\n    }\n  }\n\n  const {\n    getPathAndParamsForRoute,\n    getActionForPathAndParams,\n  } = createPathParser(childRouters, routeConfigs, stackConfig);\n\n  return {\n    childRouters,\n\n    getComponentForState(state) {\n      const activeChildRoute = state.routes[state.index];\n      const { routeName } = activeChildRoute;\n      if (childRouters[routeName]) {\n        return childRouters[routeName].getComponentForState(activeChildRoute);\n      }\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getComponentForRouteName(routeName) {\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getActionCreators(route, navStateKey) {\n      return {\n        ...getCustomActionCreators(route, navStateKey),\n        pop: (n, params) =>\n          StackActions.pop({\n            n,\n            ...params,\n          }),\n        popToTop: (params) => StackActions.popToTop(params),\n        push: (routeName, params, action) =>\n          StackActions.push({\n            routeName,\n            params,\n            action,\n          }),\n        replace: (replaceWith, params, action, newKey) => {\n          if (typeof replaceWith === 'string') {\n            return StackActions.replace({\n              routeName: replaceWith,\n              params,\n              action,\n              key: route.key,\n              newKey,\n            });\n          }\n          invariant(\n            typeof replaceWith === 'object',\n            'Must replaceWith an object or a string'\n          );\n          invariant(\n            params == null,\n            'Params must not be provided to .replace() when specifying an object'\n          );\n          invariant(\n            action == null,\n            'Child action must not be provided to .replace() when specifying an object'\n          );\n          invariant(\n            newKey == null,\n            'Child action must not be provided to .replace() when specifying an object'\n          );\n          return StackActions.replace(replaceWith);\n        },\n        reset: (actions, index) =>\n          StackActions.reset({\n            actions,\n            index: index == null ? actions.length - 1 : index,\n            key: navStateKey,\n          }),\n        dismiss: () =>\n          NavigationActions.back({\n            key: navStateKey,\n          }),\n      };\n    },\n\n    getStateForAction(action, state) {\n      // Set up the initial state if needed\n      if (!state) {\n        return getInitialState(action);\n      }\n\n      const activeChildRoute = state.routes[state.index];\n\n      if (\n        !isResetToRootStack(action) &&\n        action.type !== NavigationActions.NAVIGATE\n      ) {\n        // Let the active child router handle the action\n        const activeChildRouter = childRouters[activeChildRoute.routeName];\n        if (activeChildRouter) {\n          const route = activeChildRouter.getStateForAction(\n            action,\n            activeChildRoute\n          );\n          if (route !== null && route !== activeChildRoute) {\n            return StateUtils.replaceAt(\n              state,\n              activeChildRoute.key,\n              route,\n              // the following tells replaceAt to NOT change the index to this route for the setParam action, because people don't expect param-setting actions to switch the active route\n              action.type === NavigationActions.SET_PARAMS\n            );\n          }\n        }\n      } else if (action.type === NavigationActions.NAVIGATE) {\n        // Traverse routes from the top of the stack to the bottom, so the\n        // active route has the first opportunity, then the one before it, etc.\n\n        for (let childRoute of state.routes.slice().reverse()) {\n          let childRouter = childRouters[childRoute.routeName];\n          let childAction =\n            action.routeName === childRoute.routeName && action.action\n              ? action.action\n              : action;\n\n          if (childRouter) {\n            const nextRouteState = childRouter.getStateForAction(\n              childAction,\n              childRoute\n            );\n\n            if (nextRouteState === null || nextRouteState !== childRoute) {\n              const newState = StateUtils.replaceAndPrune(\n                state,\n                nextRouteState ? nextRouteState.key : childRoute.key,\n                nextRouteState ? nextRouteState : childRoute\n              );\n              return {\n                ...newState,\n                isTransitioning:\n                  state.index !== newState.index\n                    ? action.immediate !== true\n                    : state.isTransitioning,\n              };\n            }\n          }\n        }\n      }\n\n      // Handle push and navigate actions. This must happen after the focused\n      // child router has had a chance to handle the action.\n      if (\n        behavesLikePushAction(action) &&\n        childRouters[action.routeName] !== undefined // undefined means it's not a childRouter or a screen\n      ) {\n        const childRouter = childRouters[action.routeName];\n        let route;\n\n        invariant(\n          action.type !== StackActions.PUSH || action.key == null,\n          'StackRouter does not support key on the push action'\n        );\n\n        // Before pushing a new route we first try to find one in the existing route stack\n        // More information on this: https://github.com/react-navigation/rfcs/blob/master/text/0004-less-pushy-navigate.md\n        const lastRouteIndex = state.routes.findIndex((r) => {\n          if (action.key) {\n            return r.key === action.key;\n          } else {\n            return r.routeName === action.routeName;\n          }\n        });\n\n        // An instance of this route exists already and we're dealing with a navigate action\n        if (action.type !== StackActions.PUSH && lastRouteIndex !== -1) {\n          // If index is unchanged and params are not being set, leave state identity intact\n          if (state.index === lastRouteIndex && !action.params) {\n            return null;\n          }\n\n          // Remove the now unused routes at the tail of the routes array\n          const routes = state.routes.slice(0, lastRouteIndex + 1);\n\n          // Apply params if provided, otherwise leave route identity intact\n          if (action.params) {\n            const route = state.routes[lastRouteIndex];\n            routes[lastRouteIndex] = {\n              ...route,\n              params: {\n                ...route.params,\n                ...action.params,\n              },\n            };\n          }\n          // Return state with new index. Change isTransitioning only if index has changed\n          return {\n            ...state,\n            isTransitioning:\n              state.index !== lastRouteIndex\n                ? action.immediate !== true\n                : state.isTransitioning,\n            index: lastRouteIndex,\n            routes,\n          };\n        }\n\n        if (childRouter) {\n          // Delegate to the child router with the given action, or init it\n          const childAction =\n            action.action ||\n            NavigationActions.init({\n              params: getParamsForRouteAndAction(action.routeName, action),\n            });\n          route = {\n            params: getParamsForRouteAndAction(action.routeName, action),\n            // note(brentvatne): does it make sense to wipe out the params\n            // here? or even to add params at all? need more info about what\n            // this solves\n            ...childRouter.getStateForAction(childAction),\n            routeName: action.routeName,\n            key: action.key || generateKey(),\n          };\n        } else {\n          // Create the route from scratch\n          route = {\n            params: getParamsForRouteAndAction(action.routeName, action),\n            routeName: action.routeName,\n            key: action.key || generateKey(),\n          };\n        }\n        return {\n          ...StateUtils.push(state, route),\n          isTransitioning: action.immediate !== true,\n        };\n      } else if (\n        action.type === StackActions.PUSH &&\n        childRouters[action.routeName] === undefined\n      ) {\n        // Return the state identity to bubble the action up\n        return state;\n      }\n\n      // Handle navigation to other child routers that are not yet pushed\n      if (behavesLikePushAction(action)) {\n        const childRouterNames = Object.keys(childRouters);\n        for (let i = 0; i < childRouterNames.length; i++) {\n          const childRouterName = childRouterNames[i];\n          const childRouter = childRouters[childRouterName];\n          if (childRouter) {\n            // For each child router, start with a blank state\n            const initChildRoute = childRouter.getStateForAction(\n              NavigationActions.init()\n            );\n            // Then check to see if the router handles our navigate action\n            const navigatedChildRoute = childRouter.getStateForAction(\n              action,\n              initChildRoute\n            );\n            let routeToPush = null;\n            if (navigatedChildRoute === null) {\n              // Push the route if the router has 'handled' the action and returned null\n              routeToPush = initChildRoute;\n            } else if (navigatedChildRoute !== initChildRoute) {\n              // Push the route if the state has changed in response to this navigation\n              routeToPush = navigatedChildRoute;\n            }\n            if (routeToPush) {\n              const route = {\n                ...routeToPush,\n                routeName: childRouterName,\n                key: action.key || generateKey(),\n              };\n              return {\n                ...StateUtils.push(state, route),\n                isTransitioning: action.immediate !== true,\n              };\n            }\n          }\n        }\n      }\n\n      // Handle pop-to-top behavior. Make sure this happens after children have had a chance to handle the action, so that the inner stack pops to top first.\n      if (action.type === StackActions.POP_TO_TOP) {\n        // Refuse to handle pop to top if a key is given that doesn't correspond\n        // to this router\n        if (action.key && state.key !== action.key) {\n          return state;\n        }\n\n        // If we're already at the top, then we return the state with a new\n        // identity so that the action is handled by this router.\n        if (state.index > 0) {\n          return {\n            ...state,\n            isTransitioning: action.immediate !== true,\n            index: 0,\n            routes: [state.routes[0]],\n          };\n        }\n        return state;\n      }\n\n      // Handle replace action\n      if (action.type === StackActions.REPLACE) {\n        let routeIndex;\n\n        // If the key param is undefined, set the index to the last route in the stack\n        if (action.key === undefined && state.routes.length) {\n          routeIndex = state.routes.length - 1;\n        } else {\n          routeIndex = state.routes.findIndex((r) => r.key === action.key);\n        }\n\n        // Only replace if the key matches one of our routes\n        if (routeIndex !== -1) {\n          const childRouter = childRouters[action.routeName];\n          let childState = {};\n          if (childRouter) {\n            const childAction =\n              action.action ||\n              NavigationActions.init({\n                params: getParamsForRouteAndAction(action.routeName, action),\n              });\n            childState = childRouter.getStateForAction(childAction);\n          }\n          const routes = [...state.routes];\n          routes[routeIndex] = {\n            params: getParamsForRouteAndAction(action.routeName, action),\n            // merge the child state in this order to allow params override\n            ...childState,\n            routeName: action.routeName,\n            key: action.newKey || generateKey(),\n          };\n          return { ...state, routes };\n        }\n      }\n\n      // Update transitioning state\n      if (\n        action.type === StackActions.COMPLETE_TRANSITION &&\n        (action.key == null || action.key === state.key) &&\n        action.toChildKey === state.routes[state.index].key &&\n        state.isTransitioning\n      ) {\n        return {\n          ...state,\n          isTransitioning: false,\n        };\n      }\n\n      if (action.type === NavigationActions.SET_PARAMS) {\n        const key = action.key;\n        const lastRoute = state.routes.find((route) => route.key === key);\n        if (lastRoute) {\n          const params = {\n            ...lastRoute.params,\n            ...action.params,\n          };\n          const routes = [...state.routes];\n          routes[state.routes.indexOf(lastRoute)] = {\n            ...lastRoute,\n            params,\n          };\n          return {\n            ...state,\n            routes,\n          };\n        }\n      }\n\n      if (action.type === StackActions.RESET) {\n        // Only handle reset actions that are unspecified or match this state key\n        if (action.key != null && action.key !== state.key) {\n          // Deliberately use != instead of !== so we can match null with\n          // undefined on either the state or the action\n          return state;\n        }\n        const newStackActions = action.actions;\n\n        return {\n          ...state,\n          routes: newStackActions.map((newStackAction) => {\n            const router = childRouters[newStackAction.routeName];\n\n            let childState = {};\n\n            if (router) {\n              const childAction =\n                newStackAction.action ||\n                NavigationActions.init({\n                  params: getParamsForRouteAndAction(\n                    newStackAction.routeName,\n                    newStackAction\n                  ),\n                });\n\n              childState = router.getStateForAction(childAction);\n            }\n\n            return {\n              params: getParamsForRouteAndAction(\n                newStackAction.routeName,\n                newStackAction\n              ),\n              ...childState,\n              routeName: newStackAction.routeName,\n              key: newStackAction.key || generateKey(),\n            };\n          }),\n          index: action.index,\n        };\n      }\n\n      if (\n        action.type === NavigationActions.BACK ||\n        action.type === StackActions.POP\n      ) {\n        const { key, n, immediate, prune } = action;\n\n        if (action.type === StackActions.POP && prune === false && key) {\n          const index = state.routes.findIndex((r) => r.key === key);\n\n          if (index > 0) {\n            const count = Math.max(index - (n ?? 1) + 1, 1);\n            const routes = state.routes\n              .slice(0, count)\n              .concat(state.routes.slice(index + 1));\n\n            if (routes.length) {\n              return {\n                ...state,\n                routes,\n                index: routes.length - 1,\n                isTransitioning: immediate !== true,\n              };\n            }\n          }\n        } else {\n          let backRouteIndex = state.index;\n\n          if (action.type === StackActions.POP && n != null) {\n            // determine the index to go back *from*. In this case, n=1 means to go\n            // back from state.index, as if it were a normal \"BACK\" action\n            backRouteIndex = Math.max(1, state.index - n + 1);\n          } else if (key) {\n            const backRoute = state.routes.find((route) => route.key === key);\n            backRouteIndex = state.routes.indexOf(backRoute);\n          }\n\n          if (backRouteIndex > 0) {\n            return {\n              ...state,\n              routes: state.routes.slice(0, backRouteIndex),\n              index: backRouteIndex - 1,\n              isTransitioning: immediate !== true,\n            };\n          }\n        }\n      }\n\n      // By this point in the router's state handling logic, we have handled the behavior of the active route, and handled any stack actions.\n      // If we haven't returned by now, we should allow non-active child routers to handle this action, and switch to that index if the child state (route) does change..\n\n      const keyIndex = action.key ? StateUtils.indexOf(state, action.key) : -1;\n\n      // Traverse routes from the top of the stack to the bottom, so the\n      // active route has the first opportunity, then the one before it, etc.\n      for (let childRoute of state.routes.slice().reverse()) {\n        if (childRoute.key === activeChildRoute.key) {\n          // skip over the active child because we let it attempt to handle the action earlier\n          continue;\n        }\n        // If a key is provided and in routes state then let's use that\n        // knowledge to skip extra getStateForAction calls on other child\n        // routers\n        if (keyIndex >= 0 && childRoute.key !== action.key) {\n          continue;\n        }\n        let childRouter = childRouters[childRoute.routeName];\n        if (childRouter) {\n          const route = childRouter.getStateForAction(action, childRoute);\n\n          if (route === null) {\n            return state;\n          } else if (route && route !== childRoute) {\n            return StateUtils.replaceAt(\n              state,\n              childRoute.key,\n              route,\n              // People don't expect these actions to switch the active route\n              // TODO: We should switch to action.preserveFocus: true for drawer in future\n              action.preserveFocus || action.type.includes('DRAWER')\n            );\n          }\n        }\n      }\n\n      return state;\n    },\n\n    getPathAndParamsForState(state) {\n      const route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n\n    getActionForPathAndParams(path, params) {\n      return getActionForPathAndParams(path, params);\n    },\n\n    getScreenOptions: createConfigGetter(\n      routeConfigs,\n      stackConfig.defaultNavigationOptions\n    ),\n  };\n};\n"]},"metadata":{},"sourceType":"module"}