{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport AnimatedNode from \"./AnimatedNode\";\nimport { createOrReuseTransformNode } from \"./AnimatedTransform\";\nimport deepEqual from 'fbjs/lib/areEqual';\n\nfunction sanitizeStyle(inputStyle) {\n  var style = {};\n\n  for (var key in inputStyle) {\n    var value = inputStyle[key];\n\n    if (value instanceof AnimatedNode) {\n      style[key] = value.__nodeID;\n    }\n  }\n\n  return style;\n}\n\nexport function createOrReuseStyleNode(style, oldNode) {\n  style = StyleSheet.flatten(style) || {};\n\n  if (style.transform) {\n    style = _objectSpread(_objectSpread({}, style), {}, {\n      transform: createOrReuseTransformNode(style.transform, oldNode && oldNode._style.transform)\n    });\n  }\n\n  var config = sanitizeStyle(style);\n\n  if (oldNode && deepEqual(config, oldNode._config)) {\n    return oldNode;\n  }\n\n  return new AnimatedStyle(style, config);\n}\n\nvar AnimatedStyle = function (_AnimatedNode) {\n  _inherits(AnimatedStyle, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedStyle);\n\n  function AnimatedStyle(style, config) {\n    var _this;\n\n    _classCallCheck(this, AnimatedStyle);\n\n    _this = _super.call(this, {\n      type: 'style',\n      style: config\n    }, Object.values(style));\n    _this._config = config;\n    _this._style = style;\n    return _this;\n  }\n\n  _createClass(AnimatedStyle, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedStyle, id: \".concat(this.__nodeID);\n    }\n  }, {\n    key: \"_walkStyleAndGetAnimatedValues\",\n    value: function _walkStyleAndGetAnimatedValues(style) {\n      var updatedStyle = {};\n\n      for (var key in style) {\n        var value = style[key];\n\n        if (value instanceof AnimatedNode) {\n          updatedStyle[key] = value.__getValue();\n        } else if (value && !Array.isArray(value) && typeof value === 'object') {\n          updatedStyle[key] = this._walkStyleAndGetAnimatedValues(value);\n        }\n      }\n\n      return updatedStyle;\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      return this._walkStyleAndGetAnimatedValues(this._style);\n    }\n  }]);\n\n  return AnimatedStyle;\n}(AnimatedNode);\n\nexport { AnimatedStyle as default };","map":{"version":3,"sources":["AnimatedStyle.js"],"names":["style","value","inputStyle","StyleSheet","transform","createOrReuseTransformNode","oldNode","config","sanitizeStyle","deepEqual","constructor","type","Object","toString","_walkStyleAndGetAnimatedValues","updatedStyle","Array","__onEvaluate"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,OAAA,YAAA;AACA,SAAA,0BAAA;AAEA,OAAA,SAAA,MAAA,mBAAA;;AAEA,SAAA,aAAA,CAAA,UAAA,EAAmC;AACjC,MAAMA,KAAK,GAAX,EAAA;;AACA,OAAK,IAAL,GAAA,IAAA,UAAA,EAA8B;AAC5B,QAAMC,KAAK,GAAGC,UAAU,CAAxB,GAAwB,CAAxB;;AACA,QAAID,KAAK,YAAT,YAAA,EAAmC;AACjCD,MAAAA,KAAK,CAALA,GAAK,CAALA,GAAaC,KAAK,CAAlBD,QAAAA;AACD;AACF;;AACD,SAAA,KAAA;AACD;;AAED,OAAO,SAAA,sBAAA,CAAA,KAAA,EAAA,OAAA,EAAgD;AACrDA,EAAAA,KAAK,GAAGG,UAAU,CAAVA,OAAAA,CAAAA,KAAAA,KAARH,EAAAA;;AACA,MAAIA,KAAK,CAAT,SAAA,EAAqB;AACnBA,IAAAA,KAAK,GAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA;AAEHI,MAAAA,SAAS,EAAEC,0BAA0B,CACnCL,KAAK,CAD8B,SAAA,EAEnCM,OAAO,IAAIA,OAAO,CAAPA,MAAAA,CAFwB,SAAA;AAFlC,KAAA,CAALN;AAOD;;AACD,MAAMO,MAAM,GAAGC,aAAa,CAA5B,KAA4B,CAA5B;;AACA,MAAIF,OAAO,IAAIG,SAAS,CAAA,MAAA,EAASH,OAAO,CAAxC,OAAwB,CAAxB,EAAmD;AACjD,WAAA,OAAA;AACD;;AACD,SAAO,IAAA,aAAA,CAAA,KAAA,EAAP,MAAO,CAAP;AACD;;IAMc,a;;;;;AACbI,yBAAW,KAAXA,EAAW,MAAXA,EAA2B;AAAA;;AAAA;;AACzB,8BAAM;AAAEC,MAAAA,IAAI,EAAN,OAAA;AAAiBX,MAAAA,KAAK,EAAEO;AAAxB,KAAN,EAAwCK,MAAM,CAANA,MAAAA,CAAxC,KAAwCA,CAAxC;AACA,UAAA,OAAA,GAAA,MAAA;AACA,UAAA,MAAA,GAAA,KAAA;AAHyB;AAI1B;;;;WAEDC,oBAAW;AACT,aAAA,sBAAA,MAAA,CAA6B,KAA7B,QAAA,CAAA;AACD;;;WAEDC,wCAA8B,KAA9BA,EAAsC;AACpC,UAAMC,YAAY,GAAlB,EAAA;;AACA,WAAK,IAAL,GAAA,IAAA,KAAA,EAAyB;AACvB,YAAMd,KAAK,GAAGD,KAAK,CAAnB,GAAmB,CAAnB;;AACA,YAAIC,KAAK,YAAT,YAAA,EAAmC;AACjCc,UAAAA,YAAY,CAAZA,GAAY,CAAZA,GAAoBd,KAAK,CAAzBc,UAAoBd,EAApBc;AADF,SAAA,MAEO,IAAId,KAAK,IAAI,CAACe,KAAK,CAALA,OAAAA,CAAVf,KAAUe,CAAVf,IAAkC,OAAA,KAAA,KAAtC,QAAA,EAAiE;AAEtEc,UAAAA,YAAY,CAAZA,GAAY,CAAZA,GAAoB,KAAA,8BAAA,CAApBA,KAAoB,CAApBA;AACD;AACF;;AACD,aAAA,YAAA;AACD;;;WAEDE,wBAAe;AACb,aAAO,KAAA,8BAAA,CAAoC,KAA3C,MAAO,CAAP;AACD;;;;EA3BY,Y;;SAAA,a","sourcesContent":["import { StyleSheet } from 'react-native';\n\nimport AnimatedNode from './AnimatedNode';\nimport { createOrReuseTransformNode } from './AnimatedTransform';\n\nimport deepEqual from 'fbjs/lib/areEqual';\n\nfunction sanitizeStyle(inputStyle) {\n  const style = {};\n  for (const key in inputStyle) {\n    const value = inputStyle[key];\n    if (value instanceof AnimatedNode) {\n      style[key] = value.__nodeID;\n    }\n  }\n  return style;\n}\n\nexport function createOrReuseStyleNode(style, oldNode) {\n  style = StyleSheet.flatten(style) || {};\n  if (style.transform) {\n    style = {\n      ...style,\n      transform: createOrReuseTransformNode(\n        style.transform,\n        oldNode && oldNode._style.transform\n      ),\n    };\n  }\n  const config = sanitizeStyle(style);\n  if (oldNode && deepEqual(config, oldNode._config)) {\n    return oldNode;\n  }\n  return new AnimatedStyle(style, config);\n}\n\n/**\n * AnimatedStyle should never be directly instantiated, use createOrReuseStyleNode\n * in order to make a new instance of this node.\n */\nexport default class AnimatedStyle extends AnimatedNode {\n  constructor(style, config) {\n    super({ type: 'style', style: config }, Object.values(style));\n    this._config = config;\n    this._style = style;\n  }\n\n  toString() {\n    return `AnimatedStyle, id: ${this.__nodeID}`;\n  }\n\n  _walkStyleAndGetAnimatedValues(style) {\n    const updatedStyle = {};\n    for (const key in style) {\n      const value = style[key];\n      if (value instanceof AnimatedNode) {\n        updatedStyle[key] = value.__getValue();\n      } else if (value && !Array.isArray(value) && typeof value === 'object') {\n        // Support animating nested values (for example: shadowOffset.height)\n        updatedStyle[key] = this._walkStyleAndGetAnimatedValues(value);\n      }\n    }\n    return updatedStyle;\n  }\n\n  __onEvaluate() {\n    return this._walkStyleAndGetAnimatedValues(this._style);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}