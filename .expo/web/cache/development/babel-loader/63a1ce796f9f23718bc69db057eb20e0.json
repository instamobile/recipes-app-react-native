{"ast":null,"code":"'use strict';\n\nimport _bezier from \"./bezier\";\n\nvar _ease;\n\nvar Easing = function () {\n  function Easing() {}\n\n  Easing.step0 = function step0(n) {\n    return n > 0 ? 1 : 0;\n  };\n\n  Easing.step1 = function step1(n) {\n    return n >= 1 ? 1 : 0;\n  };\n\n  Easing.linear = function linear(t) {\n    return t;\n  };\n\n  Easing.ease = function ease(t) {\n    if (!_ease) {\n      _ease = Easing.bezier(0.42, 0, 1, 1);\n    }\n\n    return _ease(t);\n  };\n\n  Easing.quad = function quad(t) {\n    return t * t;\n  };\n\n  Easing.cubic = function cubic(t) {\n    return t * t * t;\n  };\n\n  Easing.poly = function poly(n) {\n    return function (t) {\n      return Math.pow(t, n);\n    };\n  };\n\n  Easing.sin = function sin(t) {\n    return 1 - Math.cos(t * Math.PI / 2);\n  };\n\n  Easing.circle = function circle(t) {\n    return 1 - Math.sqrt(1 - t * t);\n  };\n\n  Easing.exp = function exp(t) {\n    return Math.pow(2, 10 * (t - 1));\n  };\n\n  Easing.elastic = function elastic(bounciness) {\n    if (bounciness === void 0) {\n      bounciness = 1;\n    }\n\n    var p = bounciness * Math.PI;\n    return function (t) {\n      return 1 - Math.pow(Math.cos(t * Math.PI / 2), 3) * Math.cos(t * p);\n    };\n  };\n\n  Easing.back = function back(s) {\n    if (s === void 0) {\n      s = 1.70158;\n    }\n\n    return function (t) {\n      return t * t * ((s + 1) * t - s);\n    };\n  };\n\n  Easing.bounce = function bounce(t) {\n    if (t < 1 / 2.75) {\n      return 7.5625 * t * t;\n    }\n\n    if (t < 2 / 2.75) {\n      var _t = t - 1.5 / 2.75;\n\n      return 7.5625 * _t * _t + 0.75;\n    }\n\n    if (t < 2.5 / 2.75) {\n      var _t2 = t - 2.25 / 2.75;\n\n      return 7.5625 * _t2 * _t2 + 0.9375;\n    }\n\n    var t2 = t - 2.625 / 2.75;\n    return 7.5625 * t2 * t2 + 0.984375;\n  };\n\n  Easing.bezier = function bezier(x1, y1, x2, y2) {\n    return _bezier(x1, y1, x2, y2);\n  };\n\n  Easing.in = function _in(easing) {\n    return easing;\n  };\n\n  Easing.out = function out(easing) {\n    return function (t) {\n      return 1 - easing(1 - t);\n    };\n  };\n\n  Easing.inOut = function inOut(easing) {\n    return function (t) {\n      if (t < 0.5) {\n        return easing(t * 2) / 2;\n      }\n\n      return 1 - easing((1 - t) * 2) / 2;\n    };\n  };\n\n  return Easing;\n}();\n\nexport default Easing;","map":{"version":3,"sources":["C:/learning/Group-Project/node_modules/react-native-web/dist/vendor/react-native/Animated/Easing.js"],"names":["_bezier","_ease","Easing","step0","n","step1","linear","t","ease","bezier","quad","cubic","poly","Math","pow","sin","cos","PI","circle","sqrt","exp","elastic","bounciness","p","back","s","bounce","_t","_t2","t2","x1","y1","x2","y2","in","_in","easing","out","inOut"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n\nimport _bezier from './bezier';\n\nvar _ease;\n/**\n * The `Easing` module implements common easing functions. This module is used\n * by [Animate.timing()](docs/animate.html#timing) to convey physically\n * believable motion in animations.\n *\n * You can find a visualization of some common easing functions at\n * http://easings.net/\n *\n * ### Predefined animations\n *\n * The `Easing` module provides several predefined animations through the\n * following methods:\n *\n * - [`back`](docs/easing.html#back) provides a simple animation where the\n *   object goes slightly back before moving forward\n * - [`bounce`](docs/easing.html#bounce) provides a bouncing animation\n * - [`ease`](docs/easing.html#ease) provides a simple inertial animation\n * - [`elastic`](docs/easing.html#elastic) provides a simple spring interaction\n *\n * ### Standard functions\n *\n * Three standard easing functions are provided:\n *\n * - [`linear`](docs/easing.html#linear)\n * - [`quad`](docs/easing.html#quad)\n * - [`cubic`](docs/easing.html#cubic)\n *\n * The [`poly`](docs/easing.html#poly) function can be used to implement\n * quartic, quintic, and other higher power functions.\n *\n * ### Additional functions\n *\n * Additional mathematical functions are provided by the following methods:\n *\n * - [`bezier`](docs/easing.html#bezier) provides a cubic bezier curve\n * - [`circle`](docs/easing.html#circle) provides a circular function\n * - [`sin`](docs/easing.html#sin) provides a sinusoidal function\n * - [`exp`](docs/easing.html#exp) provides an exponential function\n *\n * The following helpers are used to modify other easing functions.\n *\n * - [`in`](docs/easing.html#in) runs an easing function forwards\n * - [`inOut`](docs/easing.html#inout) makes any easing function symmetrical\n * - [`out`](docs/easing.html#out) runs an easing function backwards\n */\n\n\nvar Easing =\n/*#__PURE__*/\nfunction () {\n  function Easing() {}\n\n  /**\n   * A stepping function, returns 1 for any positive value of `n`.\n   */\n  Easing.step0 = function step0(n) {\n    return n > 0 ? 1 : 0;\n  }\n  /**\n   * A stepping function, returns 1 if `n` is greater than or equal to 1.\n   */\n  ;\n\n  Easing.step1 = function step1(n) {\n    return n >= 1 ? 1 : 0;\n  }\n  /**\n   * A linear function, `f(t) = t`. Position correlates to elapsed time one to\n   * one.\n   *\n   * http://cubic-bezier.com/#0,0,1,1\n   */\n  ;\n\n  Easing.linear = function linear(t) {\n    return t;\n  }\n  /**\n   * A simple inertial interaction, similar to an object slowly accelerating to\n   * speed.\n   *\n   * http://cubic-bezier.com/#.42,0,1,1\n   */\n  ;\n\n  Easing.ease = function ease(t) {\n    if (!_ease) {\n      _ease = Easing.bezier(0.42, 0, 1, 1);\n    }\n\n    return _ease(t);\n  }\n  /**\n   * A quadratic function, `f(t) = t * t`. Position equals the square of elapsed\n   * time.\n   *\n   * http://easings.net/#easeInQuad\n   */\n  ;\n\n  Easing.quad = function quad(t) {\n    return t * t;\n  }\n  /**\n   * A cubic function, `f(t) = t * t * t`. Position equals the cube of elapsed\n   * time.\n   *\n   * http://easings.net/#easeInCubic\n   */\n  ;\n\n  Easing.cubic = function cubic(t) {\n    return t * t * t;\n  }\n  /**\n   * A power function. Position is equal to the Nth power of elapsed time.\n   *\n   * n = 4: http://easings.net/#easeInQuart\n   * n = 5: http://easings.net/#easeInQuint\n   */\n  ;\n\n  Easing.poly = function poly(n) {\n    return function (t) {\n      return Math.pow(t, n);\n    };\n  }\n  /**\n   * A sinusoidal function.\n   *\n   * http://easings.net/#easeInSine\n   */\n  ;\n\n  Easing.sin = function sin(t) {\n    return 1 - Math.cos(t * Math.PI / 2);\n  }\n  /**\n   * A circular function.\n   *\n   * http://easings.net/#easeInCirc\n   */\n  ;\n\n  Easing.circle = function circle(t) {\n    return 1 - Math.sqrt(1 - t * t);\n  }\n  /**\n   * An exponential function.\n   *\n   * http://easings.net/#easeInExpo\n   */\n  ;\n\n  Easing.exp = function exp(t) {\n    return Math.pow(2, 10 * (t - 1));\n  }\n  /**\n   * A simple elastic interaction, similar to a spring oscillating back and\n   * forth.\n   *\n   * Default bounciness is 1, which overshoots a little bit once. 0 bounciness\n   * doesn't overshoot at all, and bounciness of N > 1 will overshoot about N\n   * times.\n   *\n   * http://easings.net/#easeInElastic\n   */\n  ;\n\n  Easing.elastic = function elastic(bounciness) {\n    if (bounciness === void 0) {\n      bounciness = 1;\n    }\n\n    var p = bounciness * Math.PI;\n    return function (t) {\n      return 1 - Math.pow(Math.cos(t * Math.PI / 2), 3) * Math.cos(t * p);\n    };\n  }\n  /**\n   * Use with `Animated.parallel()` to create a simple effect where the object\n   * animates back slightly as the animation starts.\n   *\n   * Wolfram Plot:\n   *\n   * - http://tiny.cc/back_default (s = 1.70158, default)\n   */\n  ;\n\n  Easing.back = function back(s) {\n    if (s === void 0) {\n      s = 1.70158;\n    }\n\n    return function (t) {\n      return t * t * ((s + 1) * t - s);\n    };\n  }\n  /**\n   * Provides a simple bouncing effect.\n   *\n   * http://easings.net/#easeInBounce\n   */\n  ;\n\n  Easing.bounce = function bounce(t) {\n    if (t < 1 / 2.75) {\n      return 7.5625 * t * t;\n    }\n\n    if (t < 2 / 2.75) {\n      var _t = t - 1.5 / 2.75;\n\n      return 7.5625 * _t * _t + 0.75;\n    }\n\n    if (t < 2.5 / 2.75) {\n      var _t2 = t - 2.25 / 2.75;\n\n      return 7.5625 * _t2 * _t2 + 0.9375;\n    }\n\n    var t2 = t - 2.625 / 2.75;\n    return 7.5625 * t2 * t2 + 0.984375;\n  }\n  /**\n   * Provides a cubic bezier curve, equivalent to CSS Transitions'\n   * `transition-timing-function`.\n   *\n   * A useful tool to visualize cubic bezier curves can be found at\n   * http://cubic-bezier.com/\n   */\n  ;\n\n  Easing.bezier = function bezier(x1, y1, x2, y2) {\n    return _bezier(x1, y1, x2, y2);\n  }\n  /**\n   * Runs an easing function forwards.\n   */\n  ;\n\n  Easing.in = function _in(easing) {\n    return easing;\n  }\n  /**\n   * Runs an easing function backwards.\n   */\n  ;\n\n  Easing.out = function out(easing) {\n    return function (t) {\n      return 1 - easing(1 - t);\n    };\n  }\n  /**\n   * Makes any easing function symmetrical. The easing function will run\n   * forwards for half of the duration, then backwards for the rest of the\n   * duration.\n   */\n  ;\n\n  Easing.inOut = function inOut(easing) {\n    return function (t) {\n      if (t < 0.5) {\n        return easing(t * 2) / 2;\n      }\n\n      return 1 - easing((1 - t) * 2) / 2;\n    };\n  };\n\n  return Easing;\n}();\n\nexport default Easing;"]},"metadata":{},"sourceType":"module"}