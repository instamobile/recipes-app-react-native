{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MAIN_SCRIPT = exports.soundMode = exports.playMode = exports.PLAYER_FUNCTIONS = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _constants = require(\"./constants\");\n\nvar _playMode, _soundMode;\n\nvar PLAYER_FUNCTIONS = {\n  muteVideo: 'player.mute(); true;',\n  unMuteVideo: 'player.unMute(); true;',\n  playVideo: 'player.playVideo(); true;',\n  pauseVideo: 'player.pauseVideo(); true;',\n  getVideoUrlScript: \"\\nwindow.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'getVideoUrl', data: player.getVideoUrl()}));\\ntrue;\\n  \",\n  durationScript: \"\\nwindow.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'getDuration', data: player.getDuration()}));\\ntrue;\\n\",\n  currentTimeScript: \"\\nwindow.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'getCurrentTime', data: player.getCurrentTime()}));\\ntrue;\\n\",\n  isMutedScript: \"\\nwindow.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'isMuted', data: player.isMuted()}));\\ntrue;\\n\",\n  getVolumeScript: \"\\nwindow.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'getVolume', data: player.getVolume()}));\\ntrue;\\n\",\n  getPlaybackRateScript: \"\\nwindow.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'getPlaybackRate', data: player.getPlaybackRate()}));\\ntrue;\\n\",\n  getAvailablePlaybackRatesScript: \"\\nwindow.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'getAvailablePlaybackRates', data: player.getAvailablePlaybackRates()}));\\ntrue;\\n\",\n  setVolume: function setVolume(volume) {\n    return \"player.setVolume(\" + volume + \"); true;\";\n  },\n  seekToScript: function seekToScript(seconds, allowSeekAhead) {\n    return \"player.seekTo(\" + seconds + \", \" + allowSeekAhead + \"); true;\";\n  },\n  setPlaybackRate: function setPlaybackRate(playbackRate) {\n    return \"player.setPlaybackRate(\" + playbackRate + \"); true;\";\n  },\n  loadPlaylist: function loadPlaylist(playList, startIndex, play) {\n    var index = startIndex || 0;\n    var playlistJson = JSON.stringify(playList);\n    var func = play ? 'loadPlaylist' : 'cuePlaylist';\n    return \"player.\" + func + \"({playlist: \" + playlistJson + \", index: \" + index + \"); true;\";\n  }\n};\nexports.PLAYER_FUNCTIONS = PLAYER_FUNCTIONS;\nvar playMode = (_playMode = {}, (0, _defineProperty2.default)(_playMode, _constants.PLAY_MODE, PLAYER_FUNCTIONS.playVideo), (0, _defineProperty2.default)(_playMode, _constants.PAUSE_MODE, PLAYER_FUNCTIONS.pauseVideo), _playMode);\nexports.playMode = playMode;\nvar soundMode = (_soundMode = {}, (0, _defineProperty2.default)(_soundMode, _constants.MUTE_MODE, PLAYER_FUNCTIONS.muteVideo), (0, _defineProperty2.default)(_soundMode, _constants.UNMUTE_MODE, PLAYER_FUNCTIONS.unMuteVideo), _soundMode);\nexports.soundMode = soundMode;\n\nvar MAIN_SCRIPT = function MAIN_SCRIPT(videoId, playList, initialPlayerParams, allowWebViewZoom, contentScale) {\n  var end = initialPlayerParams.end,\n      rel = initialPlayerParams.rel,\n      color = initialPlayerParams.color,\n      start = initialPlayerParams.start,\n      playerLang = initialPlayerParams.playerLang,\n      _initialPlayerParams$ = initialPlayerParams.loop,\n      loop = _initialPlayerParams$ === void 0 ? false : _initialPlayerParams$,\n      cc_lang_pref = initialPlayerParams.cc_lang_pref,\n      iv_load_policy = initialPlayerParams.iv_load_policy,\n      modestbranding = initialPlayerParams.modestbranding,\n      _initialPlayerParams$2 = initialPlayerParams.controls,\n      controls = _initialPlayerParams$2 === void 0 ? true : _initialPlayerParams$2,\n      showClosedCaptions = initialPlayerParams.showClosedCaptions,\n      _initialPlayerParams$3 = initialPlayerParams.preventFullScreen,\n      preventFullScreen = _initialPlayerParams$3 === void 0 ? false : _initialPlayerParams$3;\n  var rel_s = rel ? 1 : 0;\n  var loop_s = loop ? 1 : 0;\n  var videoId_s = videoId || '';\n  var controls_s = controls ? 1 : 0;\n  var cc_lang_pref_s = cc_lang_pref || '';\n  var modestbranding_s = modestbranding ? 1 : 0;\n  var preventFullScreen_s = preventFullScreen ? 0 : 1;\n  var showClosedCaptions_s = showClosedCaptions ? 1 : 0;\n  var contentScale_s = typeof contentScale === 'number' ? contentScale : 1.0;\n  var list = typeof playList === 'string' ? playList : undefined;\n  var listType = typeof playList === 'string' ? 'playlist' : undefined;\n  var playlist = Array.isArray(playList) ? playList.join(',') : undefined;\n  var scale = \"initial-scale=\" + contentScale_s;\n\n  if (!allowWebViewZoom) {\n    scale += \", maximum-scale=\" + contentScale_s;\n  }\n\n  var safeData = {\n    end: end,\n    list: list,\n    start: start,\n    color: color,\n    rel_s: rel_s,\n    loop_s: loop_s,\n    listType: listType,\n    playlist: playlist,\n    videoId_s: videoId_s,\n    controls_s: controls_s,\n    playerLang: playerLang,\n    iv_load_policy: iv_load_policy,\n    contentScale_s: contentScale_s,\n    cc_lang_pref_s: cc_lang_pref_s,\n    allowWebViewZoom: allowWebViewZoom,\n    modestbranding_s: modestbranding_s,\n    preventFullScreen_s: preventFullScreen_s,\n    showClosedCaptions_s: showClosedCaptions_s\n  };\n  var urlEncodedJSON = encodeURI(JSON.stringify(safeData));\n  var listParam = list ? \"list: '\" + list + \"',\" : '';\n  var listTypeParam = listType ? \"listType: '\" + list + \"',\" : '';\n  var playlistParam = playList ? \"playlist: '\" + playList + \"',\" : '';\n  var htmlString = \"\\n<!DOCTYPE html>\\n<html>\\n  <head>\\n    <meta\\n      name=\\\"viewport\\\"\\n      content=\\\"width=device-width, \" + scale + \"\\\"\\n    >\\n    <style>\\n      body {\\n        margin: 0;\\n      }\\n      .container {\\n        position: relative;\\n        width: 100%;\\n        height: 0;\\n        padding-bottom: 56.25%;\\n      }\\n      .video {\\n          position: absolute;\\n          top: 0;\\n          left: 0;\\n          width: 100%;\\n          height: 100%;\\n      }\\n    </style>\\n  </head>\\n  <body>\\n    <div class=\\\"container\\\">\\n      <div class=\\\"video\\\" id=\\\"player\\\" />\\n    </div>\\n\\n    <script>\\n      var tag = document.createElement('script');\\n\\n      tag.src = \\\"https://www.youtube.com/iframe_api\\\";\\n      var firstScriptTag = document.getElementsByTagName('script')[0];\\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\\n\\n      var player;\\n      function onYouTubeIframeAPIReady() {\\n        player = new YT.Player('player', {\\n          width: '1000',\\n          height: '1000',\\n          videoId: '\" + videoId_s + \"',\\n          playerVars: {\\n            \" + listParam + \"\\n            \" + listTypeParam + \"\\n            \" + playlistParam + \"\\n\\n            end: \" + end + \",\\n            rel: \" + rel_s + \",\\n            playsinline: 1,\\n            loop: \" + loop_s + \",\\n            color: \" + color + \",\\n            start: \" + start + \",\\n            hl: \" + playerLang + \",\\n            controls: \" + controls_s + \",\\n            fs: \" + preventFullScreen_s + \",\\n            cc_lang_pref: '\" + cc_lang_pref_s + \"',\\n            iv_load_policy: \" + iv_load_policy + \",\\n            modestbranding: \" + modestbranding_s + \",\\n            cc_load_policy: \" + showClosedCaptions_s + \",\\n          },\\n          events: {\\n            'onReady': onPlayerReady,\\n            'onStateChange': onPlayerStateChange,\\n            'onError': onPlayerError,\\n            'onPlaybackQualityChange': onPlaybackQualityChange,\\n            'onPlaybackRateChange': onPlaybackRateChange,\\n          }\\n        });\\n      }\\n\\n      function onPlayerError(event) {\\n        window.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'playerError', data: event.data}))\\n      }\\n\\n      function onPlaybackRateChange(event) {\\n        window.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'playbackRateChange', data: event.data}))\\n      }\\n\\n      function onPlaybackQualityChange(event) {\\n        window.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'playerQualityChange', data: event.data}))\\n      }\\n\\n      function onPlayerReady(event) {\\n        window.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'playerReady'}))\\n      }\\n\\n      var done = false;\\n      function onPlayerStateChange(event) {\\n        window.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'playerStateChange', data: event.data}))\\n      }\\n\\n      var isFullScreen = false;\\n      function onFullScreenChange() {\\n        isFullScreen = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;\\n        window.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'fullScreenChange', data: Boolean(isFullScreen)}));\\n      }\\n\\n      document.addEventListener('fullscreenchange', onFullScreenChange)\\n      document.addEventListener('mozfullscreenchange', onFullScreenChange)\\n      document.addEventListener('msfullscreenchange', onFullScreenChange)\\n      document.addEventListener('webkitfullscreenchange', onFullScreenChange)\\n    </script>\\n  </body>\\n</html>\\n\";\n  return {\n    htmlString: htmlString,\n    urlEncodedJSON: urlEncodedJSON\n  };\n};\n\nexports.MAIN_SCRIPT = MAIN_SCRIPT;","map":{"version":3,"sources":["C:/learning/Group-Project/node_modules/react-native-youtube-iframe/dist/PlayerScripts.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","MAIN_SCRIPT","soundMode","playMode","PLAYER_FUNCTIONS","_defineProperty2","_constants","_playMode","_soundMode","muteVideo","unMuteVideo","playVideo","pauseVideo","getVideoUrlScript","durationScript","currentTimeScript","isMutedScript","getVolumeScript","getPlaybackRateScript","getAvailablePlaybackRatesScript","setVolume","volume","seekToScript","seconds","allowSeekAhead","setPlaybackRate","playbackRate","loadPlaylist","playList","startIndex","play","index","playlistJson","JSON","stringify","func","default","PLAY_MODE","PAUSE_MODE","MUTE_MODE","UNMUTE_MODE","videoId","initialPlayerParams","allowWebViewZoom","contentScale","end","rel","color","start","playerLang","_initialPlayerParams$","loop","cc_lang_pref","iv_load_policy","modestbranding","_initialPlayerParams$2","controls","showClosedCaptions","_initialPlayerParams$3","preventFullScreen","rel_s","loop_s","videoId_s","controls_s","cc_lang_pref_s","modestbranding_s","preventFullScreen_s","showClosedCaptions_s","contentScale_s","list","undefined","listType","playlist","Array","isArray","join","scale","safeData","urlEncodedJSON","encodeURI","listParam","listTypeParam","playlistParam","htmlString"],"mappings":"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","sourcesContent":["var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.MAIN_SCRIPT=exports.soundMode=exports.playMode=exports.PLAYER_FUNCTIONS=void 0;var _defineProperty2=_interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));var _constants=require(\"./constants\");var _playMode,_soundMode;var PLAYER_FUNCTIONS={muteVideo:'player.mute(); true;',unMuteVideo:'player.unMute(); true;',playVideo:'player.playVideo(); true;',pauseVideo:'player.pauseVideo(); true;',getVideoUrlScript:\"\\nwindow.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'getVideoUrl', data: player.getVideoUrl()}));\\ntrue;\\n  \",durationScript:\"\\nwindow.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'getDuration', data: player.getDuration()}));\\ntrue;\\n\",currentTimeScript:\"\\nwindow.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'getCurrentTime', data: player.getCurrentTime()}));\\ntrue;\\n\",isMutedScript:\"\\nwindow.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'isMuted', data: player.isMuted()}));\\ntrue;\\n\",getVolumeScript:\"\\nwindow.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'getVolume', data: player.getVolume()}));\\ntrue;\\n\",getPlaybackRateScript:\"\\nwindow.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'getPlaybackRate', data: player.getPlaybackRate()}));\\ntrue;\\n\",getAvailablePlaybackRatesScript:\"\\nwindow.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'getAvailablePlaybackRates', data: player.getAvailablePlaybackRates()}));\\ntrue;\\n\",setVolume:function setVolume(volume){return\"player.setVolume(\"+volume+\"); true;\";},seekToScript:function seekToScript(seconds,allowSeekAhead){return\"player.seekTo(\"+seconds+\", \"+allowSeekAhead+\"); true;\";},setPlaybackRate:function setPlaybackRate(playbackRate){return\"player.setPlaybackRate(\"+playbackRate+\"); true;\";},loadPlaylist:function loadPlaylist(playList,startIndex,play){var index=startIndex||0;var playlistJson=JSON.stringify(playList);var func=play?'loadPlaylist':'cuePlaylist';return\"player.\"+func+\"({playlist: \"+playlistJson+\", index: \"+index+\"); true;\";}};exports.PLAYER_FUNCTIONS=PLAYER_FUNCTIONS;var playMode=(_playMode={},(0,_defineProperty2.default)(_playMode,_constants.PLAY_MODE,PLAYER_FUNCTIONS.playVideo),(0,_defineProperty2.default)(_playMode,_constants.PAUSE_MODE,PLAYER_FUNCTIONS.pauseVideo),_playMode);exports.playMode=playMode;var soundMode=(_soundMode={},(0,_defineProperty2.default)(_soundMode,_constants.MUTE_MODE,PLAYER_FUNCTIONS.muteVideo),(0,_defineProperty2.default)(_soundMode,_constants.UNMUTE_MODE,PLAYER_FUNCTIONS.unMuteVideo),_soundMode);exports.soundMode=soundMode;var MAIN_SCRIPT=function MAIN_SCRIPT(videoId,playList,initialPlayerParams,allowWebViewZoom,contentScale){var end=initialPlayerParams.end,rel=initialPlayerParams.rel,color=initialPlayerParams.color,start=initialPlayerParams.start,playerLang=initialPlayerParams.playerLang,_initialPlayerParams$=initialPlayerParams.loop,loop=_initialPlayerParams$===void 0?false:_initialPlayerParams$,cc_lang_pref=initialPlayerParams.cc_lang_pref,iv_load_policy=initialPlayerParams.iv_load_policy,modestbranding=initialPlayerParams.modestbranding,_initialPlayerParams$2=initialPlayerParams.controls,controls=_initialPlayerParams$2===void 0?true:_initialPlayerParams$2,showClosedCaptions=initialPlayerParams.showClosedCaptions,_initialPlayerParams$3=initialPlayerParams.preventFullScreen,preventFullScreen=_initialPlayerParams$3===void 0?false:_initialPlayerParams$3;var rel_s=rel?1:0;var loop_s=loop?1:0;var videoId_s=videoId||'';var controls_s=controls?1:0;var cc_lang_pref_s=cc_lang_pref||'';var modestbranding_s=modestbranding?1:0;var preventFullScreen_s=preventFullScreen?0:1;var showClosedCaptions_s=showClosedCaptions?1:0;var contentScale_s=typeof contentScale==='number'?contentScale:1.0;var list=typeof playList==='string'?playList:undefined;var listType=typeof playList==='string'?'playlist':undefined;var playlist=Array.isArray(playList)?playList.join(','):undefined;var scale=\"initial-scale=\"+contentScale_s;if(!allowWebViewZoom){scale+=\", maximum-scale=\"+contentScale_s;}var safeData={end:end,list:list,start:start,color:color,rel_s:rel_s,loop_s:loop_s,listType:listType,playlist:playlist,videoId_s:videoId_s,controls_s:controls_s,playerLang:playerLang,iv_load_policy:iv_load_policy,contentScale_s:contentScale_s,cc_lang_pref_s:cc_lang_pref_s,allowWebViewZoom:allowWebViewZoom,modestbranding_s:modestbranding_s,preventFullScreen_s:preventFullScreen_s,showClosedCaptions_s:showClosedCaptions_s};var urlEncodedJSON=encodeURI(JSON.stringify(safeData));var listParam=list?\"list: '\"+list+\"',\":'';var listTypeParam=listType?\"listType: '\"+list+\"',\":'';var playlistParam=playList?\"playlist: '\"+playList+\"',\":'';var htmlString=\"\\n<!DOCTYPE html>\\n<html>\\n  <head>\\n    <meta\\n      name=\\\"viewport\\\"\\n      content=\\\"width=device-width, \"+scale+\"\\\"\\n    >\\n    <style>\\n      body {\\n        margin: 0;\\n      }\\n      .container {\\n        position: relative;\\n        width: 100%;\\n        height: 0;\\n        padding-bottom: 56.25%;\\n      }\\n      .video {\\n          position: absolute;\\n          top: 0;\\n          left: 0;\\n          width: 100%;\\n          height: 100%;\\n      }\\n    </style>\\n  </head>\\n  <body>\\n    <div class=\\\"container\\\">\\n      <div class=\\\"video\\\" id=\\\"player\\\" />\\n    </div>\\n\\n    <script>\\n      var tag = document.createElement('script');\\n\\n      tag.src = \\\"https://www.youtube.com/iframe_api\\\";\\n      var firstScriptTag = document.getElementsByTagName('script')[0];\\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\\n\\n      var player;\\n      function onYouTubeIframeAPIReady() {\\n        player = new YT.Player('player', {\\n          width: '1000',\\n          height: '1000',\\n          videoId: '\"+videoId_s+\"',\\n          playerVars: {\\n            \"+listParam+\"\\n            \"+listTypeParam+\"\\n            \"+playlistParam+\"\\n\\n            end: \"+end+\",\\n            rel: \"+rel_s+\",\\n            playsinline: 1,\\n            loop: \"+loop_s+\",\\n            color: \"+color+\",\\n            start: \"+start+\",\\n            hl: \"+playerLang+\",\\n            controls: \"+controls_s+\",\\n            fs: \"+preventFullScreen_s+\",\\n            cc_lang_pref: '\"+cc_lang_pref_s+\"',\\n            iv_load_policy: \"+iv_load_policy+\",\\n            modestbranding: \"+modestbranding_s+\",\\n            cc_load_policy: \"+showClosedCaptions_s+\",\\n          },\\n          events: {\\n            'onReady': onPlayerReady,\\n            'onStateChange': onPlayerStateChange,\\n            'onError': onPlayerError,\\n            'onPlaybackQualityChange': onPlaybackQualityChange,\\n            'onPlaybackRateChange': onPlaybackRateChange,\\n          }\\n        });\\n      }\\n\\n      function onPlayerError(event) {\\n        window.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'playerError', data: event.data}))\\n      }\\n\\n      function onPlaybackRateChange(event) {\\n        window.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'playbackRateChange', data: event.data}))\\n      }\\n\\n      function onPlaybackQualityChange(event) {\\n        window.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'playerQualityChange', data: event.data}))\\n      }\\n\\n      function onPlayerReady(event) {\\n        window.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'playerReady'}))\\n      }\\n\\n      var done = false;\\n      function onPlayerStateChange(event) {\\n        window.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'playerStateChange', data: event.data}))\\n      }\\n\\n      var isFullScreen = false;\\n      function onFullScreenChange() {\\n        isFullScreen = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;\\n        window.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'fullScreenChange', data: Boolean(isFullScreen)}));\\n      }\\n\\n      document.addEventListener('fullscreenchange', onFullScreenChange)\\n      document.addEventListener('mozfullscreenchange', onFullScreenChange)\\n      document.addEventListener('msfullscreenchange', onFullScreenChange)\\n      document.addEventListener('webkitfullscreenchange', onFullScreenChange)\\n    </script>\\n  </body>\\n</html>\\n\";return{htmlString:htmlString,urlEncodedJSON:urlEncodedJSON};};exports.MAIN_SCRIPT=MAIN_SCRIPT;"]},"metadata":{},"sourceType":"script"}