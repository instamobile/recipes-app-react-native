{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar shownWarnings = [];\n\nvar validations = _objectSpread({\n  transparentCard: {\n    message: \"'transparentCard' is removed in favor of 'cardStyle: { backgroundColor: 'transparent' }' in 'navigationOptions'. Specify it in 'defaultNavigationOptions' to keep the same behaviour.\",\n    compat: function compat(c, o) {\n      return c.transparentCard ? _objectSpread(_objectSpread({}, o), {}, {\n        cardStyle: [{\n          backgroundColor: 'transparent'\n        }, o.cardStyle]\n      }) : o;\n    }\n  },\n  headerLayoutPreset: {\n    message: \"'headerLayoutPreset' is renamed to 'headerTitleAlign' and moved to 'navigationOptions'. Specify it in 'defaultNavigationOptions' to keep the same behaviour.\",\n    compat: function compat(c, o) {\n      return _objectSpread(_objectSpread({}, o), {}, {\n        headerTitleAlign: c.headerLayoutPreset\n      });\n    }\n  },\n  headerTransitionPreset: {\n    message: \"'headerTransitionPreset' is removed in favor of the new animation APIs\"\n  },\n  transitionConfig: {\n    message: \"'transitionConfig' is removed in favor of the new animation APIs\"\n  }\n}, ['cardShadowEnabled', 'cardOverlayEnabled', 'cardStyle', 'headerBackTitleVisible', 'onTransitionStart', 'onTransitionEnd'].reduce(function (acc, name) {\n  acc[name] = {\n    message: \"'\".concat(name, \"' is moved to 'navigationOptions'. Specify it in 'defaultNavigationOptions' to keep the same behaviour.\"),\n    compat: function compat(c, o) {\n      return _objectSpread(_objectSpread({}, o), {}, _defineProperty({}, name, function () {\n        return c[name];\n      }));\n    }\n  };\n  return acc;\n}, {}));\n\nexport default function validateDeprecatedConfig(config, options) {\n  var result = options;\n  Object.keys(validations).forEach(function (name) {\n    if (name in config) {\n      var _validations$name = validations[name],\n          compat = _validations$name.compat,\n          message = _validations$name.message;\n      result = compat ? compat(config, result) : result;\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (shownWarnings.includes(message)) {\n          return;\n        }\n\n        console.warn(\"Deprecation in 'createStackNavigator':\\n\".concat(message));\n        shownWarnings.push(message);\n      }\n    }\n  });\n  return result;\n}","map":{"version":3,"sources":["validateDeprecatedConfig.tsx"],"names":["shownWarnings","validations","transparentCard","message","compat","cardStyle","backgroundColor","o","headerLayoutPreset","headerTitleAlign","c","headerTransitionPreset","transitionConfig","acc","result","Object","name","process","console"],"mappings":";;;;;;AAcA,IAAMA,aAAuB,GAA7B,EAAA;;AAEA,IAAMC,WAAuC;AAC3CC,EAAAA,eAAe,EAAE;AACfC,IAAAA,OAAO,EADQ,uLAAA;AAEfC,IAAAA,MAAM,EAAE,gBAAA,CAAA,EAAA,CAAA;AAAA,aACN,CAAC,CAAD,eAAA,mCACI,CADJ;AAGMC,QAAAA,SAAS,EAAE,CACT;AAAEC,UAAAA,eAAe,EAAE;AAAnB,SADS,EAETC,CAAC,CAFQ,SAAA;AAHjB,WAQIA,CATE;AAAA;AAFO,GAD0B;AAc3CC,EAAAA,kBAAkB,EAAE;AAClBL,IAAAA,OAAO,EADW,8JAAA;AAElBC,IAAAA,MAAM,EAAE,gBAAA,CAAA,EAAA,CAAA;AAAA,6CAAW,CAAX;AAAmBK,QAAAA,gBAAgB,EAAEC,CAAC,CAACF;AAAvC;AAAA;AAFU,GAduB;AAkB3CG,EAAAA,sBAAsB,EAAE;AACtBR,IAAAA,OAAO,EAAA;AADe,GAlBmB;AAqB3CS,EAAAA,gBAAgB,EAAE;AAChBT,IAAAA,OAAO,EAAA;AADS;AArByB,GAwBxC,CAAA,mBAAA,EAAA,oBAAA,EAAA,WAAA,EAAA,wBAAA,EAAA,mBAAA,EAAA,iBAAA,EAAA,MAAA,CAOkC,UAAA,GAAA,EAAA,IAAA,EAAe;AAClDU,EAAAA,GAAG,CAAHA,IAAG,CAAHA,GAAY;AACVV,IAAAA,OAAO,EAAA,IAAA,MAAA,CAAA,IAAA,EADG,yGACH,CADG;AAEVC,IAAAA,MAAM,EAAE,gBAAA,CAAA,EAAA,CAAA;AAAA,6CAAW,CAAX,2BAAmB,IAAnB,EAA2B;AAAA,eAAMM,CAAC,CAAA,IAAA,CAAP;AAAA,OAA3B;AAAA;AAFE,GAAZG;AAKA,SAAA,GAAA;AAbC,CAAA,EAAA,EAAA,CAxBwC,CAA7C;;AAyCA,eAAe,SAAA,wBAAA,CAAA,MAAA,EAAA,OAAA,EAGb;AACA,MAAIC,MAAM,GAAV,OAAA;AAEAC,EAAAA,MAAM,CAANA,IAAAA,CAAAA,WAAAA,EAAAA,OAAAA,CAAkCC,UAAAA,IAAD,EAAU;AACzC,QAAIA,IAAI,IAAR,MAAA,EAAoB;AAClB,8BAA4Bf,WAAW,CAAvC,IAAuC,CAAvC;AAAA,UAAM,MAAN,qBAAM,MAAN;AAAA,UAAgBE,OAAhB,qBAAgBA,OAAhB;AAEAW,MAAAA,MAAM,GAAGV,MAAM,GAAGA,MAAM,CAAA,MAAA,EAAT,MAAS,CAAT,GAAfU,MAAAA;;AAEA,UAAIG,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAJ,YAAA,EAA2C;AACzC,YAAIjB,aAAa,CAAbA,QAAAA,CAAJ,OAAIA,CAAJ,EAAqC;AACnC;AACD;;AAEDkB,QAAAA,OAAO,CAAPA,IAAAA,CAAAA,2CAAAA,MAAAA,CAAAA,OAAAA,CAAAA;AACAlB,QAAAA,aAAa,CAAbA,IAAAA,CAAAA,OAAAA;AACD;AACF;AAdHe,GAAAA;AAiBA,SAAA,MAAA;AACD","sourcesContent":["import type { StyleProp, ViewStyle } from 'react-native';\nimport type {\n  StackNavigationOptions,\n  StackNavigationConfig,\n} from '../vendor/types';\n\ntype Validation = {\n  message: string;\n  compat?: (\n    c: Record<string, any>,\n    o: StackNavigationOptions\n  ) => StackNavigationOptions;\n};\n\nconst shownWarnings: string[] = [];\n\nconst validations: Record<string, Validation> = {\n  transparentCard: {\n    message: `'transparentCard' is removed in favor of 'cardStyle: { backgroundColor: 'transparent' }' in 'navigationOptions'. Specify it in 'defaultNavigationOptions' to keep the same behaviour.`,\n    compat: (c, o) =>\n      c.transparentCard\n        ? {\n            ...o,\n            cardStyle: [\n              { backgroundColor: 'transparent' },\n              o.cardStyle,\n            ] as StyleProp<ViewStyle>,\n          }\n        : o,\n  },\n  headerLayoutPreset: {\n    message: `'headerLayoutPreset' is renamed to 'headerTitleAlign' and moved to 'navigationOptions'. Specify it in 'defaultNavigationOptions' to keep the same behaviour.`,\n    compat: (c, o) => ({ ...o, headerTitleAlign: c.headerLayoutPreset }),\n  },\n  headerTransitionPreset: {\n    message: `'headerTransitionPreset' is removed in favor of the new animation APIs`,\n  },\n  transitionConfig: {\n    message: `'transitionConfig' is removed in favor of the new animation APIs`,\n  },\n  ...[\n    'cardShadowEnabled',\n    'cardOverlayEnabled',\n    'cardStyle',\n    'headerBackTitleVisible',\n    'onTransitionStart',\n    'onTransitionEnd',\n  ].reduce<Record<string, Validation>>((acc, name) => {\n    acc[name] = {\n      message: `'${name}' is moved to 'navigationOptions'. Specify it in 'defaultNavigationOptions' to keep the same behaviour.`,\n      compat: (c, o) => ({ ...o, [name]: () => c[name] }),\n    };\n\n    return acc;\n  }, {}),\n};\n\nexport default function validateDeprecatedConfig(\n  config: StackNavigationConfig,\n  options: StackNavigationOptions\n) {\n  let result = options;\n\n  Object.keys(validations).forEach((name) => {\n    if (name in config) {\n      const { compat, message } = validations[name];\n\n      result = compat ? compat(config, result) : result;\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (shownWarnings.includes(message)) {\n          return;\n        }\n\n        console.warn(`Deprecation in 'createStackNavigator':\\n${message}`);\n        shownWarnings.push(message);\n      }\n    }\n  });\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}