{"ast":null,"code":"import { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport invariant from 'fbjs/lib/invariant';\nvar initialURL = canUseDOM ? window.location.href : '';\nvar Linking = {\n  addEventListener: function addEventListener() {},\n  removeEventListener: function removeEventListener() {},\n  canOpenURL: function canOpenURL() {\n    return Promise.resolve(true);\n  },\n  getInitialURL: function getInitialURL() {\n    return Promise.resolve(initialURL);\n  },\n  openURL: function openURL(url) {\n    try {\n      open(url);\n      return Promise.resolve();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  },\n  _validateURL: function _validateURL(url) {\n    invariant(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);\n    invariant(url, 'Invalid URL: cannot be empty');\n  }\n};\n\nvar open = function open(url) {\n  if (canUseDOM) {\n    window.location = new URL(url, window.location).toString();\n  }\n};\n\nexport default Linking;","map":{"version":3,"sources":["E:/Users/Nayla/Escritorio/UADEE/Distribuidas desk/SUBASTAPP/node_modules/react-native-web/dist/exports/Linking/index.js"],"names":["canUseDOM","invariant","initialURL","window","location","href","Linking","addEventListener","removeEventListener","canOpenURL","Promise","resolve","getInitialURL","openURL","url","open","e","reject","_validateURL","URL","toString"],"mappings":"AASA,SAASA,SAAT,QAA0B,+BAA1B;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,IAAIC,UAAU,GAAGF,SAAS,GAAGG,MAAM,CAACC,QAAP,CAAgBC,IAAnB,GAA0B,EAApD;AACA,IAAIC,OAAO,GAAG;AACZC,EAAAA,gBAAgB,EAAE,SAASA,gBAAT,GAA4B,CAAE,CADpC;AAEZC,EAAAA,mBAAmB,EAAE,SAASA,mBAAT,GAA+B,CAAE,CAF1C;AAGZC,EAAAA,UAAU,EAAE,SAASA,UAAT,GAAsB;AAChC,WAAOC,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AACD,GALW;AAMZC,EAAAA,aAAa,EAAE,SAASA,aAAT,GAAyB;AACtC,WAAOF,OAAO,CAACC,OAAR,CAAgBT,UAAhB,CAAP;AACD,GARW;AASZW,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAC7B,QAAI;AACFC,MAAAA,IAAI,CAACD,GAAD,CAAJ;AACA,aAAOJ,OAAO,CAACC,OAAR,EAAP;AACD,KAHD,CAGE,OAAOK,CAAP,EAAU;AACV,aAAON,OAAO,CAACO,MAAR,CAAeD,CAAf,CAAP;AACD;AACF,GAhBW;AAiBZE,EAAAA,YAAY,EAAE,SAASA,YAAT,CAAsBJ,GAAtB,EAA2B;AACvCb,IAAAA,SAAS,CAAC,OAAOa,GAAP,KAAe,QAAhB,EAA0B,2CAA2CA,GAArE,CAAT;AACAb,IAAAA,SAAS,CAACa,GAAD,EAAM,8BAAN,CAAT;AACD;AApBW,CAAd;;AAuBA,IAAIC,IAAI,GAAG,SAASA,IAAT,CAAcD,GAAd,EAAmB;AAC5B,MAAId,SAAJ,EAAe;AACbG,IAAAA,MAAM,CAACC,QAAP,GAAkB,IAAIe,GAAJ,CAAQL,GAAR,EAAaX,MAAM,CAACC,QAApB,EAA8BgB,QAA9B,EAAlB;AACD;AACF,CAJD;;AAMA,eAAed,OAAf","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport invariant from 'fbjs/lib/invariant';\nvar initialURL = canUseDOM ? window.location.href : '';\nvar Linking = {\n  addEventListener: function addEventListener() {},\n  removeEventListener: function removeEventListener() {},\n  canOpenURL: function canOpenURL() {\n    return Promise.resolve(true);\n  },\n  getInitialURL: function getInitialURL() {\n    return Promise.resolve(initialURL);\n  },\n  openURL: function openURL(url) {\n    try {\n      open(url);\n      return Promise.resolve();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  },\n  _validateURL: function _validateURL(url) {\n    invariant(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);\n    invariant(url, 'Invalid URL: cannot be empty');\n  }\n};\n\nvar open = function open(url) {\n  if (canUseDOM) {\n    window.location = new URL(url, window.location).toString();\n  }\n};\n\nexport default Linking;"]},"metadata":{},"sourceType":"module"}