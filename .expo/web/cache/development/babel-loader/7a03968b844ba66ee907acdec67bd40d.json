{"ast":null,"code":"import ReactNativePlatform from \"react-native-web/dist/exports/Platform\";\nimport { isDOMAvailable } from \"./environment/browser\";\nvar Platform = {\n  OS: ReactNativePlatform.OS,\n  select: ReactNativePlatform.select,\n  isDOMAvailable: isDOMAvailable\n};\nexport default Platform;","map":{"version":3,"sources":["../src/Platform.ts"],"names":[],"mappings":";AAEA,SAAS,cAAT;AAMA,IAAM,QAAQ,GAAG;AAKf,EAAA,EAAE,EAAE,mBAAmB,CAAC,EALT;AAcf,EAAA,MAAM,EAAE,mBAAmB,CAAC,MAdb;AAmBf,EAAA,cAAc,EAAd;AAnBe,CAAjB;AAsBA,eAAe,QAAf","sourcesContent":["import { Platform as ReactNativePlatform, PlatformOSType } from 'react-native';\n\nimport { isDOMAvailable } from './environment/browser';\n\nexport type PlatformSelectOSType = PlatformOSType | 'native' | 'electron' | 'default';\n\nexport type PlatformSelect = <T>(specifics: { [platform in PlatformSelectOSType]?: T }) => T;\n\nconst Platform = {\n  /**\n   * Denotes the currently running platform.\n   * Can be one of ios, android, web.\n   */\n  OS: ReactNativePlatform.OS,\n  /**\n   * Returns the value with the matching platform.\n   * Object keys can be any of ios, android, native, web, default.\n   *\n   * @ios ios, native, default\n   * @android android, native, default\n   * @web web, default\n   */\n  select: ReactNativePlatform.select as PlatformSelect,\n  /**\n   * Denotes if the DOM API is available in the current environment.\n   * The DOM is not available in native React runtimes and Node.js.\n   */\n  isDOMAvailable,\n};\n\nexport default Platform;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}