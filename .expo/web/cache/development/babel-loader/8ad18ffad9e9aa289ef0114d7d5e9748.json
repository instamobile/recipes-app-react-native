{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty2(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { PanGestureHandler, TapGestureHandler, State } from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\nimport DrawerProgressContext from \"../utils/DrawerProgressContext\";\nvar Clock = Animated.Clock,\n    Value = Animated.Value,\n    onChange = Animated.onChange,\n    clockRunning = Animated.clockRunning,\n    startClock = Animated.startClock,\n    stopClock = Animated.stopClock,\n    interpolate = Animated.interpolate,\n    spring = Animated.spring,\n    abs = Animated.abs,\n    add = Animated.add,\n    and = Animated.and,\n    block = Animated.block,\n    call = Animated.call,\n    cond = Animated.cond,\n    divide = Animated.divide,\n    eq = Animated.eq,\n    event = Animated.event,\n    greaterThan = Animated.greaterThan,\n    lessThan = Animated.lessThan,\n    max = Animated.max,\n    min = Animated.min,\n    multiply = Animated.multiply,\n    neq = Animated.neq,\n    or = Animated.or,\n    set = Animated.set,\n    sub = Animated.sub;\nvar TRUE = 1;\nvar FALSE = 0;\nvar NOOP = 0;\nvar UNSET = -1;\nvar PROGRESS_EPSILON = 0.05;\nvar DIRECTION_LEFT = 1;\nvar DIRECTION_RIGHT = -1;\nvar SWIPE_DISTANCE_THRESHOLD_DEFAULT = 60;\nvar SWIPE_DISTANCE_MINIMUM = 5;\nvar SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01\n};\n\nvar Drawer = function (_React$PureComponent) {\n  _inherits(Drawer, _React$PureComponent);\n\n  var _super = _createSuper(Drawer);\n\n  function Drawer() {\n    var _this;\n\n    _classCallCheck(this, Drawer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"clock\", new Clock());\n\n    _defineProperty(_assertThisInitialized(_this), \"isDrawerTypeFront\", new Value(_this.props.drawerType === 'front' ? TRUE : FALSE));\n\n    _defineProperty(_assertThisInitialized(_this), \"isOpen\", new Value(_this.props.open ? TRUE : FALSE));\n\n    _defineProperty(_assertThisInitialized(_this), \"nextIsOpen\", new Value(UNSET));\n\n    _defineProperty(_assertThisInitialized(_this), \"isSwiping\", new Value(FALSE));\n\n    _defineProperty(_assertThisInitialized(_this), \"gestureState\", new Value(State.UNDETERMINED));\n\n    _defineProperty(_assertThisInitialized(_this), \"touchX\", new Value(0));\n\n    _defineProperty(_assertThisInitialized(_this), \"velocityX\", new Value(0));\n\n    _defineProperty(_assertThisInitialized(_this), \"gestureX\", new Value(0));\n\n    _defineProperty(_assertThisInitialized(_this), \"offsetX\", new Value(0));\n\n    _defineProperty(_assertThisInitialized(_this), \"position\", new Value(0));\n\n    _defineProperty(_assertThisInitialized(_this), \"containerWidth\", new Value(0));\n\n    _defineProperty(_assertThisInitialized(_this), \"drawerWidth\", new Value(0));\n\n    _defineProperty(_assertThisInitialized(_this), \"drawerOpacity\", new Value(0));\n\n    _defineProperty(_assertThisInitialized(_this), \"drawerPosition\", new Value(_this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT));\n\n    _defineProperty(_assertThisInitialized(_this), \"touchDistanceFromDrawer\", cond(_this.isDrawerTypeFront, cond(eq(_this.drawerPosition, DIRECTION_LEFT), max(sub(sub(_this.touchX, _this.gestureX), _this.drawerWidth), 0), min(multiply(sub(sub(_this.containerWidth, _this.drawerWidth), sub(_this.touchX, _this.gestureX)), DIRECTION_RIGHT), 0)), 0));\n\n    _defineProperty(_assertThisInitialized(_this), \"swipeDistanceThreshold\", new Value(_this.props.swipeDistanceThreshold !== undefined ? _this.props.swipeDistanceThreshold : SWIPE_DISTANCE_THRESHOLD_DEFAULT));\n\n    _defineProperty(_assertThisInitialized(_this), \"swipeVelocityThreshold\", new Value(_this.props.swipeVelocityThreshold));\n\n    _defineProperty(_assertThisInitialized(_this), \"currentOpenValue\", _this.props.open);\n\n    _defineProperty(_assertThisInitialized(_this), \"pendingOpenValue\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"isStatusBarHidden\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"manuallyTriggerSpring\", new Value(FALSE));\n\n    _defineProperty(_assertThisInitialized(_this), \"transitionTo\", function (isOpen) {\n      var toValue = new Value(0);\n      var frameTime = new Value(0);\n      var state = {\n        position: _this.position,\n        time: new Value(0),\n        finished: new Value(FALSE),\n        velocity: new Value(0)\n      };\n      return block([cond(clockRunning(_this.clock), NOOP, [set(toValue, multiply(isOpen, _this.drawerWidth, _this.drawerPosition)), set(frameTime, 0), set(state.time, 0), set(state.finished, FALSE), set(state.velocity, _this.velocityX), set(_this.isOpen, isOpen), startClock(_this.clock), set(_this.manuallyTriggerSpring, FALSE)]), spring(_this.clock, state, _objectSpread(_objectSpread({}, SPRING_CONFIG), {}, {\n        toValue: toValue\n      })), cond(state.finished, [set(_this.touchX, 0), set(_this.gestureX, 0), set(_this.velocityX, 0), set(_this.offsetX, 0), stopClock(_this.clock), call([_this.isOpen], function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 1),\n            value = _ref2[0];\n\n        var open = Boolean(value);\n\n        if (open !== _this.props.open) {\n          _this.toggleDrawer(_this.props.open);\n        }\n      })])]);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"dragX\", block([onChange(_this.isOpen, call([_this.isOpen], function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 1),\n          value = _ref4[0];\n\n      var open = Boolean(value);\n      _this.currentOpenValue = open;\n\n      if (open !== _this.props.open) {\n        if (open) {\n          _this.props.onOpen();\n        } else {\n          _this.props.onClose();\n        }\n\n        _this.pendingOpenValue = open;\n\n        _this.forceUpdate();\n      }\n    })), onChange(_this.nextIsOpen, cond(neq(_this.nextIsOpen, UNSET), [cond(clockRunning(_this.clock), stopClock(_this.clock)), set(_this.isOpen, _this.nextIsOpen), set(_this.gestureX, 0), set(_this.nextIsOpen, UNSET)])), onChange(_this.isSwiping, call([_this.isSwiping], function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 1),\n          value = _ref6[0];\n\n      var keyboardDismissMode = _this.props.keyboardDismissMode;\n\n      if (value === TRUE) {\n        if (keyboardDismissMode === 'on-drag') {\n          Keyboard.dismiss();\n        }\n\n        _this.toggleStatusBar(true);\n      } else {\n        _this.toggleStatusBar(_this.currentOpenValue);\n      }\n    })), cond(eq(_this.gestureState, State.ACTIVE), [cond(_this.isSwiping, NOOP, [set(_this.isSwiping, TRUE), set(_this.offsetX, _this.position)]), set(_this.position, add(_this.offsetX, _this.gestureX, _this.touchDistanceFromDrawer)), stopClock(_this.clock)], [set(_this.isSwiping, FALSE), set(_this.touchX, 0), _this.transitionTo(cond(_this.manuallyTriggerSpring, _this.isOpen, cond(or(and(greaterThan(abs(_this.gestureX), SWIPE_DISTANCE_MINIMUM), greaterThan(abs(_this.velocityX), _this.swipeVelocityThreshold)), greaterThan(abs(_this.gestureX), _this.swipeDistanceThreshold)), cond(eq(_this.drawerPosition, DIRECTION_LEFT), greaterThan(cond(eq(_this.velocityX, 0), _this.gestureX, _this.velocityX), 0), lessThan(cond(eq(_this.velocityX, 0), _this.gestureX, _this.velocityX), 0)), _this.isOpen)))]), _this.position]));\n\n    _defineProperty(_assertThisInitialized(_this), \"translateX\", cond(eq(_this.drawerPosition, DIRECTION_RIGHT), min(max(multiply(_this.drawerWidth, -1), _this.dragX), 0), max(min(_this.drawerWidth, _this.dragX), 0)));\n\n    _defineProperty(_assertThisInitialized(_this), \"progress\", cond(eq(_this.drawerWidth, 0), 0, abs(divide(_this.translateX, _this.drawerWidth))));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleGestureEvent\", event([{\n      nativeEvent: {\n        x: _this.touchX,\n        translationX: _this.gestureX,\n        velocityX: _this.velocityX\n      }\n    }]));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleGestureStateChange\", event([{\n      nativeEvent: {\n        state: function state(s) {\n          return set(_this.gestureState, s);\n        }\n      }\n    }]));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTapStateChange\", event([{\n      nativeEvent: {\n        oldState: function oldState(s) {\n          return cond(eq(s, State.ACTIVE), set(_this.manuallyTriggerSpring, TRUE));\n        }\n      }\n    }]));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleContainerLayout\", function (e) {\n      return _this.containerWidth.setValue(e.nativeEvent.layout.width);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDrawerLayout\", function (e) {\n      _this.drawerWidth.setValue(e.nativeEvent.layout.width);\n\n      _this.toggleDrawer(_this.props.open);\n\n      requestAnimationFrame(function () {\n        return requestAnimationFrame(function () {\n          return _this.drawerOpacity.setValue(1);\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleDrawer\", function (open) {\n      if (_this.currentOpenValue !== open) {\n        _this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n        _this.currentOpenValue = open;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleStatusBar\", function (hidden) {\n      var _this$props = _this.props,\n          hideStatusBar = _this$props.hideStatusBar,\n          statusBarAnimation = _this$props.statusBarAnimation;\n\n      if (hideStatusBar && _this.isStatusBarHidden !== hidden) {\n        _this.isStatusBarHidden = hidden;\n        StatusBar.setHidden(hidden, statusBarAnimation);\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(Drawer, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props2 = this.props,\n          open = _this$props2.open,\n          drawerPosition = _this$props2.drawerPosition,\n          drawerType = _this$props2.drawerType,\n          swipeDistanceThreshold = _this$props2.swipeDistanceThreshold,\n          swipeVelocityThreshold = _this$props2.swipeVelocityThreshold,\n          hideStatusBar = _this$props2.hideStatusBar;\n\n      if (typeof this.pendingOpenValue !== 'boolean' || open !== this.pendingOpenValue) {\n        this.toggleDrawer(open);\n      }\n\n      this.pendingOpenValue = undefined;\n\n      if (open !== prevProps.open && hideStatusBar) {\n        this.toggleStatusBar(open);\n      }\n\n      if (prevProps.drawerPosition !== drawerPosition) {\n        this.drawerPosition.setValue(drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT);\n      }\n\n      if (prevProps.drawerType !== drawerType) {\n        this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n      }\n\n      if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n        this.swipeDistanceThreshold.setValue(swipeDistanceThreshold !== undefined ? swipeDistanceThreshold : SWIPE_DISTANCE_THRESHOLD_DEFAULT);\n      }\n\n      if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n        this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.toggleStatusBar(false);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props3 = this.props,\n          open = _this$props3.open,\n          gestureEnabled = _this$props3.gestureEnabled,\n          drawerPosition = _this$props3.drawerPosition,\n          drawerType = _this$props3.drawerType,\n          swipeEdgeWidth = _this$props3.swipeEdgeWidth,\n          sceneContainerStyle = _this$props3.sceneContainerStyle,\n          drawerStyle = _this$props3.drawerStyle,\n          overlayStyle = _this$props3.overlayStyle,\n          onGestureRef = _this$props3.onGestureRef,\n          renderDrawerContent = _this$props3.renderDrawerContent,\n          renderSceneContent = _this$props3.renderSceneContent,\n          gestureHandlerProps = _this$props3.gestureHandlerProps;\n      var right = drawerPosition === 'right';\n      var contentTranslateX = drawerType === 'front' ? 0 : this.translateX;\n      var drawerTranslateX = drawerType === 'back' ? I18nManager.isRTL ? multiply(this.drawerWidth, DIRECTION_RIGHT) : this.drawerWidth : this.translateX;\n      var offset = I18nManager.isRTL ? '100%' : multiply(this.drawerWidth, -1);\n      var hitSlop = right ? {\n        right: 0,\n        width: open ? undefined : swipeEdgeWidth\n      } : {\n        left: 0,\n        width: open ? undefined : swipeEdgeWidth\n      };\n      return React.createElement(DrawerProgressContext.Provider, {\n        value: this.progress\n      }, React.createElement(PanGestureHandler, _extends({\n        ref: onGestureRef,\n        activeOffsetX: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n        failOffsetY: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n        onGestureEvent: this.handleGestureEvent,\n        onHandlerStateChange: this.handleGestureStateChange,\n        hitSlop: hitSlop,\n        enabled: gestureEnabled\n      }, gestureHandlerProps), React.createElement(Animated.View, {\n        onLayout: this.handleContainerLayout,\n        style: styles.main\n      }, React.createElement(Animated.View, {\n        style: [styles.content, {\n          transform: [{\n            translateX: contentTranslateX\n          }]\n        }, sceneContainerStyle],\n        importantForAccessibility: open ? 'no-hide-descendants' : 'yes'\n      }, renderSceneContent({\n        progress: this.progress\n      }), React.createElement(TapGestureHandler, {\n        enabled: gestureEnabled,\n        onHandlerStateChange: this.handleTapStateChange\n      }, React.createElement(Animated.View, {\n        style: [styles.overlay, {\n          opacity: interpolate(this.progress, {\n            inputRange: [PROGRESS_EPSILON, 1],\n            outputRange: [0, 1]\n          }),\n          zIndex: cond(greaterThan(this.progress, PROGRESS_EPSILON), 0, -1)\n        }, overlayStyle]\n      }))), React.createElement(Animated.Code, {\n        exec: block([onChange(this.manuallyTriggerSpring, [cond(eq(this.manuallyTriggerSpring, TRUE), [set(this.nextIsOpen, FALSE), call([], function () {\n          return _this2.currentOpenValue = false;\n        })])])])\n      }), React.createElement(Animated.View, {\n        accessibilityViewIsModal: open,\n        removeClippedSubviews: Platform.OS !== 'ios',\n        onLayout: this.handleDrawerLayout,\n        style: [styles.container, right ? {\n          right: offset\n        } : {\n          left: offset\n        }, {\n          transform: [{\n            translateX: drawerTranslateX\n          }],\n          opacity: this.drawerOpacity,\n          zIndex: drawerType === 'back' ? -1 : 0\n        }, drawerStyle]\n      }, renderDrawerContent({\n        progress: this.progress\n      })))));\n    }\n  }]);\n\n  return Drawer;\n}(React.PureComponent);\n\nexport { Drawer as default };\n\n_defineProperty(Drawer, \"defaultProps\", {\n  gestureEnabled: true,\n  drawerPostion: I18nManager.isRTL ? 'left' : 'right',\n  drawerType: 'front',\n  swipeEdgeWidth: 32,\n  swipeVelocityThreshold: 500,\n  keyboardDismissMode: 'on-drag',\n  hideStatusBar: false,\n  statusBarAnimation: 'slide'\n});\n\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: '80%',\n    maxWidth: '100%'\n  },\n  overlay: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    backgroundColor: 'rgba(0, 0, 0, 0.5)'\n  }),\n  content: {\n    flex: 1\n  },\n  main: {\n    flex: 1,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"sources":["Drawer.tsx"],"names":["sub","TRUE","FALSE","NOOP","UNSET","PROGRESS_EPSILON","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_THRESHOLD_DEFAULT","SWIPE_DISTANCE_MINIMUM","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","Drawer","React","gestureEnabled","drawerPostion","I18nManager","drawerType","swipeEdgeWidth","swipeVelocityThreshold","keyboardDismissMode","hideStatusBar","statusBarAnimation","componentDidUpdate","open","prevProps","drawerPosition","swipeDistanceThreshold","componentWillUnmount","State","cond","eq","max","min","multiply","isOpen","toValue","frameTime","state","position","time","finished","velocity","block","clockRunning","set","startClock","spring","stopClock","call","Boolean","onChange","neq","value","Keyboard","add","or","and","greaterThan","abs","lessThan","divide","event","nativeEvent","x","translationX","velocityX","s","oldState","e","requestAnimationFrame","hidden","StatusBar","render","gestureHandlerProps","right","contentTranslateX","drawerTranslateX","offset","hitSlop","width","left","progress","styles","main","transform","translateX","renderSceneContent","handleTapStateChange","opacity","interpolate","inputRange","outputRange","zIndex","Platform","renderDrawerContent","container","backgroundColor","top","bottom","maxWidth","overlay","StyleSheet","content","flex","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  ViewStyle,\n  LayoutChangeEvent,\n  I18nManager,\n  Platform,\n  Keyboard,\n  StatusBar,\n} from 'react-native';\nimport {\n  PanGestureHandler,\n  TapGestureHandler,\n  State,\n} from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\nimport DrawerProgressContext from '../utils/DrawerProgressContext';\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  clockRunning,\n  startClock,\n  stopClock,\n  interpolate,\n  spring,\n  abs,\n  add,\n  and,\n  block,\n  call,\n  cond,\n  divide,\n  eq,\n  event,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  or,\n  set,\n  sub,\n} = Animated;\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst PROGRESS_EPSILON = 0.05;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SWIPE_DISTANCE_THRESHOLD_DEFAULT = 60;\n\nconst SWIPE_DISTANCE_MINIMUM = 5;\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\n\ntype Binary = 0 | 1;\n\ntype Renderer = (props: { progress: Animated.Node<number> }) => React.ReactNode;\n\ntype Props = {\n  open: boolean;\n  onOpen: () => void;\n  onClose: () => void;\n  onGestureRef?: (ref: PanGestureHandler | null) => void;\n  gestureEnabled: boolean;\n  drawerPosition: 'left' | 'right';\n  drawerType: 'front' | 'back' | 'slide';\n  keyboardDismissMode: 'none' | 'on-drag';\n  swipeEdgeWidth: number;\n  swipeDistanceThreshold?: number;\n  swipeVelocityThreshold: number;\n  hideStatusBar: boolean;\n  statusBarAnimation: 'slide' | 'none' | 'fade';\n  overlayStyle?: ViewStyle;\n  drawerStyle?: ViewStyle;\n  sceneContainerStyle?: ViewStyle;\n  renderDrawerContent: Renderer;\n  renderSceneContent: Renderer;\n  gestureHandlerProps?: React.ComponentProps<typeof PanGestureHandler>;\n};\n\nexport default class Drawer extends React.PureComponent<Props> {\n  static defaultProps = {\n    gestureEnabled: true,\n    drawerPostion: I18nManager.isRTL ? 'left' : 'right',\n    drawerType: 'front',\n    swipeEdgeWidth: 32,\n    swipeVelocityThreshold: 500,\n    keyboardDismissMode: 'on-drag',\n    hideStatusBar: false,\n    statusBarAnimation: 'slide',\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      open,\n      drawerPosition,\n      drawerType,\n      swipeDistanceThreshold,\n      swipeVelocityThreshold,\n      hideStatusBar,\n    } = this.props;\n\n    if (\n      // If we're not in the middle of a transition, sync the drawer's open state\n      typeof this.pendingOpenValue !== 'boolean' ||\n      open !== this.pendingOpenValue\n    ) {\n      this.toggleDrawer(open);\n    }\n\n    this.pendingOpenValue = undefined;\n\n    if (open !== prevProps.open && hideStatusBar) {\n      this.toggleStatusBar(open);\n    }\n\n    if (prevProps.drawerPosition !== drawerPosition) {\n      this.drawerPosition.setValue(\n        drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n      );\n    }\n\n    if (prevProps.drawerType !== drawerType) {\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n    }\n\n    if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n      this.swipeDistanceThreshold.setValue(\n        swipeDistanceThreshold !== undefined\n          ? swipeDistanceThreshold\n          : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n      );\n    }\n\n    if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n      this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n    }\n  }\n\n  componentWillUnmount() {\n    this.toggleStatusBar(false);\n  }\n\n  private clock = new Clock();\n\n  private isDrawerTypeFront = new Value<Binary>(\n    this.props.drawerType === 'front' ? TRUE : FALSE\n  );\n\n  private isOpen = new Value<Binary>(this.props.open ? TRUE : FALSE);\n  private nextIsOpen = new Value<Binary | -1>(UNSET);\n  private isSwiping = new Value<Binary>(FALSE);\n\n  private gestureState = new Value<number>(State.UNDETERMINED);\n  private touchX = new Value<number>(0);\n  private velocityX = new Value<number>(0);\n  private gestureX = new Value<number>(0);\n  private offsetX = new Value<number>(0);\n  private position = new Value<number>(0);\n\n  private containerWidth = new Value<number>(0);\n  private drawerWidth = new Value<number>(0);\n  private drawerOpacity = new Value<number>(0);\n  private drawerPosition = new Value<number>(\n    this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n  );\n\n  // Comment stolen from react-native-gesture-handler/DrawerLayout\n  //\n  // While closing the drawer when user starts gesture outside of its area (in greyed\n  // out part of the window), we want the drawer to follow only once finger reaches the\n  // edge of the drawer.\n  // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n  // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n  // an arrow pointing left\n  // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    +---------------+    +---------------+    +---------------+    +---------------+\n  //\n  // For the above to work properly we define animated value that will keep start position\n  // of the gesture. Then we use that value to calculate how much we need to subtract from\n  // the dragX. If the gesture started on the greyed out area we take the distance from the\n  // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n  // drawer be pulled back as soon as you start the pan.\n  //\n  // This is used only when drawerType is \"front\"\n  private touchDistanceFromDrawer = cond(\n    this.isDrawerTypeFront,\n    cond(\n      eq(this.drawerPosition, DIRECTION_LEFT),\n      max(\n        // Distance of touch start from left screen edge - Drawer width\n        sub(sub(this.touchX, this.gestureX), this.drawerWidth),\n        0\n      ),\n      min(\n        multiply(\n          // Distance of drawer from left screen edge - Touch start point\n          sub(\n            sub(this.containerWidth, this.drawerWidth),\n            sub(this.touchX, this.gestureX)\n          ),\n          DIRECTION_RIGHT\n        ),\n        0\n      )\n    ),\n    0\n  );\n\n  private swipeDistanceThreshold = new Value<number>(\n    this.props.swipeDistanceThreshold !== undefined\n      ? this.props.swipeDistanceThreshold\n      : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n  );\n  private swipeVelocityThreshold = new Value<number>(\n    this.props.swipeVelocityThreshold\n  );\n\n  private currentOpenValue: boolean = this.props.open;\n  private pendingOpenValue: boolean | undefined;\n\n  private isStatusBarHidden: boolean = false;\n\n  private manuallyTriggerSpring = new Value<Binary>(FALSE);\n\n  private transitionTo = (isOpen: number | Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.position,\n      time: new Value(0),\n      finished: new Value(FALSE),\n      velocity: new Value(0),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(state.velocity, this.velocityX),\n        set(this.isOpen, isOpen),\n        startClock(this.clock),\n        set(this.manuallyTriggerSpring, FALSE),\n      ]),\n      spring(this.clock, state, { ...SPRING_CONFIG, toValue }),\n      cond(state.finished, [\n        // Reset gesture and velocity from previous gesture\n        set(this.touchX, 0),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        set(this.offsetX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n        call([this.isOpen], ([value]: readonly Binary[]) => {\n          const open = Boolean(value);\n\n          if (open !== this.props.open) {\n            // Sync drawer's state after animation finished\n            // This shouldn't be necessary, but there seems to be an issue on iOS\n            this.toggleDrawer(this.props.open);\n          }\n        }),\n      ]),\n    ]);\n  };\n\n  private dragX = block([\n    onChange(\n      this.isOpen,\n      call([this.isOpen], ([value]: readonly Binary[]) => {\n        const open = Boolean(value);\n\n        this.currentOpenValue = open;\n\n        // Without this check, the drawer can go to an infinite update <-> animate loop for sync updates\n        if (open !== this.props.open) {\n          // If the mode changed, update state\n          if (open) {\n            this.props.onOpen();\n          } else {\n            this.props.onClose();\n          }\n\n          this.pendingOpenValue = open;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          this.forceUpdate();\n        }\n      })\n    ),\n    onChange(\n      this.nextIsOpen,\n      cond(neq(this.nextIsOpen, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        // Update the open value to trigger the transition\n        set(this.isOpen, this.nextIsOpen),\n        set(this.gestureX, 0),\n        set(this.nextIsOpen, UNSET),\n      ])\n    ),\n    // This block must be after the this.isOpen listener since we check for current value\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      call([this.isSwiping], ([value]: readonly Binary[]) => {\n        const { keyboardDismissMode } = this.props;\n\n        if (value === TRUE) {\n          if (keyboardDismissMode === 'on-drag') {\n            Keyboard.dismiss();\n          }\n\n          this.toggleStatusBar(true);\n        } else {\n          this.toggleStatusBar(this.currentOpenValue);\n        }\n      })\n    ),\n    cond(\n      eq(this.gestureState, State.ACTIVE),\n      [\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          // Also update the drag offset to the last position\n          set(this.offsetX, this.position),\n        ]),\n        // Update position with previous offset + gesture distance\n        set(\n          this.position,\n          add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n      [\n        set(this.isSwiping, FALSE),\n        set(this.touchX, 0),\n        this.transitionTo(\n          cond(\n            this.manuallyTriggerSpring,\n            this.isOpen,\n            cond(\n              or(\n                and(\n                  greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\n                  greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)\n                ),\n                greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)\n              ),\n              cond(\n                eq(this.drawerPosition, DIRECTION_LEFT),\n                // If swiped to right, open the drawer, otherwise close it\n                greaterThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                ),\n                // If swiped to left, open the drawer, otherwise close it\n                lessThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                )\n              ),\n              this.isOpen\n            )\n          )\n        ),\n      ]\n    ),\n    this.position,\n  ]);\n\n  private translateX = cond(\n    eq(this.drawerPosition, DIRECTION_RIGHT),\n    min(max(multiply(this.drawerWidth, -1), this.dragX), 0),\n    max(min(this.drawerWidth, this.dragX), 0)\n  );\n\n  private progress = cond(\n    // Check if the drawer width is available to avoid division by zero\n    eq(this.drawerWidth, 0),\n    0,\n    abs(divide(this.translateX, this.drawerWidth))\n  );\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        x: this.touchX,\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n      },\n    },\n  ]);\n\n  private handleGestureStateChange = event([\n    {\n      nativeEvent: {\n        state: (s: Animated.Value<number>) => set(this.gestureState, s),\n      },\n    },\n  ]);\n\n  private handleTapStateChange = event([\n    {\n      nativeEvent: {\n        oldState: (s: Animated.Value<number>) =>\n          cond(eq(s, State.ACTIVE), set(this.manuallyTriggerSpring, TRUE)),\n      },\n    },\n  ]);\n\n  private handleContainerLayout = (e: LayoutChangeEvent) =>\n    this.containerWidth.setValue(e.nativeEvent.layout.width);\n\n  private handleDrawerLayout = (e: LayoutChangeEvent) => {\n    this.drawerWidth.setValue(e.nativeEvent.layout.width);\n    this.toggleDrawer(this.props.open);\n\n    // Until layout is available, drawer is hidden with opacity: 0 by default\n    // Show it in the next frame when layout is available\n    // If we don't delay it until the next frame, there's a visible flicker\n    requestAnimationFrame(() =>\n      requestAnimationFrame(() => this.drawerOpacity.setValue(1))\n    );\n  };\n\n  private toggleDrawer = (open: boolean) => {\n    if (this.currentOpenValue !== open) {\n      this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n      // This value will also be set shortly after as changing this.nextIsOpen changes this.isOpen\n      // However, there's a race condition on Android, so we need to set a bit earlier\n      this.currentOpenValue = open;\n    }\n  };\n\n  private toggleStatusBar = (hidden: boolean) => {\n    const { hideStatusBar, statusBarAnimation } = this.props;\n\n    if (hideStatusBar && this.isStatusBarHidden !== hidden) {\n      this.isStatusBarHidden = hidden;\n      StatusBar.setHidden(hidden, statusBarAnimation);\n    }\n  };\n\n  render() {\n    const {\n      open,\n      gestureEnabled,\n      drawerPosition,\n      drawerType,\n      swipeEdgeWidth,\n      sceneContainerStyle,\n      drawerStyle,\n      overlayStyle,\n      onGestureRef,\n      renderDrawerContent,\n      renderSceneContent,\n      gestureHandlerProps,\n    } = this.props;\n\n    const right = drawerPosition === 'right';\n\n    const contentTranslateX = drawerType === 'front' ? 0 : this.translateX;\n    const drawerTranslateX =\n      drawerType === 'back'\n        ? I18nManager.isRTL\n          ? multiply(this.drawerWidth, DIRECTION_RIGHT)\n          : this.drawerWidth\n        : this.translateX;\n\n    const offset = I18nManager.isRTL ? '100%' : multiply(this.drawerWidth, -1);\n\n    // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n    // https://github.com/kmagiera/react-native-gesture-handler/issues/569\n    const hitSlop = right\n      ? // Extend hitSlop to the side of the screen when drawer is closed\n        // This lets the user drag the drawer from the side of the screen\n        { right: 0, width: open ? undefined : swipeEdgeWidth }\n      : { left: 0, width: open ? undefined : swipeEdgeWidth };\n\n    return (\n      <DrawerProgressContext.Provider value={this.progress}>\n        <PanGestureHandler\n          ref={onGestureRef}\n          activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          onGestureEvent={this.handleGestureEvent}\n          onHandlerStateChange={this.handleGestureStateChange}\n          hitSlop={hitSlop}\n          enabled={gestureEnabled}\n          {...gestureHandlerProps}\n        >\n          <Animated.View\n            onLayout={this.handleContainerLayout}\n            style={styles.main}\n          >\n            <Animated.View\n              style={[\n                styles.content,\n                {\n                  transform: [{ translateX: contentTranslateX }],\n                },\n                sceneContainerStyle as any,\n              ]}\n              importantForAccessibility={open ? 'no-hide-descendants' : 'yes'}\n            >\n              {renderSceneContent({ progress: this.progress })}\n              <TapGestureHandler\n                enabled={gestureEnabled}\n                onHandlerStateChange={this.handleTapStateChange}\n              >\n                <Animated.View\n                  style={[\n                    styles.overlay,\n                    {\n                      opacity: interpolate(this.progress, {\n                        inputRange: [PROGRESS_EPSILON, 1],\n                        outputRange: [0, 1],\n                      }),\n                      // We don't want the user to be able to press through the overlay when drawer is open\n                      // One approach is to adjust the pointerEvents based on the progress\n                      // But we can also send the overlay behind the screen, which works, and is much less code\n                      zIndex: cond(\n                        greaterThan(this.progress, PROGRESS_EPSILON),\n                        0,\n                        -1\n                      ),\n                    },\n                    overlayStyle,\n                  ]}\n                />\n              </TapGestureHandler>\n            </Animated.View>\n            <Animated.Code\n              exec={block([\n                onChange(this.manuallyTriggerSpring, [\n                  cond(eq(this.manuallyTriggerSpring, TRUE), [\n                    set(this.nextIsOpen, FALSE),\n                    call([], () => (this.currentOpenValue = false)),\n                  ]),\n                ]),\n              ])}\n            />\n            <Animated.View\n              accessibilityViewIsModal={open}\n              removeClippedSubviews={Platform.OS !== 'ios'}\n              onLayout={this.handleDrawerLayout}\n              style={[\n                styles.container,\n                right ? { right: offset } : { left: offset },\n                {\n                  transform: [{ translateX: drawerTranslateX }],\n                  opacity: this.drawerOpacity,\n                  zIndex: drawerType === 'back' ? -1 : 0,\n                },\n                drawerStyle as any,\n              ]}\n            >\n              {renderDrawerContent({ progress: this.progress })}\n            </Animated.View>\n          </Animated.View>\n        </PanGestureHandler>\n      </DrawerProgressContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: '80%',\n    maxWidth: '100%',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}