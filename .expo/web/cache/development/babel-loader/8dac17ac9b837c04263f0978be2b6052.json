{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { SceneView, ThemeColors, ThemeContext } from 'react-navigation';\nimport { ScreenContainer, screensEnabled } from 'react-native-screens';\nimport * as DrawerActions from \"../routers/DrawerActions\";\nimport DrawerSidebar from \"./DrawerSidebar\";\nimport DrawerGestureContext from \"../utils/DrawerGestureContext\";\nimport ResourceSavingScene from \"./ResourceSavingScene\";\nimport Drawer from \"./Drawer\";\n\nvar DrawerView = function (_React$PureComponent) {\n  _inherits(DrawerView, _React$PureComponent);\n\n  var _super = _createSuper(DrawerView);\n\n  function DrawerView() {\n    var _this;\n\n    _classCallCheck(this, DrawerView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      loaded: [_this.props.navigation.state.index],\n      drawerWidth: typeof _this.props.navigationConfig.drawerWidth === 'function' ? _this.props.navigationConfig.drawerWidth() : _this.props.navigationConfig.drawerWidth\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"context\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"drawerGestureRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"getLockMode\", function (_ref) {\n      var navigation = _ref.navigation,\n          descriptors = _ref.descriptors;\n      var activeKey = navigation.state.routes[navigation.state.index].key;\n      var drawerLockMode = descriptors[activeKey].options.drawerLockMode;\n      return drawerLockMode;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDrawerOpen\", function () {\n      var navigation = _this.props.navigation;\n      navigation.dispatch(DrawerActions.openDrawer({\n        key: navigation.state.key\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDrawerClose\", function () {\n      var navigation = _this.props.navigation;\n      navigation.dispatch(DrawerActions.closeDrawer({\n        key: navigation.state.key\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateWidth\", function () {\n      var drawerWidth = typeof _this.props.navigationConfig.drawerWidth === 'function' ? _this.props.navigationConfig.drawerWidth() : _this.props.navigationConfig.drawerWidth;\n\n      if (_this.state.drawerWidth !== drawerWidth) {\n        _this.setState({\n          drawerWidth: drawerWidth\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderNavigationView\", function (_ref2) {\n      var progress = _ref2.progress;\n      return React.createElement(DrawerSidebar, _extends({\n        screenProps: _this.props.screenProps,\n        drawerOpenProgress: progress,\n        navigation: _this.props.navigation,\n        descriptors: _this.props.descriptors\n      }, _this.props.navigationConfig));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderContent\", function () {\n      var _this$props = _this.props,\n          lazy = _this$props.lazy,\n          navigation = _this$props.navigation,\n          _this$props$detachIna = _this$props.detachInactiveScreens,\n          detachInactiveScreens = _this$props$detachIna === void 0 ? true : _this$props$detachIna;\n      var loaded = _this.state.loaded;\n      var routes = navigation.state.routes;\n\n      if (_this.props.navigationConfig.unmountInactiveRoutes) {\n        var activeKey = navigation.state.routes[navigation.state.index].key;\n        var descriptor = _this.props.descriptors[activeKey];\n        return React.createElement(SceneView, {\n          navigation: descriptor.navigation,\n          screenProps: _this.props.screenProps,\n          component: descriptor.getComponent()\n        });\n      } else {\n        var enabled = (screensEnabled === null || screensEnabled === void 0 ? void 0 : screensEnabled()) && detachInactiveScreens;\n        return React.createElement(ScreenContainer, {\n          enabled: enabled,\n          style: styles.content\n        }, routes.map(function (route, index) {\n          if (lazy && !loaded.includes(index)) {\n            return null;\n          }\n\n          var isFocused = navigation.state.index === index;\n          var descriptor = _this.props.descriptors[route.key];\n          return React.createElement(ResourceSavingScene, {\n            key: route.key,\n            style: [StyleSheet.absoluteFill, {\n              opacity: isFocused ? 1 : 0\n            }],\n            isVisible: isFocused,\n            enabled: detachInactiveScreens\n          }, React.createElement(SceneView, {\n            navigation: descriptor.navigation,\n            screenProps: _this.props.screenProps,\n            component: descriptor.getComponent()\n          }));\n        }));\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setDrawerGestureRef\", function (ref) {\n      _this.drawerGestureRef.current = ref;\n    });\n\n    return _this;\n  }\n\n  _createClass(DrawerView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.getLockMode(this.props) === 'locked-open') {\n        this.handleDrawerOpen();\n      }\n\n      Dimensions.addEventListener('change', this.updateWidth);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var prevLockMode = this.getLockMode(prevProps);\n      var nextLockMode = this.getLockMode(this.props);\n\n      if (prevLockMode !== nextLockMode) {\n        if (nextLockMode === 'locked-open') {\n          this.handleDrawerOpen();\n        } else {\n          this.handleDrawerClose();\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      Dimensions.removeEventListener('change', this.updateWidth);\n    }\n  }, {\n    key: \"getDrawerBackgroundColor\",\n    value: function getDrawerBackgroundColor() {\n      var drawerBackgroundColor = this.props.navigationConfig.drawerBackgroundColor;\n\n      if (drawerBackgroundColor) {\n        return typeof drawerBackgroundColor === 'string' ? drawerBackgroundColor : drawerBackgroundColor[this.context];\n      } else {\n        return ThemeColors[this.context].bodyContent;\n      }\n    }\n  }, {\n    key: \"getOverlayColor\",\n    value: function getOverlayColor() {\n      var overlayColor = this.props.navigationConfig.overlayColor;\n\n      if (overlayColor) {\n        return typeof overlayColor === 'string' ? overlayColor : overlayColor[this.context];\n      } else {\n        return 'rgba(0,0,0,0.5)';\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          navigation = _this$props2.navigation,\n          navigationConfig = _this$props2.navigationConfig;\n      var drawerType = navigationConfig.drawerType,\n          sceneContainerStyle = navigationConfig.sceneContainerStyle,\n          edgeWidth = navigationConfig.edgeWidth,\n          minSwipeDistance = navigationConfig.minSwipeDistance,\n          hideStatusBar = navigationConfig.hideStatusBar,\n          statusBarAnimation = navigationConfig.statusBarAnimation,\n          gestureHandlerProps = navigationConfig.gestureHandlerProps;\n      var drawerLockMode = this.getLockMode(this.props);\n      var drawerBackgroundColor = this.getDrawerBackgroundColor();\n      var overlayColor = this.getOverlayColor();\n      return React.createElement(DrawerGestureContext.Provider, {\n        value: this.drawerGestureRef\n      }, React.createElement(Drawer, {\n        open: navigation.state.isDrawerOpen,\n        gestureEnabled: drawerLockMode !== 'locked-open' && drawerLockMode !== 'locked-closed',\n        onOpen: this.handleDrawerOpen,\n        onClose: this.handleDrawerClose,\n        onGestureRef: this.setDrawerGestureRef,\n        gestureHandlerProps: gestureHandlerProps,\n        drawerType: drawerType,\n        drawerPosition: this.props.navigationConfig.drawerPosition,\n        sceneContainerStyle: sceneContainerStyle,\n        drawerStyle: {\n          backgroundColor: drawerBackgroundColor,\n          width: this.state.drawerWidth\n        },\n        overlayStyle: {\n          backgroundColor: overlayColor\n        },\n        swipeEdgeWidth: edgeWidth,\n        swipeDistanceThreshold: minSwipeDistance,\n        hideStatusBar: hideStatusBar,\n        statusBarAnimation: statusBarAnimation,\n        renderDrawerContent: this.renderNavigationView,\n        renderSceneContent: this.renderContent\n      }));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var index = nextProps.navigation.state.index;\n      return {\n        loaded: prevState.loaded.includes(index) ? prevState.loaded : [].concat(_toConsumableArray(prevState.loaded), [index])\n      };\n    }\n  }]);\n\n  return DrawerView;\n}(React.PureComponent);\n\nexport { DrawerView as default };\n\n_defineProperty(DrawerView, \"contextType\", ThemeContext);\n\n_defineProperty(DrawerView, \"defaultProps\", {\n  lazy: true\n});\n\nvar styles = StyleSheet.create({\n  content: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["DrawerView.tsx"],"names":["DrawerView","React","ThemeContext","lazy","index","nextProps","loaded","prevState","drawerWidth","componentDidMount","Dimensions","componentDidUpdate","prevLockMode","nextLockMode","componentWillUnmount","descriptors","activeKey","navigation","drawerLockMode","key","progress","detachInactiveScreens","routes","descriptor","enabled","styles","content","isFocused","route","StyleSheet","opacity","ref","drawerBackgroundColor","ThemeColors","overlayColor","render","navigationConfig","gestureHandlerProps","drawerGestureRef","backgroundColor","width","renderContent","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Dimensions, StyleSheet, ViewStyle } from 'react-native';\nimport {\n  SceneView,\n  ThemeColors,\n  ThemeContext,\n  NavigationScreenProp,\n} from 'react-navigation';\nimport { ScreenContainer, screensEnabled } from 'react-native-screens';\n\nimport * as DrawerActions from '../routers/DrawerActions';\nimport DrawerSidebar from './DrawerSidebar';\nimport DrawerGestureContext from '../utils/DrawerGestureContext';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport Drawer from './Drawer';\nimport {\n  NavigationDrawerState,\n  DrawerContentComponentProps,\n  SceneDescriptorMap,\n} from '../types';\nimport { PanGestureHandler } from 'react-native-gesture-handler';\n\ntype DrawerOptions = {\n  drawerBackgroundColor?: string;\n  overlayColor?: string;\n  minSwipeDistance?: number;\n  drawerPosition: 'left' | 'right';\n  drawerType: 'front' | 'back' | 'slide';\n  drawerLockMode?: 'unlocked' | 'locked-closed' | 'locked-open';\n  keyboardDismissMode?: 'on-drag' | 'none';\n  drawerWidth: number | (() => number);\n  statusBarAnimation: 'slide' | 'none' | 'fade';\n  onDrawerClose?: () => void;\n  onDrawerOpen?: () => void;\n  sceneContainerStyle?: ViewStyle;\n  edgeWidth: number;\n  hideStatusBar?: boolean;\n  style?: ViewStyle;\n  gestureHandlerProps?: React.ComponentProps<typeof PanGestureHandler>;\n};\n\ntype Props = {\n  lazy: boolean;\n  navigation: NavigationScreenProp<NavigationDrawerState>;\n  descriptors: SceneDescriptorMap;\n  navigationConfig: DrawerOptions & {\n    contentComponent?: React.ComponentType<DrawerContentComponentProps>;\n    unmountInactiveRoutes?: boolean;\n    contentOptions?: object;\n  };\n  screenProps: unknown;\n  detachInactiveScreens: boolean;\n};\n\ntype State = {\n  loaded: number[];\n  drawerWidth: number;\n};\n\n/**\n * Component that renders the drawer.\n */\nexport default class DrawerView extends React.PureComponent<Props, State> {\n  // eslint-disable-next-line react/sort-comp\n  static contextType = ThemeContext;\n  static defaultProps = {\n    lazy: true,\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    const { index } = nextProps.navigation.state;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(index)\n        ? prevState.loaded\n        : [...prevState.loaded, index],\n    };\n  }\n\n  state: State = {\n    loaded: [this.props.navigation.state.index],\n    drawerWidth:\n      typeof this.props.navigationConfig.drawerWidth === 'function'\n        ? this.props.navigationConfig.drawerWidth()\n        : this.props.navigationConfig.drawerWidth,\n  };\n\n  componentDidMount() {\n    // If drawerLockMode was set to `locked-open`, we should open the drawer on mount\n    if (this.getLockMode(this.props) === 'locked-open') {\n      this.handleDrawerOpen();\n    }\n\n    Dimensions.addEventListener('change', this.updateWidth);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const prevLockMode = this.getLockMode(prevProps);\n    const nextLockMode = this.getLockMode(this.props);\n\n    if (prevLockMode !== nextLockMode) {\n      if (nextLockMode === 'locked-open') {\n        this.handleDrawerOpen();\n      } else {\n        this.handleDrawerClose();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    Dimensions.removeEventListener('change', this.updateWidth);\n  }\n\n  context!: React.ContextType<typeof ThemeContext>;\n\n  private drawerGestureRef = React.createRef<PanGestureHandler>();\n\n  private getLockMode = ({ navigation, descriptors }: Props) => {\n    const activeKey = navigation.state.routes[navigation.state.index].key;\n    const { drawerLockMode } = descriptors[activeKey].options;\n\n    return drawerLockMode;\n  };\n\n  private handleDrawerOpen = () => {\n    const { navigation } = this.props;\n\n    navigation.dispatch(\n      DrawerActions.openDrawer({\n        key: navigation.state.key,\n      })\n    );\n  };\n\n  private handleDrawerClose = () => {\n    const { navigation } = this.props;\n\n    navigation.dispatch(\n      DrawerActions.closeDrawer({\n        key: navigation.state.key,\n      })\n    );\n  };\n\n  private updateWidth = () => {\n    const drawerWidth =\n      typeof this.props.navigationConfig.drawerWidth === 'function'\n        ? this.props.navigationConfig.drawerWidth()\n        : this.props.navigationConfig.drawerWidth;\n\n    if (this.state.drawerWidth !== drawerWidth) {\n      this.setState({ drawerWidth });\n    }\n  };\n\n  private renderNavigationView = ({ progress }: any) => {\n    return (\n      <DrawerSidebar\n        screenProps={this.props.screenProps}\n        drawerOpenProgress={progress}\n        navigation={this.props.navigation}\n        descriptors={this.props.descriptors}\n        {...this.props.navigationConfig}\n      />\n    );\n  };\n\n  private renderContent = () => {\n    let { lazy, navigation, detachInactiveScreens = true } = this.props;\n    let { loaded } = this.state;\n    let { routes } = navigation.state;\n\n    if (this.props.navigationConfig.unmountInactiveRoutes) {\n      let activeKey = navigation.state.routes[navigation.state.index].key;\n      let descriptor = this.props.descriptors[activeKey];\n\n      return (\n        <SceneView\n          navigation={descriptor.navigation}\n          screenProps={this.props.screenProps}\n          component={descriptor.getComponent()}\n        />\n      );\n    } else {\n      const enabled = screensEnabled?.() && detachInactiveScreens;\n\n      return (\n        // @ts-ignore\n        <ScreenContainer enabled={enabled} style={styles.content}>\n          {routes.map((route, index) => {\n            if (lazy && !loaded.includes(index)) {\n              // Don't render a screen if we've never navigated to it\n              return null;\n            }\n\n            let isFocused = navigation.state.index === index;\n            let descriptor = this.props.descriptors[route.key];\n\n            return (\n              <ResourceSavingScene\n                key={route.key}\n                style={[\n                  StyleSheet.absoluteFill,\n                  { opacity: isFocused ? 1 : 0 },\n                ]}\n                isVisible={isFocused}\n                enabled={detachInactiveScreens}\n              >\n                <SceneView\n                  navigation={descriptor.navigation}\n                  screenProps={this.props.screenProps}\n                  component={descriptor.getComponent()}\n                />\n              </ResourceSavingScene>\n            );\n          })}\n        </ScreenContainer>\n      );\n    }\n  };\n\n  private setDrawerGestureRef = (ref: PanGestureHandler | null) => {\n    // @ts-ignore\n    this.drawerGestureRef.current = ref;\n  };\n\n  private getDrawerBackgroundColor() {\n    const { drawerBackgroundColor } = this.props.navigationConfig;\n\n    if (drawerBackgroundColor) {\n      return typeof drawerBackgroundColor === 'string'\n        ? drawerBackgroundColor\n        : drawerBackgroundColor[this.context];\n    } else {\n      return ThemeColors[this.context].bodyContent;\n    }\n  }\n\n  private getOverlayColor() {\n    const { overlayColor } = this.props.navigationConfig;\n\n    if (overlayColor) {\n      return typeof overlayColor === 'string'\n        ? overlayColor\n        : overlayColor[this.context];\n    } else {\n      return 'rgba(0,0,0,0.5)';\n    }\n  }\n\n  render() {\n    const { navigation, navigationConfig } = this.props;\n    const {\n      drawerType,\n      sceneContainerStyle,\n      edgeWidth,\n      minSwipeDistance,\n      hideStatusBar,\n      statusBarAnimation,\n      gestureHandlerProps,\n    } = navigationConfig;\n\n    const drawerLockMode = this.getLockMode(this.props);\n    const drawerBackgroundColor = this.getDrawerBackgroundColor();\n    const overlayColor = this.getOverlayColor();\n\n    return (\n      <DrawerGestureContext.Provider value={this.drawerGestureRef}>\n        <Drawer\n          open={navigation.state.isDrawerOpen}\n          gestureEnabled={\n            drawerLockMode !== 'locked-open' &&\n            drawerLockMode !== 'locked-closed'\n          }\n          onOpen={this.handleDrawerOpen}\n          onClose={this.handleDrawerClose}\n          onGestureRef={this.setDrawerGestureRef}\n          gestureHandlerProps={gestureHandlerProps}\n          drawerType={drawerType}\n          drawerPosition={this.props.navigationConfig.drawerPosition}\n          sceneContainerStyle={sceneContainerStyle}\n          drawerStyle={{\n            backgroundColor: drawerBackgroundColor,\n            width: this.state.drawerWidth,\n          }}\n          overlayStyle={{ backgroundColor: overlayColor }}\n          swipeEdgeWidth={edgeWidth}\n          swipeDistanceThreshold={minSwipeDistance}\n          hideStatusBar={hideStatusBar}\n          statusBarAnimation={statusBarAnimation}\n          renderDrawerContent={this.renderNavigationView}\n          renderSceneContent={this.renderContent}\n        />\n      </DrawerGestureContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}