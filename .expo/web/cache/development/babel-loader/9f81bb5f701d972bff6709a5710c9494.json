{"ast":null,"code":"import * as NavigationActions from \"../NavigationActions\";\nimport invariant from \"../utils/invariant\";\n\nvar getNavigationActionCreators = function getNavigationActionCreators(route) {\n  return {\n    goBack: function goBack(key) {\n      var actualizedKey = key;\n\n      if (key === undefined && route.key) {\n        invariant(typeof route.key === 'string', 'key should be a string');\n        actualizedKey = route.key;\n      }\n\n      return NavigationActions.back({\n        key: actualizedKey\n      });\n    },\n    navigate: function navigate(navigateTo, params, action) {\n      if (typeof navigateTo === 'string') {\n        return NavigationActions.navigate({\n          routeName: navigateTo,\n          params: params,\n          action: action\n        });\n      }\n\n      invariant(typeof navigateTo === 'object', 'Must navigateTo an object or a string');\n      invariant(params == null, 'Params must not be provided to .navigate() when specifying an object');\n      invariant(action == null, 'Child action must not be provided to .navigate() when specifying an object');\n      return NavigationActions.navigate(navigateTo);\n    },\n    setParams: function setParams(params) {\n      invariant(route.key && typeof route.key === 'string', 'setParams cannot be called by root navigator');\n      return NavigationActions.setParams({\n        params: params,\n        key: route.key\n      });\n    }\n  };\n};\n\nexport default getNavigationActionCreators;","map":{"version":3,"sources":["getNavigationActionCreators.ts"],"names":["getNavigationActionCreators","route","goBack","key","actualizedKey","invariant","navigate","routeName","params","action","NavigationActions","setParams"],"mappings":"AAAA,OAAO,KAAP,iBAAA;AACA,OAAA,SAAA;;AAOA,IAAMA,2BAA2B,GAAIC,SAA/BD,2BAA+BC,CAAAA,KAAD,EAAgB;AAClD,SAAO;AACLC,IAAAA,MAAM,EAAGC,gBAAAA,GAAD,EAAyB;AAC/B,UAAIC,aAAa,GAAjB,GAAA;;AACA,UAAID,GAAG,KAAHA,SAAAA,IAAqBF,KAAK,CAA9B,GAAA,EAAoC;AAClCI,QAAAA,SAAS,CAAC,OAAOJ,KAAK,CAAZ,GAAA,KAAD,QAAA,EAATI,wBAAS,CAATA;AACAD,QAAAA,aAAa,GAAGH,KAAK,CAArBG,GAAAA;AACD;;AACD,aAAO,iBAAiB,CAAjB,IAAA,CAAuB;AAAED,QAAAA,GAAG,EAAEC;AAAP,OAAvB,CAAP;AAPG,KAAA;AASLE,IAAAA,QAAQ,EAAE,kBAAA,UAAA,EAAA,MAAA,EAAA,MAAA,EAIL;AACH,UAAI,OAAA,UAAA,KAAJ,QAAA,EAAoC;AAClC,eAAO,iBAAiB,CAAjB,QAAA,CAA2B;AAChCC,UAAAA,SAAS,EADuB,UAAA;AAEhCC,UAAAA,MAFgC,EAEhCA,MAFgC;AAGhCC,UAAAA,MAAAA,EAAAA;AAHgC,SAA3B,CAAP;AAKD;;AACDJ,MAAAA,SAAS,CACP,OAAA,UAAA,KADO,QAAA,EAATA,uCAAS,CAATA;AAIAA,MAAAA,SAAS,CACPG,MAAM,IADC,IAAA,EAATH,sEAAS,CAATA;AAIAA,MAAAA,SAAS,CACPI,MAAM,IADC,IAAA,EAATJ,4EAAS,CAATA;AAIA,aAAOK,iBAAiB,CAAjBA,QAAAA,CAAP,UAAOA,CAAP;AAjCG,KAAA;AAmCLC,IAAAA,SAAS,EAAGH,mBAAAA,MAAD,EAA+B;AACxCH,MAAAA,SAAS,CACPJ,KAAK,CAALA,GAAAA,IAAa,OAAOA,KAAK,CAAZ,GAAA,KADN,QAAA,EAATI,8CAAS,CAATA;AAIA,aAAO,iBAAiB,CAAjB,SAAA,CAA4B;AAAEG,QAAAA,MAAF,EAAEA,MAAF;AAAUL,QAAAA,GAAG,EAAEF,KAAK,CAACE;AAArB,OAA5B,CAAP;AACD;AAzCI,GAAP;AADF,CAAA;;AA8CA,eAAA,2BAAA","sourcesContent":["import * as NavigationActions from '../NavigationActions';\nimport invariant from '../utils/invariant';\n\ninterface NavigationParams {\n  [key: string]: any;\n}\n\n// TODO: Type `route`\nconst getNavigationActionCreators = (route: any) => {\n  return {\n    goBack: (key?: string | null) => {\n      let actualizedKey = key;\n      if (key === undefined && route.key) {\n        invariant(typeof route.key === 'string', 'key should be a string');\n        actualizedKey = route.key;\n      }\n      return NavigationActions.back({ key: actualizedKey });\n    },\n    navigate: (\n      navigateTo: string | NavigationActions.NavigationNavigateActionPayload,\n      params?: NavigationParams,\n      action?: NavigationActions.NavigationNavigateAction\n    ) => {\n      if (typeof navigateTo === 'string') {\n        return NavigationActions.navigate({\n          routeName: navigateTo,\n          params,\n          action,\n        });\n      }\n      invariant(\n        typeof navigateTo === 'object',\n        'Must navigateTo an object or a string'\n      );\n      invariant(\n        params == null,\n        'Params must not be provided to .navigate() when specifying an object'\n      );\n      invariant(\n        action == null,\n        'Child action must not be provided to .navigate() when specifying an object'\n      );\n      return NavigationActions.navigate(navigateTo);\n    },\n    setParams: (params?: NavigationParams) => {\n      invariant(\n        route.key && typeof route.key === 'string',\n        'setParams cannot be called by root navigator'\n      );\n      return NavigationActions.setParams({ params, key: route.key });\n    },\n  };\n};\n\nexport default getNavigationActionCreators;\n"]},"metadata":{},"sourceType":"module"}