{"ast":null,"code":"import invariant from 'fbjs/lib/invariant';\nimport requestIdleCallback, { cancelIdleCallback } from \"../../modules/requestIdleCallback\";\nvar InteractionManager = {\n  Events: {\n    interactionStart: 'interactionStart',\n    interactionComplete: 'interactionComplete'\n  },\n  runAfterInteractions: function runAfterInteractions(task) {\n    var handle;\n    var promise = new Promise(function (resolve) {\n      handle = requestIdleCallback(function () {\n        if (task) {\n          resolve(task());\n        } else {\n          resolve();\n        }\n      });\n    });\n    return {\n      then: promise.then.bind(promise),\n      done: promise.then.bind(promise),\n      cancel: function cancel() {\n        cancelIdleCallback(handle);\n      }\n    };\n  },\n  createInteractionHandle: function createInteractionHandle() {\n    return 1;\n  },\n  clearInteractionHandle: function clearInteractionHandle(handle) {\n    invariant(!!handle, 'Must provide a handle to clear.');\n  },\n  addListener: function addListener() {}\n};\nexport default InteractionManager;","map":{"version":3,"sources":["C:/learning/Group-Project/node_modules/react-native-web/dist/exports/InteractionManager/index.js"],"names":["invariant","requestIdleCallback","cancelIdleCallback","InteractionManager","Events","interactionStart","interactionComplete","runAfterInteractions","task","handle","promise","Promise","resolve","then","bind","done","cancel","createInteractionHandle","clearInteractionHandle","addListener"],"mappings":"AASA,OAAOA,SAAP,MAAsB,oBAAtB;AACA,OAAOC,mBAAP,IAA8BC,kBAA9B;AACA,IAAIC,kBAAkB,GAAG;AACvBC,EAAAA,MAAM,EAAE;AACNC,IAAAA,gBAAgB,EAAE,kBADZ;AAENC,IAAAA,mBAAmB,EAAE;AAFf,GADe;AASvBC,EAAAA,oBAAoB,EAAE,SAASA,oBAAT,CAA8BC,IAA9B,EAAoC;AACxD,QAAIC,MAAJ;AACA,QAAIC,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmB;AAC3CH,MAAAA,MAAM,GAAGR,mBAAmB,CAAC,YAAY;AACvC,YAAIO,IAAJ,EAAU;AACRI,UAAAA,OAAO,CAACJ,IAAI,EAAL,CAAP;AACD,SAFD,MAEO;AACLI,UAAAA,OAAO;AACR;AACF,OAN2B,CAA5B;AAOD,KARa,CAAd;AASA,WAAO;AACLC,MAAAA,IAAI,EAAEH,OAAO,CAACG,IAAR,CAAaC,IAAb,CAAkBJ,OAAlB,CADD;AAELK,MAAAA,IAAI,EAAEL,OAAO,CAACG,IAAR,CAAaC,IAAb,CAAkBJ,OAAlB,CAFD;AAGLM,MAAAA,MAAM,EAAE,SAASA,MAAT,GAAkB;AACxBd,QAAAA,kBAAkB,CAACO,MAAD,CAAlB;AACD;AALI,KAAP;AAOD,GA3BsB;AAgCvBQ,EAAAA,uBAAuB,EAAE,SAASA,uBAAT,GAAmC;AAC1D,WAAO,CAAP;AACD,GAlCsB;AAuCvBC,EAAAA,sBAAsB,EAAE,SAASA,sBAAT,CAAgCT,MAAhC,EAAwC;AAC9DT,IAAAA,SAAS,CAAC,CAAC,CAACS,MAAH,EAAW,iCAAX,CAAT;AACD,GAzCsB;AA0CvBU,EAAAA,WAAW,EAAE,SAASA,WAAT,GAAuB,CAAE;AA1Cf,CAAzB;AA4CA,eAAehB,kBAAf","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport invariant from 'fbjs/lib/invariant';\nimport requestIdleCallback, { cancelIdleCallback } from '../../modules/requestIdleCallback';\nvar InteractionManager = {\n  Events: {\n    interactionStart: 'interactionStart',\n    interactionComplete: 'interactionComplete'\n  },\n\n  /**\n   * Schedule a function to run after all interactions have completed.\n   */\n  runAfterInteractions: function runAfterInteractions(task) {\n    var handle;\n    var promise = new Promise(function (resolve) {\n      handle = requestIdleCallback(function () {\n        if (task) {\n          resolve(task());\n        } else {\n          resolve();\n        }\n      });\n    });\n    return {\n      then: promise.then.bind(promise),\n      done: promise.then.bind(promise),\n      cancel: function cancel() {\n        cancelIdleCallback(handle);\n      }\n    };\n  },\n\n  /**\n   * Notify manager that an interaction has started.\n   */\n  createInteractionHandle: function createInteractionHandle() {\n    return 1;\n  },\n\n  /**\n   * Notify manager that an interaction has completed.\n   */\n  clearInteractionHandle: function clearInteractionHandle(handle) {\n    invariant(!!handle, 'Must provide a handle to clear.');\n  },\n  addListener: function addListener() {}\n};\nexport default InteractionManager;"]},"metadata":{},"sourceType":"module"}