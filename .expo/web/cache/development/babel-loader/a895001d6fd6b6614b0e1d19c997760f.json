{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"styleInterpolator\", \"index\", \"current\", \"gesture\", \"next\", \"layout\", \"insets\", \"overlay\", \"overlayEnabled\", \"shadowEnabled\", \"gestureEnabled\", \"gestureDirection\", \"pageOverflowEnabled\", \"children\", \"containerStyle\", \"contentStyle\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty2(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport Color from 'color';\nimport CardSheet from \"./CardSheet\";\nimport { PanGestureHandler, GestureState } from \"../GestureHandler\";\nimport CardAnimationContext from \"../../utils/CardAnimationContext\";\nimport getDistanceForDirection from \"../../utils/getDistanceForDirection\";\nimport getInvertedMultiplier from \"../../utils/getInvertedMultiplier\";\nimport memoize from \"../../utils/memoize\";\nvar GESTURE_VELOCITY_IMPACT = 0.3;\nvar TRUE = 1;\nvar FALSE = 0;\nvar GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nvar GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\nvar useNativeDriver = Platform.OS !== 'web';\n\nvar hasOpacityStyle = function hasOpacityStyle(style) {\n  if (style) {\n    var flattenedStyle = StyleSheet.flatten(style);\n    return flattenedStyle.opacity != null;\n  }\n\n  return false;\n};\n\nvar Card = function (_React$Component) {\n  _inherits(Card, _React$Component);\n\n  var _super = _createSuper(Card);\n\n  function Card() {\n    var _this;\n\n    _classCallCheck(this, Card);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"isCurrentlyMounted\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"isClosing\", new Animated.Value(FALSE));\n\n    _defineProperty(_assertThisInitialized(_this), \"inverted\", new Animated.Value(getInvertedMultiplier(_this.props.gestureDirection)));\n\n    _defineProperty(_assertThisInitialized(_this), \"layout\", {\n      width: new Animated.Value(_this.props.layout.width),\n      height: new Animated.Value(_this.props.layout.height)\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isSwiping\", new Animated.Value(FALSE));\n\n    _defineProperty(_assertThisInitialized(_this), \"interactionHandle\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"pendingGestureCallback\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"lastToValue\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"animate\", function (_ref) {\n      var closing = _ref.closing,\n          velocity = _ref.velocity;\n      var _this$props = _this.props,\n          gesture = _this$props.gesture,\n          transitionSpec = _this$props.transitionSpec,\n          onOpen = _this$props.onOpen,\n          onClose = _this$props.onClose,\n          onTransition = _this$props.onTransition;\n\n      var toValue = _this.getAnimateToValue(_objectSpread(_objectSpread({}, _this.props), {}, {\n        closing: closing\n      }));\n\n      _this.lastToValue = toValue;\n      var spec = closing ? transitionSpec.close : transitionSpec.open;\n      var animation = spec.animation === 'spring' ? Animated.spring : Animated.timing;\n\n      _this.setPointerEventsEnabled(!closing);\n\n      _this.handleStartInteraction();\n\n      clearTimeout(_this.pendingGestureCallback);\n      onTransition === null || onTransition === void 0 ? void 0 : onTransition({\n        closing: closing,\n        gesture: velocity !== undefined\n      });\n      animation(gesture, _objectSpread(_objectSpread({}, spec.config), {}, {\n        velocity: velocity,\n        toValue: toValue,\n        useNativeDriver: useNativeDriver,\n        isInteraction: false\n      })).start(function (_ref2) {\n        var finished = _ref2.finished;\n\n        _this.handleEndInteraction();\n\n        clearTimeout(_this.pendingGestureCallback);\n\n        if (finished) {\n          if (closing) {\n            onClose();\n          } else {\n            onOpen();\n          }\n\n          if (_this.isCurrentlyMounted) {\n            _this.forceUpdate();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getAnimateToValue\", function (_ref3) {\n      var closing = _ref3.closing,\n          layout = _ref3.layout,\n          gestureDirection = _ref3.gestureDirection;\n\n      if (!closing) {\n        return 0;\n      }\n\n      return getDistanceForDirection(layout, gestureDirection);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setPointerEventsEnabled\", function (enabled) {\n      var _this$contentRef$curr;\n\n      var pointerEvents = enabled ? 'box-none' : 'none';\n      (_this$contentRef$curr = _this.contentRef.current) === null || _this$contentRef$curr === void 0 ? void 0 : _this$contentRef$curr.setNativeProps({\n        pointerEvents: pointerEvents\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleStartInteraction\", function () {\n      if (_this.interactionHandle === undefined) {\n        _this.interactionHandle = InteractionManager.createInteractionHandle();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleEndInteraction\", function () {\n      if (_this.interactionHandle !== undefined) {\n        InteractionManager.clearInteractionHandle(_this.interactionHandle);\n        _this.interactionHandle = undefined;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleGestureStateChange\", function (_ref4) {\n      var nativeEvent = _ref4.nativeEvent;\n      var _this$props2 = _this.props,\n          layout = _this$props2.layout,\n          onClose = _this$props2.onClose,\n          onGestureBegin = _this$props2.onGestureBegin,\n          onGestureCanceled = _this$props2.onGestureCanceled,\n          onGestureEnd = _this$props2.onGestureEnd,\n          gestureDirection = _this$props2.gestureDirection,\n          gestureVelocityImpact = _this$props2.gestureVelocityImpact;\n\n      switch (nativeEvent.state) {\n        case GestureState.BEGAN:\n          _this.isSwiping.setValue(TRUE);\n\n          _this.handleStartInteraction();\n\n          onGestureBegin === null || onGestureBegin === void 0 ? void 0 : onGestureBegin();\n          break;\n\n        case GestureState.CANCELLED:\n          {\n            _this.isSwiping.setValue(FALSE);\n\n            _this.handleEndInteraction();\n\n            var velocity = gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? nativeEvent.velocityY : nativeEvent.velocityX;\n\n            _this.animate({\n              closing: _this.props.closing,\n              velocity: velocity\n            });\n\n            onGestureCanceled === null || onGestureCanceled === void 0 ? void 0 : onGestureCanceled();\n            break;\n          }\n\n        case GestureState.END:\n          {\n            _this.isSwiping.setValue(FALSE);\n\n            var distance;\n            var translation;\n\n            var _velocity;\n\n            if (gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted') {\n              distance = layout.height;\n              translation = nativeEvent.translationY;\n              _velocity = nativeEvent.velocityY;\n            } else {\n              distance = layout.width;\n              translation = nativeEvent.translationX;\n              _velocity = nativeEvent.velocityX;\n            }\n\n            var closing = (translation + _velocity * gestureVelocityImpact) * getInvertedMultiplier(gestureDirection) > distance / 2 ? _velocity !== 0 || translation !== 0 : _this.props.closing;\n\n            _this.animate({\n              closing: closing,\n              velocity: _velocity\n            });\n\n            if (closing) {\n              _this.pendingGestureCallback = setTimeout(function () {\n                onClose();\n\n                _this.forceUpdate();\n              }, 32);\n            }\n\n            onGestureEnd === null || onGestureEnd === void 0 ? void 0 : onGestureEnd();\n            break;\n          }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getInterpolatedStyle\", memoize(function (styleInterpolator, index, current, next, layout, insetTop, insetRight, insetBottom, insetLeft) {\n      return styleInterpolator({\n        index: index,\n        current: {\n          progress: current\n        },\n        next: next && {\n          progress: next\n        },\n        closing: _this.isClosing,\n        swiping: _this.isSwiping,\n        inverted: _this.inverted,\n        layouts: {\n          screen: layout\n        },\n        insets: {\n          top: insetTop,\n          right: insetRight,\n          bottom: insetBottom,\n          left: insetLeft\n        }\n      });\n    }));\n\n    _defineProperty(_assertThisInitialized(_this), \"getCardAnimationContext\", memoize(function (index, current, next, layout, insetTop, insetRight, insetBottom, insetLeft) {\n      return {\n        index: index,\n        current: {\n          progress: current\n        },\n        next: next && {\n          progress: next\n        },\n        closing: _this.isClosing,\n        swiping: _this.isSwiping,\n        inverted: _this.inverted,\n        layouts: {\n          screen: layout\n        },\n        insets: {\n          top: insetTop,\n          right: insetRight,\n          bottom: insetBottom,\n          left: insetLeft\n        }\n      };\n    }));\n\n    _defineProperty(_assertThisInitialized(_this), \"contentRef\", React.createRef());\n\n    return _this;\n  }\n\n  _createClass(Card, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.animate({\n        closing: this.props.closing\n      });\n      this.isCurrentlyMounted = true;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props3 = this.props,\n          layout = _this$props3.layout,\n          gestureDirection = _this$props3.gestureDirection,\n          closing = _this$props3.closing;\n      var width = layout.width,\n          height = layout.height;\n\n      if (width !== prevProps.layout.width) {\n        this.layout.width.setValue(width);\n      }\n\n      if (height !== prevProps.layout.height) {\n        this.layout.height.setValue(height);\n      }\n\n      if (gestureDirection !== prevProps.gestureDirection) {\n        this.inverted.setValue(getInvertedMultiplier(gestureDirection));\n      }\n\n      var toValue = this.getAnimateToValue(this.props);\n\n      if (this.getAnimateToValue(prevProps) !== toValue || this.lastToValue !== toValue) {\n        this.animate({\n          closing: closing\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isCurrentlyMounted = false;\n      this.handleEndInteraction();\n    }\n  }, {\n    key: \"gestureActivationCriteria\",\n    value: function gestureActivationCriteria() {\n      var _this$props4 = this.props,\n          layout = _this$props4.layout,\n          gestureDirection = _this$props4.gestureDirection,\n          gestureResponseDistance = _this$props4.gestureResponseDistance;\n      var distance = gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? (gestureResponseDistance === null || gestureResponseDistance === void 0 ? void 0 : gestureResponseDistance.vertical) !== undefined ? gestureResponseDistance.vertical : GESTURE_RESPONSE_DISTANCE_VERTICAL : (gestureResponseDistance === null || gestureResponseDistance === void 0 ? void 0 : gestureResponseDistance.horizontal) !== undefined ? gestureResponseDistance.horizontal : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n\n      if (gestureDirection === 'vertical') {\n        return {\n          maxDeltaX: 15,\n          minOffsetY: 5,\n          hitSlop: {\n            bottom: -layout.height + distance\n          }\n        };\n      } else if (gestureDirection === 'vertical-inverted') {\n        return {\n          maxDeltaX: 15,\n          minOffsetY: -5,\n          hitSlop: {\n            top: -layout.height + distance\n          }\n        };\n      } else {\n        var hitSlop = -layout.width + distance;\n        var invertedMultiplier = getInvertedMultiplier(gestureDirection);\n\n        if (invertedMultiplier === 1) {\n          return {\n            minOffsetX: 5,\n            maxDeltaY: 20,\n            hitSlop: {\n              right: hitSlop\n            }\n          };\n        } else {\n          return {\n            minOffsetX: -5,\n            maxDeltaY: 20,\n            hitSlop: {\n              left: hitSlop\n            }\n          };\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n          styleInterpolator = _this$props5.styleInterpolator,\n          index = _this$props5.index,\n          current = _this$props5.current,\n          gesture = _this$props5.gesture,\n          next = _this$props5.next,\n          layout = _this$props5.layout,\n          insets = _this$props5.insets,\n          overlay = _this$props5.overlay,\n          overlayEnabled = _this$props5.overlayEnabled,\n          shadowEnabled = _this$props5.shadowEnabled,\n          gestureEnabled = _this$props5.gestureEnabled,\n          gestureDirection = _this$props5.gestureDirection,\n          pageOverflowEnabled = _this$props5.pageOverflowEnabled,\n          children = _this$props5.children,\n          customContainerStyle = _this$props5.containerStyle,\n          contentStyle = _this$props5.contentStyle,\n          rest = _objectWithoutProperties(_this$props5, _excluded);\n\n      var interpolatedStyle = this.getInterpolatedStyle(styleInterpolator, index, current, next, layout, insets.top, insets.right, insets.bottom, insets.left);\n      var animationContext = this.getCardAnimationContext(index, current, next, layout, insets.top, insets.right, insets.bottom, insets.left);\n      var containerStyle = interpolatedStyle.containerStyle,\n          cardStyle = interpolatedStyle.cardStyle,\n          overlayStyle = interpolatedStyle.overlayStyle,\n          shadowStyle = interpolatedStyle.shadowStyle;\n      var handleGestureEvent = gestureEnabled ? Animated.event([{\n        nativeEvent: gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? {\n          translationY: gesture\n        } : {\n          translationX: gesture\n        }\n      }], {\n        useNativeDriver: useNativeDriver\n      }) : undefined;\n\n      var _StyleSheet$flatten = StyleSheet.flatten(contentStyle || {}),\n          backgroundColor = _StyleSheet$flatten.backgroundColor;\n\n      var isTransparent = typeof backgroundColor === 'string' ? Color(backgroundColor).alpha() === 0 : false;\n      return React.createElement(CardAnimationContext.Provider, {\n        value: animationContext\n      }, React.createElement(Animated.View, {\n        style: {\n          opacity: current\n        },\n        collapsable: false\n      }), React.createElement(View, _extends({\n        pointerEvents: \"box-none\"\n      }, rest), overlayEnabled ? React.createElement(View, {\n        pointerEvents: \"box-none\",\n        style: StyleSheet.absoluteFill\n      }, overlay({\n        style: overlayStyle\n      })) : null, React.createElement(Animated.View, {\n        needsOffscreenAlphaCompositing: hasOpacityStyle(containerStyle),\n        style: [styles.container, containerStyle, customContainerStyle],\n        pointerEvents: \"box-none\"\n      }, React.createElement(PanGestureHandler, _extends({\n        enabled: layout.width !== 0 && gestureEnabled,\n        onGestureEvent: handleGestureEvent,\n        onHandlerStateChange: this.handleGestureStateChange\n      }, this.gestureActivationCriteria()), React.createElement(Animated.View, {\n        style: [styles.container, cardStyle]\n      }, shadowEnabled && shadowStyle && !isTransparent ? React.createElement(Animated.View, {\n        style: [styles.shadow, gestureDirection === 'horizontal' ? [styles.shadowHorizontal, styles.shadowLeft] : gestureDirection === 'horizontal-inverted' ? [styles.shadowHorizontal, styles.shadowRight] : gestureDirection === 'vertical' ? [styles.shadowVertical, styles.shadowTop] : [styles.shadowVertical, styles.shadowBottom], {\n          backgroundColor: backgroundColor\n        }, shadowStyle],\n        pointerEvents: \"none\"\n      }) : null, React.createElement(CardSheet, {\n        ref: this.contentRef,\n        enabled: pageOverflowEnabled,\n        layout: layout,\n        style: contentStyle\n      }, children))))));\n    }\n  }]);\n\n  return Card;\n}(React.Component);\n\nexport { Card as default };\n\n_defineProperty(Card, \"defaultProps\", {\n  overlayEnabled: Platform.OS !== 'ios',\n  shadowEnabled: true,\n  gestureEnabled: true,\n  gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n  overlay: function overlay(_ref5) {\n    var style = _ref5.style;\n    return style ? React.createElement(Animated.View, {\n      pointerEvents: \"none\",\n      style: [styles.overlay, style]\n    }) : null;\n  }\n});\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: '#000'\n  },\n  shadow: {\n    position: 'absolute',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3\n  },\n  shadowHorizontal: {\n    top: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: {\n      width: -1,\n      height: 1\n    }\n  },\n  shadowLeft: {\n    left: 0\n  },\n  shadowRight: {\n    right: 0\n  },\n  shadowVertical: {\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: {\n      width: 1,\n      height: -1\n    }\n  },\n  shadowTop: {\n    top: 0\n  },\n  shadowBottom: {\n    bottom: 0\n  }\n});","map":{"version":3,"sources":["Card.tsx"],"names":["GESTURE_VELOCITY_IMPACT","TRUE","FALSE","GESTURE_RESPONSE_DISTANCE_HORIZONTAL","GESTURE_RESPONSE_DISTANCE_VERTICAL","useNativeDriver","Platform","hasOpacityStyle","style","flattenedStyle","StyleSheet","Card","React","overlayEnabled","shadowEnabled","gestureEnabled","gestureVelocityImpact","overlay","styles","componentDidMount","closing","componentDidUpdate","height","width","prevProps","gestureDirection","getInvertedMultiplier","toValue","componentWillUnmount","Animated","velocity","onTransition","spec","transitionSpec","animation","clearTimeout","gesture","undefined","isInteraction","finished","onClose","onOpen","getDistanceForDirection","enabled","pointerEvents","InteractionManager","nativeEvent","GestureState","onGestureBegin","onGestureCanceled","distance","layout","translation","setTimeout","onGestureEnd","memoize","styleInterpolator","index","current","progress","next","swiping","inverted","layouts","screen","insets","top","right","bottom","left","insetLeft","gestureResponseDistance","maxDeltaX","minOffsetY","hitSlop","invertedMultiplier","minOffsetX","maxDeltaY","render","containerStyle","rest","interpolatedStyle","animationContext","shadowStyle","handleGestureEvent","translationY","translationX","backgroundColor","contentStyle","isTransparent","Color","opacity","absoluteFill","overlayStyle","handleGestureStateChange","container","flex","shadow","position","shadowRadius","shadowColor","shadowOpacity","shadowHorizontal","shadowOffset","shadowLeft","shadowRight","shadowVertical","shadowTop","shadowBottom"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  StyleSheet,\n  ViewProps,\n  StyleProp,\n  ViewStyle,\n  Platform,\n  InteractionManager,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\nimport Color from 'color';\n\nimport CardSheet from './CardSheet';\nimport {\n  PanGestureHandler,\n  GestureState,\n  PanGestureHandlerGestureEvent,\n} from '../GestureHandler';\nimport CardAnimationContext from '../../utils/CardAnimationContext';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport getInvertedMultiplier from '../../utils/getInvertedMultiplier';\nimport memoize from '../../utils/memoize';\nimport type {\n  TransitionSpec,\n  StackCardStyleInterpolator,\n  GestureDirection,\n  Layout,\n} from '../../types';\n\ntype Props = ViewProps & {\n  index: number;\n  closing: boolean;\n  next?: Animated.AnimatedInterpolation;\n  current: Animated.AnimatedInterpolation;\n  gesture: Animated.Value;\n  layout: Layout;\n  insets: EdgeInsets;\n  pageOverflowEnabled: boolean;\n  gestureDirection: GestureDirection;\n  onOpen: () => void;\n  onClose: () => void;\n  onTransition?: (props: { closing: boolean; gesture: boolean }) => void;\n  onGestureBegin?: () => void;\n  onGestureCanceled?: () => void;\n  onGestureEnd?: () => void;\n  children: React.ReactNode;\n  overlay: (props: {\n    style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  }) => React.ReactNode;\n  overlayEnabled: boolean;\n  shadowEnabled: boolean;\n  gestureEnabled: boolean;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  gestureVelocityImpact: number;\n  transitionSpec: {\n    open: TransitionSpec;\n    close: TransitionSpec;\n  };\n  styleInterpolator: StackCardStyleInterpolator;\n  containerStyle?: StyleProp<ViewStyle>;\n  contentStyle?: StyleProp<ViewStyle>;\n};\n\nconst GESTURE_VELOCITY_IMPACT = 0.3;\n\nconst TRUE = 1;\nconst FALSE = 0;\n\n/**\n * The distance of touch start from the edge of the screen where the gesture will be recognized\n */\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\n\nconst useNativeDriver = Platform.OS !== 'web';\n\nconst hasOpacityStyle = (style: any) => {\n  if (style) {\n    const flattenedStyle = StyleSheet.flatten(style);\n    return flattenedStyle.opacity != null;\n  }\n\n  return false;\n};\n\nexport default class Card extends React.Component<Props> {\n  static defaultProps = {\n    overlayEnabled: Platform.OS !== 'ios',\n    shadowEnabled: true,\n    gestureEnabled: true,\n    gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n    overlay: ({\n      style,\n    }: {\n      style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n    }) =>\n      style ? (\n        <Animated.View pointerEvents=\"none\" style={[styles.overlay, style]} />\n      ) : null,\n  };\n\n  componentDidMount() {\n    this.animate({ closing: this.props.closing });\n    this.isCurrentlyMounted = true;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { layout, gestureDirection, closing } = this.props;\n    const { width, height } = layout;\n\n    if (width !== prevProps.layout.width) {\n      this.layout.width.setValue(width);\n    }\n\n    if (height !== prevProps.layout.height) {\n      this.layout.height.setValue(height);\n    }\n\n    if (gestureDirection !== prevProps.gestureDirection) {\n      this.inverted.setValue(getInvertedMultiplier(gestureDirection));\n    }\n\n    const toValue = this.getAnimateToValue(this.props);\n\n    if (\n      this.getAnimateToValue(prevProps) !== toValue ||\n      this.lastToValue !== toValue\n    ) {\n      // We need to trigger the animation when route was closed\n      // Thr route might have been closed by a `POP` action or by a gesture\n      // When route was closed due to a gesture, the animation would've happened already\n      // It's still important to trigger the animation so that `onClose` is called\n      // If `onClose` is not called, cleanup step won't be performed for gestures\n      this.animate({ closing });\n    }\n  }\n\n  componentWillUnmount() {\n    this.isCurrentlyMounted = false;\n    this.handleEndInteraction();\n  }\n\n  private isCurrentlyMounted = false;\n\n  private isClosing = new Animated.Value(FALSE);\n\n  private inverted = new Animated.Value(\n    getInvertedMultiplier(this.props.gestureDirection)\n  );\n\n  private layout = {\n    width: new Animated.Value(this.props.layout.width),\n    height: new Animated.Value(this.props.layout.height),\n  };\n\n  private isSwiping = new Animated.Value(FALSE);\n\n  private interactionHandle: number | undefined;\n\n  private pendingGestureCallback: any;\n\n  private lastToValue: number | undefined;\n\n  private animate = ({\n    closing,\n    velocity,\n  }: {\n    closing: boolean;\n    velocity?: number;\n  }) => {\n    const {\n      gesture,\n      transitionSpec,\n      onOpen,\n      onClose,\n      onTransition,\n    } = this.props;\n\n    const toValue = this.getAnimateToValue({\n      ...this.props,\n      closing,\n    });\n\n    this.lastToValue = toValue;\n\n    const spec = closing ? transitionSpec.close : transitionSpec.open;\n\n    const animation =\n      spec.animation === 'spring' ? Animated.spring : Animated.timing;\n\n    this.setPointerEventsEnabled(!closing);\n    this.handleStartInteraction();\n\n    clearTimeout(this.pendingGestureCallback);\n\n    onTransition?.({ closing, gesture: velocity !== undefined });\n    animation(gesture, {\n      ...spec.config,\n      velocity,\n      toValue,\n      useNativeDriver,\n      isInteraction: false,\n    }).start(({ finished }) => {\n      this.handleEndInteraction();\n\n      clearTimeout(this.pendingGestureCallback);\n\n      if (finished) {\n        if (closing) {\n          onClose();\n        } else {\n          onOpen();\n        }\n\n        if (this.isCurrentlyMounted) {\n          // Make sure to re-open screen if it wasn't removed\n          this.forceUpdate();\n        }\n      }\n    });\n  };\n\n  private getAnimateToValue = ({\n    closing,\n    layout,\n    gestureDirection,\n  }: {\n    closing?: boolean;\n    layout: Layout;\n    gestureDirection: GestureDirection;\n  }) => {\n    if (!closing) {\n      return 0;\n    }\n\n    return getDistanceForDirection(layout, gestureDirection);\n  };\n\n  private setPointerEventsEnabled = (enabled: boolean) => {\n    const pointerEvents = enabled ? 'box-none' : 'none';\n\n    this.contentRef.current?.setNativeProps({ pointerEvents });\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleGestureStateChange = ({\n    nativeEvent,\n  }: PanGestureHandlerGestureEvent) => {\n    const {\n      layout,\n      onClose,\n      onGestureBegin,\n      onGestureCanceled,\n      onGestureEnd,\n      gestureDirection,\n      gestureVelocityImpact,\n    } = this.props;\n\n    switch (nativeEvent.state) {\n      case GestureState.BEGAN:\n        this.isSwiping.setValue(TRUE);\n        this.handleStartInteraction();\n        onGestureBegin?.();\n        break;\n      case GestureState.CANCELLED: {\n        this.isSwiping.setValue(FALSE);\n        this.handleEndInteraction();\n\n        const velocity =\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n            ? nativeEvent.velocityY\n            : nativeEvent.velocityX;\n\n        this.animate({ closing: this.props.closing, velocity });\n\n        onGestureCanceled?.();\n        break;\n      }\n      case GestureState.END: {\n        this.isSwiping.setValue(FALSE);\n\n        let distance;\n        let translation;\n        let velocity;\n\n        if (\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n        ) {\n          distance = layout.height;\n          translation = nativeEvent.translationY;\n          velocity = nativeEvent.velocityY;\n        } else {\n          distance = layout.width;\n          translation = nativeEvent.translationX;\n          velocity = nativeEvent.velocityX;\n        }\n\n        const closing =\n          (translation + velocity * gestureVelocityImpact) *\n            getInvertedMultiplier(gestureDirection) >\n          distance / 2\n            ? velocity !== 0 || translation !== 0\n            : this.props.closing;\n\n        this.animate({ closing, velocity });\n\n        if (closing) {\n          // We call onClose with a delay to make sure that the animation has already started\n          // This will make sure that the state update caused by this doesn't affect start of animation\n          this.pendingGestureCallback = (setTimeout(() => {\n            onClose();\n\n            // Trigger an update after we dispatch the action to remove the screen\n            // This will make sure that we check if the screen didn't get removed so we can cancel the animation\n            this.forceUpdate();\n          }, 32) as any) as number;\n        }\n\n        onGestureEnd?.();\n        break;\n      }\n    }\n  };\n\n  // Memoize this to avoid extra work on re-render\n  private getInterpolatedStyle = memoize(\n    (\n      styleInterpolator: StackCardStyleInterpolator,\n      index: number,\n      current: Animated.AnimatedInterpolation,\n      next: Animated.AnimatedInterpolation | undefined,\n      layout: Layout,\n      insetTop: number,\n      insetRight: number,\n      insetBottom: number,\n      insetLeft: number\n    ) =>\n      styleInterpolator({\n        index,\n        current: { progress: current },\n        next: next && { progress: next },\n        closing: this.isClosing,\n        swiping: this.isSwiping,\n        inverted: this.inverted,\n        layouts: {\n          screen: layout,\n        },\n        insets: {\n          top: insetTop,\n          right: insetRight,\n          bottom: insetBottom,\n          left: insetLeft,\n        },\n      })\n  );\n\n  // Keep track of the animation context when deps changes.\n  private getCardAnimationContext = memoize(\n    (\n      index: number,\n      current: Animated.AnimatedInterpolation,\n      next: Animated.AnimatedInterpolation | undefined,\n      layout: Layout,\n      insetTop: number,\n      insetRight: number,\n      insetBottom: number,\n      insetLeft: number\n    ) => ({\n      index,\n      current: { progress: current },\n      next: next && { progress: next },\n      closing: this.isClosing,\n      swiping: this.isSwiping,\n      inverted: this.inverted,\n      layouts: {\n        screen: layout,\n      },\n      insets: {\n        top: insetTop,\n        right: insetRight,\n        bottom: insetBottom,\n        left: insetLeft,\n      },\n    })\n  );\n\n  private gestureActivationCriteria() {\n    const { layout, gestureDirection, gestureResponseDistance } = this.props;\n\n    const distance =\n      gestureDirection === 'vertical' ||\n      gestureDirection === 'vertical-inverted'\n        ? gestureResponseDistance?.vertical !== undefined\n          ? gestureResponseDistance.vertical\n          : GESTURE_RESPONSE_DISTANCE_VERTICAL\n        : gestureResponseDistance?.horizontal !== undefined\n        ? gestureResponseDistance.horizontal\n        : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n\n    if (gestureDirection === 'vertical') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: 5,\n        hitSlop: { bottom: -layout.height + distance },\n      };\n    } else if (gestureDirection === 'vertical-inverted') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: -5,\n        hitSlop: { top: -layout.height + distance },\n      };\n    } else {\n      const hitSlop = -layout.width + distance;\n      const invertedMultiplier = getInvertedMultiplier(gestureDirection);\n\n      if (invertedMultiplier === 1) {\n        return {\n          minOffsetX: 5,\n          maxDeltaY: 20,\n          hitSlop: { right: hitSlop },\n        };\n      } else {\n        return {\n          minOffsetX: -5,\n          maxDeltaY: 20,\n          hitSlop: { left: hitSlop },\n        };\n      }\n    }\n  }\n\n  private contentRef = React.createRef<View>();\n\n  render() {\n    const {\n      styleInterpolator,\n      index,\n      current,\n      gesture,\n      next,\n      layout,\n      insets,\n      overlay,\n      overlayEnabled,\n      shadowEnabled,\n      gestureEnabled,\n      gestureDirection,\n      pageOverflowEnabled,\n      children,\n      containerStyle: customContainerStyle,\n      contentStyle,\n      ...rest\n    } = this.props;\n\n    const interpolatedStyle = this.getInterpolatedStyle(\n      styleInterpolator,\n      index,\n      current,\n      next,\n      layout,\n      insets.top,\n      insets.right,\n      insets.bottom,\n      insets.left\n    );\n\n    const animationContext = this.getCardAnimationContext(\n      index,\n      current,\n      next,\n      layout,\n      insets.top,\n      insets.right,\n      insets.bottom,\n      insets.left\n    );\n\n    const {\n      containerStyle,\n      cardStyle,\n      overlayStyle,\n      shadowStyle,\n    } = interpolatedStyle;\n\n    const handleGestureEvent = gestureEnabled\n      ? Animated.event(\n          [\n            {\n              nativeEvent:\n                gestureDirection === 'vertical' ||\n                gestureDirection === 'vertical-inverted'\n                  ? { translationY: gesture }\n                  : { translationX: gesture },\n            },\n          ],\n          { useNativeDriver }\n        )\n      : undefined;\n\n    const { backgroundColor } = StyleSheet.flatten(contentStyle || {});\n    const isTransparent =\n      typeof backgroundColor === 'string'\n        ? Color(backgroundColor).alpha() === 0\n        : false;\n\n    return (\n      <CardAnimationContext.Provider value={animationContext}>\n        <Animated.View\n          style={{\n            // This is a dummy style that doesn't actually change anything visually.\n            // Animated needs the animated value to be used somewhere, otherwise things don't update properly.\n            // If we disable animations and hide header, it could end up making the value unused.\n            // So we have this dummy style that will always be used regardless of what else changed.\n            opacity: current,\n          }}\n          // Make sure that this view isn't removed. If this view is removed, our style with animated value won't apply\n          collapsable={false}\n        />\n        <View pointerEvents=\"box-none\" {...rest}>\n          {overlayEnabled ? (\n            <View pointerEvents=\"box-none\" style={StyleSheet.absoluteFill}>\n              {overlay({ style: overlayStyle })}\n            </View>\n          ) : null}\n          <Animated.View\n            needsOffscreenAlphaCompositing={hasOpacityStyle(containerStyle)}\n            style={[styles.container, containerStyle, customContainerStyle]}\n            pointerEvents=\"box-none\"\n          >\n            <PanGestureHandler\n              enabled={layout.width !== 0 && gestureEnabled}\n              onGestureEvent={handleGestureEvent}\n              onHandlerStateChange={this.handleGestureStateChange}\n              {...this.gestureActivationCriteria()}\n            >\n              <Animated.View style={[styles.container, cardStyle]}>\n                {shadowEnabled && shadowStyle && !isTransparent ? (\n                  <Animated.View\n                    style={[\n                      styles.shadow,\n                      gestureDirection === 'horizontal'\n                        ? [styles.shadowHorizontal, styles.shadowLeft]\n                        : gestureDirection === 'horizontal-inverted'\n                        ? [styles.shadowHorizontal, styles.shadowRight]\n                        : gestureDirection === 'vertical'\n                        ? [styles.shadowVertical, styles.shadowTop]\n                        : [styles.shadowVertical, styles.shadowBottom],\n                      { backgroundColor },\n                      shadowStyle,\n                    ]}\n                    pointerEvents=\"none\"\n                  />\n                ) : null}\n                <CardSheet\n                  ref={this.contentRef}\n                  enabled={pageOverflowEnabled}\n                  layout={layout}\n                  style={contentStyle}\n                >\n                  {children}\n                </CardSheet>\n              </Animated.View>\n            </PanGestureHandler>\n          </Animated.View>\n        </View>\n      </CardAnimationContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: '#000',\n  },\n  shadow: {\n    position: 'absolute',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3,\n  },\n  shadowHorizontal: {\n    top: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: { width: -1, height: 1 },\n  },\n  shadowLeft: {\n    left: 0,\n  },\n  shadowRight: {\n    right: 0,\n  },\n  shadowVertical: {\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: { width: 1, height: -1 },\n  },\n  shadowTop: {\n    top: 0,\n  },\n  shadowBottom: {\n    bottom: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}