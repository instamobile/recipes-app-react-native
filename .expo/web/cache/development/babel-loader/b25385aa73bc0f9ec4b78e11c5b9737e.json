{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport invariant from 'fbjs/lib/invariant';\nimport { adapt } from \"../core/AnimatedBlock\";\nimport { val } from \"../val\";\nimport AnimatedNode from \"./AnimatedNode\";\n\nvar AnimatedCond = function (_AnimatedNode) {\n  _inherits(AnimatedCond, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedCond);\n\n  function AnimatedCond(condition, ifBlock, elseBlock) {\n    var _this;\n\n    _classCallCheck(this, AnimatedCond);\n\n    invariant(condition instanceof AnimatedNode, \"Reanimated: Animated.cond node first argument should be of type AnimatedNode but got \".concat(condition));\n    invariant(ifBlock instanceof AnimatedNode, \"Reanimated: Animated.cond node second argument should be of type AnimatedNode but got \".concat(ifBlock));\n    invariant(elseBlock instanceof AnimatedNode || elseBlock === undefined, \"Reanimated: Animated.cond node third argument should be of type AnimatedNode or should be undefined but got \".concat(elseBlock));\n    _this = _super.call(this, {\n      type: 'cond',\n      cond: condition,\n      ifBlock: ifBlock,\n      elseBlock: elseBlock\n    }, [condition, ifBlock, elseBlock]);\n\n    _defineProperty(_assertThisInitialized(_this), \"_condition\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_ifBlock\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_elseBlock\", void 0);\n\n    _this._condition = condition;\n    _this._ifBlock = ifBlock;\n    _this._elseBlock = elseBlock;\n    return _this;\n  }\n\n  _createClass(AnimatedCond, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedCond, id: \".concat(this.__nodeID);\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      if (val(this._condition)) {\n        return val(this._ifBlock);\n      } else {\n        return this._elseBlock !== undefined ? val(this._elseBlock) : undefined;\n      }\n    }\n  }]);\n\n  return AnimatedCond;\n}(AnimatedNode);\n\nexport function createAnimatedCond(cond, ifBlock, elseBlock) {\n  return new AnimatedCond(adapt(cond), adapt(ifBlock), elseBlock === undefined ? undefined : adapt(elseBlock));\n}","map":{"version":3,"sources":["AnimatedCond.js"],"names":["constructor","invariant","condition","ifBlock","elseBlock","type","cond","toString","__onEvaluate","val","adapt"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,SAAA,MAAA,oBAAA;AACA,SAAA,KAAA;AACA,SAAA,GAAA;AACA,OAAA,YAAA;;IAEA,Y;;;;;AAKEA,wBAAW,SAAXA,EAAW,OAAXA,EAAW,SAAXA,EAA2C;AAAA;;AAAA;;AACzCC,IAAAA,SAAS,CACPC,SAAS,YADF,YAAA,EAAA,wFAAA,MAAA,CAATD,SAAS,CAAA,CAATA;AAIAA,IAAAA,SAAS,CACPE,OAAO,YADA,YAAA,EAAA,yFAAA,MAAA,CAATF,OAAS,CAAA,CAATA;AAIAA,IAAAA,SAAS,CACPG,SAAS,YAATA,YAAAA,IAAqCA,SAAS,KADvC,SAAA,EAAA,+GAAA,MAAA,CAATH,SAAS,CAAA,CAATA;AAIA,8BACE;AACEI,MAAAA,IAAI,EADN,MAAA;AAEEC,MAAAA,IAAI,EAFN,SAAA;AAGEH,MAAAA,OAHF,EAGEA,OAHF;AAIEC,MAAAA,SAAAA,EAAAA;AAJF,KADF,EAOE,CAAA,SAAA,EAAA,OAAA,EAPF,SAOE,CAPF;;AAbyC,IAAA,eAAA,gCAAA,YAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,gCAAA,UAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,gCAAA,YAAA,EAAA,KAAA,CAAA,CAAA;;AAsBzC,UAAA,UAAA,GAAA,SAAA;AACA,UAAA,QAAA,GAAA,OAAA;AACA,UAAA,UAAA,GAAA,SAAA;AAxByC;AAyB1C;;;;WAEDG,oBAAW;AACT,aAAA,qBAAA,MAAA,CAA4B,KAA5B,QAAA,CAAA;AACD;;;WAEDC,wBAAe;AACb,UAAIC,GAAG,CAAC,KAAR,UAAO,CAAP,EAA0B;AACxB,eAAOA,GAAG,CAAC,KAAX,QAAU,CAAV;AADF,OAAA,MAEO;AACL,eAAO,KAAA,UAAA,KAAA,SAAA,GAAgCA,GAAG,CAAC,KAApC,UAAmC,CAAnC,GAAP,SAAA;AACD;AACF;;;;EA1CH,Y;;AA6CA,OAAO,SAAA,kBAAA,CAAA,IAAA,EAAA,OAAA,EAAA,SAAA,EAAsD;AAC3D,SAAO,IAAA,YAAA,CACLC,KAAK,CADA,IACA,CADA,EAELA,KAAK,CAFA,OAEA,CAFA,EAGLN,SAAS,KAATA,SAAAA,GAAAA,SAAAA,GAAsCM,KAAK,CAH7C,SAG6C,CAHtC,CAAP;AAKD","sourcesContent":["import invariant from 'fbjs/lib/invariant';\nimport { adapt } from '../core/AnimatedBlock';\nimport { val } from '../val';\nimport AnimatedNode from './AnimatedNode';\n\nclass AnimatedCond extends AnimatedNode {\n  _condition;\n  _ifBlock;\n  _elseBlock;\n\n  constructor(condition, ifBlock, elseBlock) {\n    invariant(\n      condition instanceof AnimatedNode,\n      `Reanimated: Animated.cond node first argument should be of type AnimatedNode but got ${condition}`\n    );\n    invariant(\n      ifBlock instanceof AnimatedNode,\n      `Reanimated: Animated.cond node second argument should be of type AnimatedNode but got ${ifBlock}`\n    );\n    invariant(\n      elseBlock instanceof AnimatedNode || elseBlock === undefined,\n      `Reanimated: Animated.cond node third argument should be of type AnimatedNode or should be undefined but got ${elseBlock}`\n    );\n    super(\n      {\n        type: 'cond',\n        cond: condition,\n        ifBlock,\n        elseBlock,\n      },\n      [condition, ifBlock, elseBlock]\n    );\n    this._condition = condition;\n    this._ifBlock = ifBlock;\n    this._elseBlock = elseBlock;\n  }\n\n  toString() {\n    return `AnimatedCond, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    if (val(this._condition)) {\n      return val(this._ifBlock);\n    } else {\n      return this._elseBlock !== undefined ? val(this._elseBlock) : undefined;\n    }\n  }\n}\n\nexport function createAnimatedCond(cond, ifBlock, elseBlock) {\n  return new AnimatedCond(\n    adapt(cond),\n    adapt(ifBlock),\n    elseBlock === undefined ? undefined : adapt(elseBlock)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}