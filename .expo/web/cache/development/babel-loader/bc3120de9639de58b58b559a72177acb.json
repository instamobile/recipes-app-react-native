{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport ReanimatedModule from \"../ReanimatedModule\";\nimport AnimatedNode from \"./AnimatedNode\";\nimport InternalAnimatedValue from \"./AnimatedValue\";\nimport { createAnimatedAlways } from \"./AnimatedAlways\";\nimport invariant from 'fbjs/lib/invariant';\nimport createEventObjectProxyPolyfill from \"./createEventObjectProxyPolyfill\";\n\nfunction sanitizeArgMapping(argMapping) {\n  var eventMappings = [];\n  var alwaysNodes = [];\n\n  var getNode = function getNode(node) {\n    if (Platform.OS === 'web' || Platform.OS === 'windows' || Platform.OS === 'macos') {\n      return node;\n    }\n\n    return node.__nodeID;\n  };\n\n  var traverse = function traverse(value, path) {\n    if (value instanceof InternalAnimatedValue) {\n      eventMappings.push(path.concat(getNode(value)));\n    } else if (typeof value === 'object' && value.__val) {\n      eventMappings.push(path.concat(getNode(value.__val)));\n    } else if (typeof value === 'function') {\n      var node = new InternalAnimatedValue(0);\n      alwaysNodes.push(createAnimatedAlways(value(node)));\n      eventMappings.push(path.concat(getNode(node)));\n    } else if (typeof value === 'object') {\n      for (var key in value) {\n        traverse(value[key], path.concat(key));\n      }\n    }\n  };\n\n  invariant(argMapping[0] && argMapping[0].nativeEvent, 'Native driven events only support animated values contained inside `nativeEvent`.');\n  var ev = argMapping[0].nativeEvent;\n\n  if (typeof ev === 'object') {\n    traverse(ev, []);\n  } else if (typeof ev === 'function') {\n    var proxyHandler = {\n      get: function get(target, name) {\n        if (name === '__isProxy') {\n          return true;\n        }\n\n        if (!target[name] && name !== '__val') {\n          target[name] = new Proxy({}, proxyHandler);\n        }\n\n        return target[name];\n      },\n      set: function set(target, prop, value) {\n        if (prop === '__val') {\n          target[prop] = value;\n          return true;\n        }\n\n        return false;\n      }\n    };\n    var proxy = typeof Proxy === 'function' ? new Proxy({}, proxyHandler) : createEventObjectProxyPolyfill();\n    alwaysNodes.push(createAnimatedAlways(ev(proxy)));\n    traverse(proxy, []);\n  }\n\n  return {\n    eventMappings: eventMappings,\n    alwaysNodes: alwaysNodes\n  };\n}\n\nvar AnimatedEvent = function (_AnimatedNode) {\n  _inherits(AnimatedEvent, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedEvent);\n\n  function AnimatedEvent(argMapping) {\n    var _this;\n\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, AnimatedEvent);\n\n    var _sanitizeArgMapping = sanitizeArgMapping(argMapping),\n        eventMappings = _sanitizeArgMapping.eventMappings,\n        alwaysNodes = _sanitizeArgMapping.alwaysNodes;\n\n    _this = _super.call(this, {\n      type: 'event',\n      argMapping: eventMappings\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"__isNative\", true);\n\n    _this._alwaysNodes = alwaysNodes;\n    return _this;\n  }\n\n  _createClass(AnimatedEvent, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedEvent, id: \".concat(this.__nodeID);\n    }\n  }, {\n    key: \"attachEvent\",\n    value: function attachEvent(viewRef, eventName) {\n      for (var i = 0; i < this._alwaysNodes.length; i++) {\n        this._alwaysNodes[i].__attach();\n      }\n\n      this.__attach();\n\n      var viewTag = findNodeHandle(viewRef);\n      ReanimatedModule.attachEvent(viewTag, eventName, this.__nodeID);\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      return 0;\n    }\n  }, {\n    key: \"detachEvent\",\n    value: function detachEvent(viewRef, eventName) {\n      for (var i = 0; i < this._alwaysNodes.length; i++) {\n        this._alwaysNodes[i].isNativelyInitialized() && this._alwaysNodes[i].__detach();\n      }\n\n      var viewTag = findNodeHandle(viewRef);\n      ReanimatedModule.detachEvent(viewTag, eventName, this.__nodeID);\n\n      this.__detach();\n    }\n  }]);\n\n  return AnimatedEvent;\n}(AnimatedNode);\n\nexport { AnimatedEvent as default };\nexport function createAnimatedEvent(argMapping, config) {\n  return new AnimatedEvent(argMapping, config);\n}","map":{"version":3,"sources":["AnimatedEvent.js"],"names":["eventMappings","alwaysNodes","getNode","node","Platform","traverse","value","path","createAnimatedAlways","invariant","argMapping","ev","proxyHandler","get","name","target","set","prop","proxy","createEventObjectProxyPolyfill","constructor","config","sanitizeArgMapping","type","toString","attachEvent","i","viewTag","findNodeHandle","ReanimatedModule","__onEvaluate","detachEvent"],"mappings":"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","sourcesContent":["import { Platform, findNodeHandle } from 'react-native';\nimport ReanimatedModule from '../ReanimatedModule';\n\nimport AnimatedNode from './AnimatedNode';\nimport InternalAnimatedValue from './AnimatedValue';\nimport { createAnimatedAlways } from './AnimatedAlways';\n\nimport invariant from 'fbjs/lib/invariant';\nimport createEventObjectProxyPolyfill from './createEventObjectProxyPolyfill';\n\nfunction sanitizeArgMapping(argMapping) {\n  // Find animated values in `argMapping` and create an array representing their\n  // key path inside the `nativeEvent` object. Ex.: ['contentOffset', 'x'].\n  const eventMappings = [];\n  const alwaysNodes = [];\n\n  const getNode = node => {\n    if (Platform.OS === 'web' || Platform.OS === 'windows' || Platform.OS === 'macos') {\n      return node;\n    }\n    return node.__nodeID;\n  };\n\n  const traverse = (value, path) => {\n    if (value instanceof InternalAnimatedValue) {\n      eventMappings.push(path.concat(getNode(value)));\n    } else if (typeof value === 'object' && value.__val) {\n      eventMappings.push(path.concat(getNode(value.__val)));\n    } else if (typeof value === 'function') {\n      const node = new InternalAnimatedValue(0);\n      alwaysNodes.push(createAnimatedAlways(value(node)));\n      eventMappings.push(path.concat(getNode(node)));\n    } else if (typeof value === 'object') {\n      for (const key in value) {\n        traverse(value[key], path.concat(key));\n      }\n    }\n  };\n\n  invariant(\n    argMapping[0] && argMapping[0].nativeEvent,\n    'Native driven events only support animated values contained inside `nativeEvent`.'\n  );\n\n  // Assume that the event containing `nativeEvent` is always the first argument.\n  const ev = argMapping[0].nativeEvent;\n  if (typeof ev === 'object') {\n    traverse(ev, []);\n  } else if (typeof ev === 'function') {\n    const proxyHandler = {\n      get: function(target, name) {\n        if (name === '__isProxy') {\n          return true;\n        }\n        if (!target[name] && name !== '__val') {\n          target[name] = new Proxy({}, proxyHandler);\n        }\n        return target[name];\n      },\n      set: function(target, prop, value) {\n        if (prop === '__val') {\n          target[prop] = value;\n          return true;\n        }\n        return false;\n      },\n    };\n\n    const proxy =\n      typeof Proxy === 'function'\n        ? new Proxy({}, proxyHandler)\n        : createEventObjectProxyPolyfill();\n    alwaysNodes.push(createAnimatedAlways(ev(proxy)));\n    traverse(proxy, []);\n  }\n\n  return { eventMappings, alwaysNodes };\n}\n\nexport default class AnimatedEvent extends AnimatedNode {\n  constructor(argMapping, config = {}) {\n    const { eventMappings, alwaysNodes } = sanitizeArgMapping(argMapping);\n    super({ type: 'event', argMapping: eventMappings });\n    this._alwaysNodes = alwaysNodes;\n  }\n\n  toString() {\n    return `AnimatedEvent, id: ${this.__nodeID}`;\n  }\n\n  // The below field is a temporary workaround to make AnimatedEvent object be recognized\n  // as Animated.event event callback and therefore filtered out from being send over the\n  // bridge which was causing the object to be frozen in JS.\n  __isNative = true;\n\n  attachEvent(viewRef, eventName) {\n    for (let i = 0; i < this._alwaysNodes.length; i++) {\n      this._alwaysNodes[i].__attach();\n    }\n    this.__attach();\n    const viewTag = findNodeHandle(viewRef);\n    ReanimatedModule.attachEvent(viewTag, eventName, this.__nodeID);\n  }\n\n  __onEvaluate() {\n    return 0;\n  }\n\n  detachEvent(viewRef, eventName) {\n    for (let i = 0; i < this._alwaysNodes.length; i++) {\n      this._alwaysNodes[i].isNativelyInitialized() &&\n        this._alwaysNodes[i].__detach();\n    }\n    const viewTag = findNodeHandle(viewRef);\n    ReanimatedModule.detachEvent(viewTag, eventName, this.__nodeID);\n    this.__detach();\n  }\n}\n\nexport function createAnimatedEvent(argMapping, config) {\n  return new AnimatedEvent(argMapping, config);\n}\n"]},"metadata":{},"sourceType":"module"}