{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\learning\\\\Group-Project\\\\src\\\\screens\\\\IngredientsDetails\\\\IngredientsDetailsScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport styles from \"./styles\";\nimport { getIngredientName, getAllIngredients } from \"../../data/MockDataAPI\";\n\nvar IngredientsDetailsScreen = function (_React$Component) {\n  _inherits(IngredientsDetailsScreen, _React$Component);\n\n  var _super = _createSuper(IngredientsDetailsScreen);\n\n  function IngredientsDetailsScreen(props) {\n    var _this;\n\n    _classCallCheck(this, IngredientsDetailsScreen);\n\n    _this = _super.call(this, props);\n\n    _this.onPressIngredient = function (item) {\n      var name = getIngredientName(item.ingredientId);\n      var ingredient = item.ingredientId;\n\n      _this.props.navigation.navigate('Ingredient', {\n        ingredient: ingredient,\n        name: name\n      });\n    };\n\n    _this.renderIngredient = function (_ref) {\n      var item = _ref.item;\n      return React.createElement(TouchableHighlight, {\n        underlayColor: \"rgba(73,182,77,0.9)\",\n        onPress: function onPress() {\n          return _this.onPressIngredient(item[0]);\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 5\n        }\n      }, React.createElement(View, {\n        style: styles.container,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 7\n        }\n      }, React.createElement(Image, {\n        style: styles.photo,\n        source: {\n          uri: item[0].photo_url\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 9\n        }\n      }), React.createElement(Text, {\n        style: styles.title,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 9\n        }\n      }, item[0].name), React.createElement(Text, {\n        style: {\n          color: 'grey'\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 9\n        }\n      }, item[1])));\n    };\n\n    return _this;\n  }\n\n  _createClass(IngredientsDetailsScreen, [{\n    key: \"render\",\n    value: function render() {\n      var navigation = this.props.navigation;\n      var item = navigation.getParam('ingredients');\n      var ingredientsArray = getAllIngredients(item);\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 7\n        }\n      }, React.createElement(FlatList, {\n        vertical: true,\n        showsVerticalScrollIndicator: false,\n        numColumns: 3,\n        data: ingredientsArray,\n        renderItem: this.renderIngredient,\n        keyExtractor: function keyExtractor(item) {\n          return \"\" + item.recipeId;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return IngredientsDetailsScreen;\n}(React.Component);\n\nIngredientsDetailsScreen.navigationOptions = function (_ref2) {\n  var navigation = _ref2.navigation;\n  return {\n    title: navigation.getParam('title'),\n    headerTitleStyle: {\n      fontSize: 16\n    }\n  };\n};\n\nexport { IngredientsDetailsScreen as default };","map":{"version":3,"sources":["C:/learning/Group-Project/src/screens/IngredientsDetails/IngredientsDetailsScreen.js"],"names":["React","styles","getIngredientName","getAllIngredients","IngredientsDetailsScreen","props","onPressIngredient","item","name","ingredientId","ingredient","navigation","navigate","renderIngredient","container","photo","uri","photo_url","title","color","getParam","ingredientsArray","recipeId","Component","navigationOptions","headerTitleStyle","fontSize"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;AAQA,OAAOC,MAAP;AACA,SACEC,iBADF,EAEEC,iBAFF;;IAKqBC,wB;;;;;AAUnB,oCAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AADiB,UAInBC,iBAJmB,GAIC,UAAAC,IAAI,EAAI;AAC1B,UAAIC,IAAI,GAAGN,iBAAiB,CAACK,IAAI,CAACE,YAAN,CAA5B;AACA,UAAIC,UAAU,GAAGH,IAAI,CAACE,YAAtB;;AACA,YAAKJ,KAAL,CAAWM,UAAX,CAAsBC,QAAtB,CAA+B,YAA/B,EAA6C;AAAEF,QAAAA,UAAU,EAAVA,UAAF;AAAcF,QAAAA,IAAI,EAAJA;AAAd,OAA7C;AACD,KARkB;;AAAA,UAUnBK,gBAVmB,GAUA;AAAA,UAAGN,IAAH,QAAGA,IAAH;AAAA,aACjB,oBAAC,kBAAD;AAAoB,QAAA,aAAa,EAAC,qBAAlC;AAAwD,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAKD,iBAAL,CAAuBC,IAAI,CAAC,CAAD,CAA3B,CAAN;AAAA,SAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEN,MAAM,CAACa,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAEb,MAAM,CAACc,KAArB;AAA4B,QAAA,MAAM,EAAE;AAAEC,UAAAA,GAAG,EAAET,IAAI,CAAC,CAAD,CAAJ,CAAQU;AAAf,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEhB,MAAM,CAACiB,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA4BX,IAAI,CAAC,CAAD,CAAJ,CAAQC,IAApC,CAFF,EAGE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEW,UAAAA,KAAK,EAAE;AAAT,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAiCZ,IAAI,CAAC,CAAD,CAArC,CAHF,CADF,CADiB;AAAA,KAVA;;AAAA;AAElB;;;;WAkBD,kBAAS;AACP,UAAQI,UAAR,GAAuB,KAAKN,KAA5B,CAAQM,UAAR;AACA,UAAMJ,IAAI,GAAGI,UAAU,CAACS,QAAX,CAAoB,aAApB,CAAb;AACA,UAAMC,gBAAgB,GAAGlB,iBAAiB,CAACI,IAAD,CAA1C;AAEA,aACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD;AACE,QAAA,QAAQ,MADV;AAEE,QAAA,4BAA4B,EAAE,KAFhC;AAGE,QAAA,UAAU,EAAE,CAHd;AAIE,QAAA,IAAI,EAAEc,gBAJR;AAKE,QAAA,UAAU,EAAE,KAAKR,gBALnB;AAME,QAAA,YAAY,EAAE,sBAAAN,IAAI;AAAA,sBAAOA,IAAI,CAACe,QAAZ;AAAA,SANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAYD;;;;EA/CmDtB,KAAK,CAACuB,S;;AAAvCnB,wB,CACZoB,iB,GAAoB,iBAAoB;AAAA,MAAjBb,UAAiB,SAAjBA,UAAiB;AAC7C,SAAO;AACLO,IAAAA,KAAK,EAAEP,UAAU,CAACS,QAAX,CAAoB,OAApB,CADF;AAELK,IAAAA,gBAAgB,EAAE;AAChBC,MAAAA,QAAQ,EAAE;AADM;AAFb,GAAP;AAMD,C;;SARkBtB,wB","sourcesContent":["import React from 'react';\r\nimport {\r\n  FlatList,\r\n  Text,\r\n  View,\r\n  Image,\r\n  TouchableHighlight\r\n} from 'react-native';\r\nimport styles from './styles';\r\nimport {\r\n  getIngredientName,\r\n  getAllIngredients,\r\n} from '../../data/MockDataAPI';\r\n\r\nexport default class IngredientsDetailsScreen extends React.Component {\r\n  static navigationOptions = ({ navigation }) => {\r\n    return {\r\n      title: navigation.getParam('title'),\r\n      headerTitleStyle: {\r\n        fontSize: 16\r\n      }\r\n    };\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  onPressIngredient = item => {\r\n    let name = getIngredientName(item.ingredientId);\r\n    let ingredient = item.ingredientId;\r\n    this.props.navigation.navigate('Ingredient', { ingredient, name });\r\n  };\r\n\r\n  renderIngredient = ({ item }) => (\r\n    <TouchableHighlight underlayColor='rgba(73,182,77,0.9)' onPress={() => this.onPressIngredient(item[0])}>\r\n      <View style={styles.container}>\r\n        <Image style={styles.photo} source={{ uri: item[0].photo_url }} />\r\n        <Text style={styles.title}>{item[0].name}</Text>\r\n        <Text style={{ color: 'grey' }}>{item[1]}</Text>\r\n      </View>\r\n    </TouchableHighlight>\r\n  );\r\n\r\n  render() {\r\n    const { navigation } = this.props;\r\n    const item = navigation.getParam('ingredients');\r\n    const ingredientsArray = getAllIngredients(item);\r\n\r\n    return (\r\n      <View>\r\n        <FlatList\r\n          vertical\r\n          showsVerticalScrollIndicator={false}\r\n          numColumns={3}\r\n          data={ingredientsArray}\r\n          renderItem={this.renderIngredient}\r\n          keyExtractor={item => `${item.recipeId}`}\r\n        />\r\n      </View>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}