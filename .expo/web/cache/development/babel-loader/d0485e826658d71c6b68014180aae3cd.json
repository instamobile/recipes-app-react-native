{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"barStyle\"];\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { ThemeContext, ThemeColors } from '@react-navigation/core';\n\nvar ThemedText = function (_React$Component) {\n  _inherits(ThemedText, _React$Component);\n\n  var _super = _createSuper(ThemedText);\n\n  function ThemedText() {\n    _classCallCheck(this, ThemedText);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ThemedText, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Text, _extends({}, this.props, {\n        style: [{\n          color: ThemeColors[this.context].label\n        }, this.props.style]\n      }));\n    }\n  }]);\n\n  return ThemedText;\n}(React.Component);\n\n_defineProperty(ThemedText, \"contextType\", ThemeContext);\n\nvar ThemedTextInput = function (_React$Component2) {\n  _inherits(ThemedTextInput, _React$Component2);\n\n  var _super2 = _createSuper(ThemedTextInput);\n\n  function ThemedTextInput() {\n    _classCallCheck(this, ThemedTextInput);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(ThemedTextInput, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(TextInput, _extends({}, this.props, {\n        placeholderTextColor: this.context === 'dark' ? '#ebebf54c' : '#3c3c434c',\n        style: [{\n          color: ThemeColors[this.context].label\n        }, this.props.style]\n      }));\n    }\n  }]);\n\n  return ThemedTextInput;\n}(React.Component);\n\n_defineProperty(ThemedTextInput, \"contextType\", ThemeContext);\n\nvar ThemedStatusBar = function (_React$Component3) {\n  _inherits(ThemedStatusBar, _React$Component3);\n\n  var _super3 = _createSuper(ThemedStatusBar);\n\n  function ThemedStatusBar() {\n    _classCallCheck(this, ThemedStatusBar);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(ThemedStatusBar, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          barStyle = _this$props.barStyle,\n          props = _objectWithoutProperties(_this$props, _excluded);\n\n      return React.createElement(StatusBar, _extends({\n        barStyle: barStyle ? barStyle : this.context === 'dark' ? 'light-content' : 'default'\n      }, props));\n    }\n  }]);\n\n  return ThemedStatusBar;\n}(React.Component);\n\n_defineProperty(ThemedStatusBar, \"contextType\", ThemeContext);\n\nexport default {\n  Text: ThemedText,\n  StatusBar: ThemedStatusBar,\n  TextInput: ThemedTextInput\n};","map":{"version":3,"sources":["Themed.js"],"names":["ThemedText","React","ThemeContext","render","color","ThemeColors","label","ThemedTextInput","ThemedStatusBar","props","barStyle","Text","StatusBar","TextInput"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;;AAEA,SAAA,YAAA,EAAA,WAAA,QAAA,wBAAA;;IAEA,U;;;;;;;;;;;;;WAGEG,kBAAS;AACP,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA,EAAA,EACM,KADN,KAAA,EAAA;AAEE,QAAA,KAAK,EAAE,CAAC;AAAEC,UAAAA,KAAK,EAAEC,WAAW,CAAC,KAAZA,OAAW,CAAXA,CAA0BC;AAAnC,SAAD,EAA6C,KAAA,KAAA,CAA7C,KAAA;AAFT,OAAA,CAAA,CADF;AAMD;;;;EAVsBL,KAAK,CAA9B,S;;gBAAMD,U,iBACiBE,Y;;IAYvB,e;;;;;;;;;;;;;WAGEC,kBAAS;AACP,aACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA,EAAA,EACM,KADN,KAAA,EAAA;AAEE,QAAA,oBAAoB,EAClB,KAAA,OAAA,KAAA,MAAA,GAAA,WAAA,GAHJ,WAAA;AAKE,QAAA,KAAK,EAAE,CAAC;AAAEC,UAAAA,KAAK,EAAEC,WAAW,CAAC,KAAZA,OAAW,CAAXA,CAA0BC;AAAnC,SAAD,EAA6C,KAAA,KAAA,CAA7C,KAAA;AALT,OAAA,CAAA,CADF;AASD;;;;EAb2BL,KAAK,CAAnC,S;;gBAAMM,e,iBACiBL,Y;;IAevB,e;;;;;;;;;;;;;WAGEC,kBAAS;AACP,wBAA6B,KAA7B,KAAA;AAAA,UAAI,QAAJ,eAAI,QAAJ;AAAA,UAAmBM,KAAnB;;AAEA,aACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA;AACE,QAAA,QAAQ,EACNC,QAAQ,GAAA,QAAA,GAEJ,KAAA,OAAA,KAAA,MAAA,GAAA,eAAA,GAEA;AANR,OAAA,EADF,KACE,CAAA,CADF;AAYD;;;;EAlB2BT,KAAK,CAAnC,S;;gBAAMO,e,iBACiBN,Y;;AAoBvB,eAAe;AACbS,EAAAA,IAAI,EADS,UAAA;AAEbC,EAAAA,SAAS,EAFI,eAAA;AAGbC,EAAAA,SAAS,EAAEN;AAHE,CAAf","sourcesContent":["import * as React from 'react';\nimport { StatusBar, Text, TextInput } from 'react-native';\nimport { ThemeContext, ThemeColors } from '@react-navigation/core';\n\nclass ThemedText extends React.Component {\n  static contextType = ThemeContext;\n\n  render() {\n    return (\n      <Text\n        {...this.props}\n        style={[{ color: ThemeColors[this.context].label }, this.props.style]}\n      />\n    );\n  }\n}\n\nclass ThemedTextInput extends React.Component {\n  static contextType = ThemeContext;\n\n  render() {\n    return (\n      <TextInput\n        {...this.props}\n        placeholderTextColor={\n          this.context === 'dark' ? '#ebebf54c' : '#3c3c434c'\n        }\n        style={[{ color: ThemeColors[this.context].label }, this.props.style]}\n      />\n    );\n  }\n}\n\nclass ThemedStatusBar extends React.Component {\n  static contextType = ThemeContext;\n\n  render() {\n    let { barStyle, ...props } = this.props;\n\n    return (\n      <StatusBar\n        barStyle={\n          barStyle\n            ? barStyle\n            : this.context === 'dark'\n            ? 'light-content'\n            : 'default'\n        }\n        {...props}\n      />\n    );\n  }\n}\n\nexport default {\n  Text: ThemedText,\n  StatusBar: ThemedStatusBar,\n  TextInput: ThemedTextInput,\n};\n"]},"metadata":{},"sourceType":"module"}