{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport invariant from 'fbjs/lib/invariant';\nimport AnimatedNode, { getCallID, setCallID } from \"./AnimatedNode\";\nimport AnimatedClock from \"./AnimatedClock\";\nimport { val } from \"../val\";\nexport var AnimatedParam = function (_AnimatedNode) {\n  _inherits(AnimatedParam, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedParam);\n\n  function AnimatedParam() {\n    var _this;\n\n    _classCallCheck(this, AnimatedParam);\n\n    _this = _super.call(this, {\n      type: 'param'\n    }, []);\n\n    _defineProperty(_assertThisInitialized(_this), \"argsStack\", []);\n\n    _defineProperty(_assertThisInitialized(_this), \"_prevCallID\", void 0);\n\n    _this.__attach();\n\n    return _this;\n  }\n\n  _createClass(AnimatedParam, [{\n    key: \"beginContext\",\n    value: function beginContext(ref, prevCallID) {\n      this._prevCallID = prevCallID;\n      this.argsStack.push(ref);\n    }\n  }, {\n    key: \"endContext\",\n    value: function endContext() {\n      this.argsStack.pop();\n    }\n  }, {\n    key: \"_getTopNode\",\n    value: function _getTopNode() {\n      if (this.argsStack.length === 0) throw new Error(\"param: Invocation failed because argsStack is empty\");\n      var top = this.argsStack[this.argsStack.length - 1];\n      return top;\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      var top = this._getTopNode();\n\n      if (top.setValue) {\n        var callID = getCallID();\n        setCallID(this._prevCallID);\n        top.setValue(value);\n        setCallID(callID);\n      } else {\n        throw new Error(\"param: setValue(\".concat(value, \") failed because the top element has no known method for updating it's current value.\"));\n      }\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      var callID = getCallID();\n      setCallID(this._prevCallID);\n\n      var top = this._getTopNode();\n\n      var value = val(top);\n      setCallID(callID);\n      return value;\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      var node = this._getTopNode();\n\n      invariant(node instanceof AnimatedClock || node instanceof AnimatedParam, \"param: top node should be of type AnimatedClock but got \".concat(node));\n      node.start();\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      var node = this._getTopNode();\n\n      invariant(node instanceof AnimatedClock || node instanceof AnimatedParam, \"param: top node should be of type AnimatedClock but got \".concat(node));\n      node.stop();\n    }\n  }, {\n    key: \"isRunning\",\n    value: function isRunning() {\n      var node = this._getTopNode();\n\n      if (node instanceof AnimatedParam) {\n        return node.isRunning();\n      }\n\n      invariant(node instanceof AnimatedClock, \"param: top node should be of type AnimatedClock but got \".concat(node));\n      return node.isStarted();\n    }\n  }]);\n\n  return AnimatedParam;\n}(AnimatedNode);\nexport function createAnimatedParam() {\n  return new AnimatedParam();\n}","map":{"version":3,"sources":["AnimatedParam.js"],"names":["constructor","type","beginContext","endContext","_getTopNode","top","setValue","callID","getCallID","setCallID","__onEvaluate","value","val","start","node","invariant","stop","isRunning"],"mappings":"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","sourcesContent":["import invariant from 'fbjs/lib/invariant';\nimport AnimatedNode, { getCallID, setCallID } from './AnimatedNode';\nimport AnimatedClock from './AnimatedClock';\nimport { val } from '../val';\n\nexport class AnimatedParam extends AnimatedNode {\n  argsStack = [];\n  _prevCallID;\n  \n  constructor() {\n    super({ type: 'param' }, []);\n    this.__attach();\n  }\n\n  beginContext(ref, prevCallID) {\n    this._prevCallID = prevCallID;\n    this.argsStack.push(ref);\n  }\n\n  endContext() {\n    this.argsStack.pop();\n  }\n\n  _getTopNode() {\n    if (this.argsStack.length === 0) throw new Error(`param: Invocation failed because argsStack is empty`);\n    const top = this.argsStack[this.argsStack.length - 1];\n    return top;\n  }\n\n  setValue(value) {\n    const top = this._getTopNode();\n    if (top.setValue) {\n      const callID = getCallID();\n      setCallID(this._prevCallID);\n      top.setValue(value);\n      setCallID(callID);\n    } else {\n      throw new Error(`param: setValue(${value}) failed because the top element has no known method for updating it's current value.`)\n    }\n  }\n  \n  __onEvaluate() {\n    const callID = getCallID();\n    setCallID(this._prevCallID);\n    const top = this._getTopNode();\n    const value = val(top);\n    setCallID(callID);\n    return value;\n  }\n\n  start() {\n    const node = this._getTopNode();\n    invariant(\n      node instanceof AnimatedClock || node instanceof AnimatedParam,\n      `param: top node should be of type AnimatedClock but got ${node}`\n    );\n    node.start();\n  }\n\n  stop() {\n    const node = this._getTopNode();\n    invariant(\n      node instanceof AnimatedClock || node instanceof AnimatedParam,\n      `param: top node should be of type AnimatedClock but got ${node}`\n    );\n    node.stop();\n  }\n\n  isRunning() {\n    const node = this._getTopNode();\n\n    if (node instanceof AnimatedParam) {\n      return node.isRunning()\n    }\n    invariant(\n      node instanceof AnimatedClock,\n      `param: top node should be of type AnimatedClock but got ${node}`\n    );\n    return node.isStarted();\n  }\n}\n\nexport function createAnimatedParam() {\n  return new AnimatedParam();\n}\n"]},"metadata":{},"sourceType":"module"}