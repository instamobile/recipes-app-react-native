{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport GestureHandler from \"./GestureHandler\";\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\n\nvar DraggingGestureHandler = function (_GestureHandler) {\n  _inherits(DraggingGestureHandler, _GestureHandler);\n\n  var _super = _createSuper(DraggingGestureHandler);\n\n  function DraggingGestureHandler() {\n    _classCallCheck(this, DraggingGestureHandler);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DraggingGestureHandler, [{\n    key: \"shouldEnableGestureOnSetup\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"transformNativeEvent\",\n    value: function transformNativeEvent(_ref) {\n      var deltaX = _ref.deltaX,\n          deltaY = _ref.deltaY,\n          velocityX = _ref.velocityX,\n          velocityY = _ref.velocityY,\n          _ref$center = _ref.center,\n          x = _ref$center.x,\n          y = _ref$center.y;\n      var rect = this.view.getBoundingClientRect();\n      var ratio = PixelRatio.get();\n      return {\n        translationX: deltaX - (this.__initialX || 0),\n        translationY: deltaY - (this.__initialY || 0),\n        absoluteX: x,\n        absoluteY: y,\n        velocityX: velocityX * ratio,\n        velocityY: velocityY * ratio,\n        x: x - rect.left,\n        y: y - rect.top\n      };\n    }\n  }]);\n\n  return DraggingGestureHandler;\n}(GestureHandler);\n\nexport default DraggingGestureHandler;","map":{"version":3,"sources":["C:/learning/Group-Project/node_modules/react-native-gesture-handler/web/DraggingGestureHandler.js"],"names":["GestureHandler","DraggingGestureHandler","deltaX","deltaY","velocityX","velocityY","center","x","y","rect","view","getBoundingClientRect","ratio","PixelRatio","get","translationX","__initialX","translationY","__initialY","absoluteX","absoluteY","left","top"],"mappings":";;;;;;;;;;AAAA,OAAOA,cAAP;;;IAGMC,sB;;;;;;;;;;;;;SACJ,eAAiC;AAC/B,aAAO,IAAP;AACD;;;WAED,oCAMG;AAAA,UALDC,MAKC,QALDA,MAKC;AAAA,UAJDC,MAIC,QAJDA,MAIC;AAAA,UAHDC,SAGC,QAHDA,SAGC;AAAA,UAFDC,SAEC,QAFDA,SAEC;AAAA,6BADDC,MACC;AAAA,UADSC,CACT,eADSA,CACT;AAAA,UADYC,CACZ,eADYA,CACZ;AACD,UAAMC,IAAI,GAAG,KAAKC,IAAL,CAAUC,qBAAV,EAAb;AACA,UAAMC,KAAK,GAAGC,UAAU,CAACC,GAAX,EAAd;AACA,aAAO;AACLC,QAAAA,YAAY,EAAEb,MAAM,IAAI,KAAKc,UAAL,IAAmB,CAAvB,CADf;AAELC,QAAAA,YAAY,EAAEd,MAAM,IAAI,KAAKe,UAAL,IAAmB,CAAvB,CAFf;AAGLC,QAAAA,SAAS,EAAEZ,CAHN;AAILa,QAAAA,SAAS,EAAEZ,CAJN;AAKLJ,QAAAA,SAAS,EAAEA,SAAS,GAAGQ,KALlB;AAMLP,QAAAA,SAAS,EAAEA,SAAS,GAAGO,KANlB;AAOLL,QAAAA,CAAC,EAAEA,CAAC,GAAGE,IAAI,CAACY,IAPP;AAQLb,QAAAA,CAAC,EAAEA,CAAC,GAAGC,IAAI,CAACa;AARP,OAAP;AAUD;;;;EAxBkCtB,c;;AA2BrC,eAAeC,sBAAf","sourcesContent":["import GestureHandler from './GestureHandler';\nimport { PixelRatio } from 'react-native';\n\nclass DraggingGestureHandler extends GestureHandler {\n  get shouldEnableGestureOnSetup() {\n    return true;\n  }\n\n  transformNativeEvent({\n    deltaX,\n    deltaY,\n    velocityX,\n    velocityY,\n    center: { x, y },\n  }) {\n    const rect = this.view.getBoundingClientRect();\n    const ratio = PixelRatio.get();\n    return {\n      translationX: deltaX - (this.__initialX || 0),\n      translationY: deltaY - (this.__initialY || 0),\n      absoluteX: x,\n      absoluteY: y,\n      velocityX: velocityX * ratio,\n      velocityY: velocityY * ratio,\n      x: x - rect.left,\n      y: y - rect.top,\n    };\n  }\n}\n\nexport default DraggingGestureHandler;\n"]},"metadata":{},"sourceType":"module"}