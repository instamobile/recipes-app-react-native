{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Hammer from '@egjs/hammerjs';\nimport State from \"../State\";\nimport { CONTENT_TOUCHES_DELAY, CONTENT_TOUCHES_QUICK_TAP_END_DELAY } from \"./constants\";\nimport DiscreteGestureHandler from \"./DiscreteGestureHandler\";\nimport { fireAfterInterval, isValidNumber, isnan } from \"./utils\";\n\nvar PressGestureHandler = function (_DiscreteGestureHandl) {\n  _inherits(PressGestureHandler, _DiscreteGestureHandl);\n\n  var _super = _createSuper(PressGestureHandler);\n\n  function PressGestureHandler() {\n    var _this;\n\n    _classCallCheck(this, PressGestureHandler);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.shouldDelayTouches = true;\n    return _this;\n  }\n\n  _createClass(PressGestureHandler, [{\n    key: \"name\",\n    get: function get() {\n      return 'press';\n    }\n  }, {\n    key: \"minDurationMs\",\n    get: function get() {\n      return isnan(this.config.minDurationMs) ? 5 : this.config.minDurationMs;\n    }\n  }, {\n    key: \"maxDist\",\n    get: function get() {\n      return isnan(this.config.maxDist) ? 9 : this.config.maxDist;\n    }\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      return Hammer.Press;\n    }\n  }, {\n    key: \"simulateCancelEvent\",\n    value: function simulateCancelEvent(inputData) {\n      this.hasGestureFailed = true;\n      this.cancelEvent(inputData);\n    }\n  }, {\n    key: \"updateHasCustomActivationCriteria\",\n    value: function updateHasCustomActivationCriteria(_ref) {\n      var shouldCancelWhenOutside = _ref.shouldCancelWhenOutside,\n          maxDistSq = _ref.maxDistSq;\n      return shouldCancelWhenOutside || !isValidNumber(maxDistSq);\n    }\n  }, {\n    key: \"getState\",\n    value: function getState(type) {\n      var _Hammer$INPUT_START$H;\n\n      return (_Hammer$INPUT_START$H = {}, _defineProperty(_Hammer$INPUT_START$H, Hammer.INPUT_START, State.BEGAN), _defineProperty(_Hammer$INPUT_START$H, Hammer.INPUT_MOVE, State.ACTIVE), _defineProperty(_Hammer$INPUT_START$H, Hammer.INPUT_END, State.END), _defineProperty(_Hammer$INPUT_START$H, Hammer.INPUT_CANCEL, State.CANCELLED), _Hammer$INPUT_START$H)[type];\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      if (!this._hasCustomActivationCriteria) {\n        return {\n          shouldCancelWhenOutside: true,\n          maxDistSq: 10\n        };\n      }\n\n      return this.config;\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(PressGestureHandler.prototype), \"getHammerConfig\", this).call(this)), {}, {\n        time: this.minDurationMs\n      });\n    }\n  }, {\n    key: \"onGestureActivated\",\n    value: function onGestureActivated(ev) {\n      this.onGestureStart(ev);\n    }\n  }, {\n    key: \"shouldDelayTouchForEvent\",\n    value: function shouldDelayTouchForEvent(_ref2) {\n      var pointerType = _ref2.pointerType;\n      return this.shouldDelayTouches && pointerType === 'touch';\n    }\n  }, {\n    key: \"onGestureStart\",\n    value: function onGestureStart(ev) {\n      var _this2 = this;\n\n      this.isGestureRunning = true;\n      clearTimeout(this.visualFeedbackTimer);\n      this.initialEvent = ev;\n      this.visualFeedbackTimer = fireAfterInterval(function () {\n        _this2.sendGestureStartedEvent(_this2.initialEvent);\n\n        _this2.initialEvent = null;\n      }, this.shouldDelayTouchForEvent(ev) && CONTENT_TOUCHES_DELAY);\n    }\n  }, {\n    key: \"sendGestureStartedEvent\",\n    value: function sendGestureStartedEvent(ev) {\n      clearTimeout(this.visualFeedbackTimer);\n      this.visualFeedbackTimer = null;\n      this.sendEvent(_objectSpread(_objectSpread({}, ev), {}, {\n        eventType: Hammer.INPUT_MOVE,\n        isFirst: true\n      }));\n    }\n  }, {\n    key: \"forceInvalidate\",\n    value: function forceInvalidate(event) {\n      _get(_getPrototypeOf(PressGestureHandler.prototype), \"forceInvalidate\", this).call(this, event);\n\n      clearTimeout(this.visualFeedbackTimer);\n      this.visualFeedbackTimer = null;\n      this.initialEvent = null;\n    }\n  }, {\n    key: \"onRawEvent\",\n    value: function onRawEvent(ev) {\n      var _this3 = this;\n\n      _get(_getPrototypeOf(PressGestureHandler.prototype), \"onRawEvent\", this).call(this, ev);\n\n      if (ev.isFinal && this.isGestureRunning) {\n        var timeout;\n\n        if (this.visualFeedbackTimer) {\n          timeout = CONTENT_TOUCHES_QUICK_TAP_END_DELAY;\n          this.sendGestureStartedEvent(this.initialEvent);\n          this.initialEvent = null;\n        }\n\n        fireAfterInterval(function () {\n          _this3.sendEvent(_objectSpread(_objectSpread({}, ev), {}, {\n            eventType: Hammer.INPUT_END,\n            isFinal: true\n          }));\n\n          _this3.onGestureEnded();\n        }, timeout);\n      }\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref3) {\n      var _ref3$shouldActivateO = _ref3.shouldActivateOnStart,\n          shouldActivateOnStart = _ref3$shouldActivateO === void 0 ? false : _ref3$shouldActivateO,\n          _ref3$disallowInterru = _ref3.disallowInterruption,\n          disallowInterruption = _ref3$disallowInterru === void 0 ? false : _ref3$disallowInterru,\n          _ref3$shouldCancelWhe = _ref3.shouldCancelWhenOutside,\n          shouldCancelWhenOutside = _ref3$shouldCancelWhe === void 0 ? true : _ref3$shouldCancelWhe,\n          _ref3$minDurationMs = _ref3.minDurationMs,\n          minDurationMs = _ref3$minDurationMs === void 0 ? Number.NaN : _ref3$minDurationMs,\n          _ref3$maxDist = _ref3.maxDist,\n          maxDist = _ref3$maxDist === void 0 ? Number.NaN : _ref3$maxDist,\n          _ref3$minPointers = _ref3.minPointers,\n          minPointers = _ref3$minPointers === void 0 ? 1 : _ref3$minPointers,\n          _ref3$maxPointers = _ref3.maxPointers,\n          maxPointers = _ref3$maxPointers === void 0 ? 1 : _ref3$maxPointers,\n          props = _objectWithoutProperties(_ref3, [\"shouldActivateOnStart\", \"disallowInterruption\", \"shouldCancelWhenOutside\", \"minDurationMs\", \"maxDist\", \"minPointers\", \"maxPointers\"]);\n\n      return _get(_getPrototypeOf(PressGestureHandler.prototype), \"updateGestureConfig\", this).call(this, _objectSpread({\n        shouldActivateOnStart: shouldActivateOnStart,\n        disallowInterruption: disallowInterruption,\n        shouldCancelWhenOutside: shouldCancelWhenOutside,\n        minDurationMs: minDurationMs,\n        maxDist: maxDist,\n        minPointers: minPointers,\n        maxPointers: maxPointers\n      }, props));\n    }\n  }]);\n\n  return PressGestureHandler;\n}(DiscreteGestureHandler);\n\nexport default PressGestureHandler;","map":{"version":3,"sources":["E:/Users/Nayla/Escritorio/UADEE/Distribuidas desk/SUBASTAPP/node_modules/react-native-gesture-handler/web/PressGestureHandler.js"],"names":["Hammer","State","CONTENT_TOUCHES_DELAY","CONTENT_TOUCHES_QUICK_TAP_END_DELAY","DiscreteGestureHandler","fireAfterInterval","isValidNumber","isnan","PressGestureHandler","shouldDelayTouches","config","minDurationMs","maxDist","Press","inputData","hasGestureFailed","cancelEvent","shouldCancelWhenOutside","maxDistSq","type","INPUT_START","BEGAN","INPUT_MOVE","ACTIVE","INPUT_END","END","INPUT_CANCEL","CANCELLED","_hasCustomActivationCriteria","time","ev","onGestureStart","pointerType","isGestureRunning","clearTimeout","visualFeedbackTimer","initialEvent","sendGestureStartedEvent","shouldDelayTouchForEvent","sendEvent","eventType","isFirst","event","isFinal","timeout","onGestureEnded","shouldActivateOnStart","disallowInterruption","Number","NaN","minPointers","maxPointers","props"],"mappings":"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","sourcesContent":["import Hammer from '@egjs/hammerjs';\n\nimport State from '../State';\nimport {\n  CONTENT_TOUCHES_DELAY,\n  CONTENT_TOUCHES_QUICK_TAP_END_DELAY,\n} from './constants';\nimport DiscreteGestureHandler from './DiscreteGestureHandler';\nimport { fireAfterInterval, isValidNumber, isnan } from './utils';\n\nclass PressGestureHandler extends DiscreteGestureHandler {\n  get name() {\n    return 'press';\n  }\n\n  get minDurationMs() {\n    return isnan(this.config.minDurationMs) ? 5 : this.config.minDurationMs;\n  }\n\n  get maxDist() {\n    return isnan(this.config.maxDist) ? 9 : this.config.maxDist;\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Press;\n  }\n\n  shouldDelayTouches = true;\n\n  simulateCancelEvent(inputData) {\n    // Long press never starts so we can't rely on the running event boolean.\n    this.hasGestureFailed = true;\n    this.cancelEvent(inputData);\n  }\n\n  updateHasCustomActivationCriteria({ shouldCancelWhenOutside, maxDistSq }) {\n    return shouldCancelWhenOutside || !isValidNumber(maxDistSq);\n  }\n\n  getState(type) {\n    return {\n      [Hammer.INPUT_START]: State.BEGAN,\n      [Hammer.INPUT_MOVE]: State.ACTIVE,\n      [Hammer.INPUT_END]: State.END,\n      [Hammer.INPUT_CANCEL]: State.CANCELLED,\n    }[type];\n  }\n\n  getConfig() {\n    if (!this._hasCustomActivationCriteria) {\n      // Default config\n      // If no params have been defined then this config should emulate the native gesture as closely as possible.\n      return {\n        shouldCancelWhenOutside: true,\n        maxDistSq: 10,\n      };\n    }\n    return this.config;\n  }\n\n  getHammerConfig() {\n    return {\n      ...super.getHammerConfig(),\n      // threshold: this.maxDist,\n      time: this.minDurationMs,\n    };\n  }\n\n  onGestureActivated(ev) {\n    this.onGestureStart(ev);\n  }\n\n  shouldDelayTouchForEvent({ pointerType }) {\n    // Don't disable event for mouse input\n    return this.shouldDelayTouches && pointerType === 'touch';\n  }\n\n  onGestureStart(ev) {\n    this.isGestureRunning = true;\n    clearTimeout(this.visualFeedbackTimer);\n    this.initialEvent = ev;\n    this.visualFeedbackTimer = fireAfterInterval(() => {\n      this.sendGestureStartedEvent(this.initialEvent);\n      this.initialEvent = null;\n    }, this.shouldDelayTouchForEvent(ev) && CONTENT_TOUCHES_DELAY);\n  }\n\n  sendGestureStartedEvent(ev) {\n    clearTimeout(this.visualFeedbackTimer);\n    this.visualFeedbackTimer = null;\n    this.sendEvent({\n      ...ev,\n      eventType: Hammer.INPUT_MOVE,\n      isFirst: true,\n    });\n  }\n\n  forceInvalidate(event) {\n    super.forceInvalidate(event);\n    clearTimeout(this.visualFeedbackTimer);\n    this.visualFeedbackTimer = null;\n    this.initialEvent = null;\n  }\n\n  onRawEvent(ev) {\n    super.onRawEvent(ev);\n    if (ev.isFinal && this.isGestureRunning) {\n      let timeout;\n      if (this.visualFeedbackTimer) {\n        // Aesthetic timing for a quick tap.\n        // We haven't activated the tap right away to emulate iOS `delaysContentTouches`\n        // Now we must send the initial activation event and wait a set amount of time before firing the end event.\n        timeout = CONTENT_TOUCHES_QUICK_TAP_END_DELAY;\n        this.sendGestureStartedEvent(this.initialEvent);\n        this.initialEvent = null;\n      }\n      fireAfterInterval(() => {\n        this.sendEvent({\n          ...ev,\n          eventType: Hammer.INPUT_END,\n          isFinal: true,\n        });\n        this.onGestureEnded();\n      }, timeout);\n    }\n  }\n\n  updateGestureConfig({\n    shouldActivateOnStart = false,\n    disallowInterruption = false,\n    shouldCancelWhenOutside = true,\n    minDurationMs = Number.NaN,\n    maxDist = Number.NaN,\n    minPointers = 1,\n    maxPointers = 1,\n    ...props\n  }) {\n    return super.updateGestureConfig({\n      shouldActivateOnStart,\n      disallowInterruption,\n      shouldCancelWhenOutside,\n      minDurationMs,\n      maxDist,\n      minPointers,\n      maxPointers,\n      ...props,\n    });\n  }\n}\nexport default PressGestureHandler;\n"]},"metadata":{},"sourceType":"module"}