{"ast":null,"code":"import { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport invariant from 'fbjs/lib/invariant';\nvar win = canUseDOM ? window : {\n  devicePixelRatio: undefined,\n  innerHeight: undefined,\n  innerWidth: undefined,\n  screen: {\n    height: undefined,\n    width: undefined\n  }\n};\nvar dimensions = {};\nvar listeners = {};\n\nvar Dimensions = function () {\n  function Dimensions() {}\n\n  Dimensions.get = function get(dimension) {\n    invariant(dimensions[dimension], \"No dimension set for key \" + dimension);\n    return dimensions[dimension];\n  };\n\n  Dimensions.set = function set(initialDimensions) {\n    if (initialDimensions) {\n      if (canUseDOM) {\n        invariant(false, 'Dimensions cannot be set in the browser');\n      } else {\n        dimensions.screen = initialDimensions.screen;\n        dimensions.window = initialDimensions.window;\n      }\n    }\n  };\n\n  Dimensions._update = function _update() {\n    dimensions.window = {\n      fontScale: 1,\n      height: win.innerHeight,\n      scale: win.devicePixelRatio || 1,\n      width: win.innerWidth\n    };\n    dimensions.screen = {\n      fontScale: 1,\n      height: win.screen.height,\n      scale: win.devicePixelRatio || 1,\n      width: win.screen.width\n    };\n\n    if (Array.isArray(listeners['change'])) {\n      listeners['change'].forEach(function (handler) {\n        return handler(dimensions);\n      });\n    }\n  };\n\n  Dimensions.addEventListener = function addEventListener(type, handler) {\n    listeners[type] = listeners[type] || [];\n    listeners[type].push(handler);\n  };\n\n  Dimensions.removeEventListener = function removeEventListener(type, handler) {\n    if (Array.isArray(listeners[type])) {\n      listeners[type] = listeners[type].filter(function (_handler) {\n        return _handler !== handler;\n      });\n    }\n  };\n\n  return Dimensions;\n}();\n\nexport { Dimensions as default };\n\nDimensions._update();\n\nif (canUseDOM) {\n  window.addEventListener('resize', Dimensions._update, false);\n}","map":{"version":3,"sources":["E:/Users/Nayla/Escritorio/UADEE/Distribuidas desk/SUBASTAPP/node_modules/react-native-web/dist/exports/Dimensions/index.js"],"names":["canUseDOM","invariant","win","window","devicePixelRatio","undefined","innerHeight","innerWidth","screen","height","width","dimensions","listeners","Dimensions","get","dimension","set","initialDimensions","_update","fontScale","scale","Array","isArray","forEach","handler","addEventListener","type","push","removeEventListener","filter","_handler","default"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport invariant from 'fbjs/lib/invariant';\nvar win = canUseDOM ? window : {\n  devicePixelRatio: undefined,\n  innerHeight: undefined,\n  innerWidth: undefined,\n  screen: {\n    height: undefined,\n    width: undefined\n  }\n};\nvar dimensions = {};\nvar listeners = {};\n\nvar Dimensions =\n/*#__PURE__*/\nfunction () {\n  function Dimensions() {}\n\n  Dimensions.get = function get(dimension) {\n    invariant(dimensions[dimension], \"No dimension set for key \" + dimension);\n    return dimensions[dimension];\n  };\n\n  Dimensions.set = function set(initialDimensions) {\n    if (initialDimensions) {\n      if (canUseDOM) {\n        invariant(false, 'Dimensions cannot be set in the browser');\n      } else {\n        dimensions.screen = initialDimensions.screen;\n        dimensions.window = initialDimensions.window;\n      }\n    }\n  };\n\n  Dimensions._update = function _update() {\n    dimensions.window = {\n      fontScale: 1,\n      height: win.innerHeight,\n      scale: win.devicePixelRatio || 1,\n      width: win.innerWidth\n    };\n    dimensions.screen = {\n      fontScale: 1,\n      height: win.screen.height,\n      scale: win.devicePixelRatio || 1,\n      width: win.screen.width\n    };\n\n    if (Array.isArray(listeners['change'])) {\n      listeners['change'].forEach(function (handler) {\n        return handler(dimensions);\n      });\n    }\n  };\n\n  Dimensions.addEventListener = function addEventListener(type, handler) {\n    listeners[type] = listeners[type] || [];\n    listeners[type].push(handler);\n  };\n\n  Dimensions.removeEventListener = function removeEventListener(type, handler) {\n    if (Array.isArray(listeners[type])) {\n      listeners[type] = listeners[type].filter(function (_handler) {\n        return _handler !== handler;\n      });\n    }\n  };\n\n  return Dimensions;\n}();\n\nexport { Dimensions as default };\n\nDimensions._update();\n\nif (canUseDOM) {\n  window.addEventListener('resize', Dimensions._update, false);\n}"]},"metadata":{},"sourceType":"module"}