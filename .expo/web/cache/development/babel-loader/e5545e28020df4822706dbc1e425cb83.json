{"ast":null,"code":"import { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport { MONOSPACE_FONT_STACK, SYSTEM_FONT_STACK, STYLE_SHORT_FORM_EXPANSIONS } from \"./constants\";\nimport normalizeValueWithProperty from \"./normalizeValueWithProperty\";\nvar emptyObject = {};\nvar supportsCSS3TextDecoration = !canUseDOM || window.CSS != null && window.CSS.supports != null && (window.CSS.supports('text-decoration-line', 'none') || window.CSS.supports('-webkit-text-decoration-line', 'none'));\n\nvar mapTransform = function mapTransform(transform) {\n  var type = Object.keys(transform)[0];\n  var value = normalizeValueWithProperty(transform[type], type);\n  return type + \"(\" + value + \")\";\n};\n\nvar convertTransformMatrix = function convertTransformMatrix(transformMatrix) {\n  var matrix = transformMatrix.join(',');\n  return \"matrix3d(\" + matrix + \")\";\n};\n\nvar resolveTransform = function resolveTransform(resolvedStyle, style) {\n  var transform = style.transform;\n\n  if (Array.isArray(style.transform)) {\n    transform = style.transform.map(mapTransform).join(' ');\n  } else if (style.transformMatrix) {\n    transform = convertTransformMatrix(style.transformMatrix);\n  }\n\n  resolvedStyle.transform = transform;\n};\n\nvar createReactDOMStyle = function createReactDOMStyle(style) {\n  if (!style) {\n    return emptyObject;\n  }\n\n  var resolvedStyle = {};\n  Object.keys(style).sort().forEach(function (prop) {\n    var value = normalizeValueWithProperty(style[prop], prop);\n\n    if (value == null) {\n      return;\n    }\n\n    switch (prop) {\n      case 'aspectRatio':\n      case 'elevation':\n      case 'overlayColor':\n      case 'resizeMode':\n      case 'tintColor':\n        {\n          break;\n        }\n\n      case 'backgroundClip':\n        {\n          if (value === 'text') {\n            resolvedStyle.backgroundClip = value;\n            resolvedStyle.WebkitBackgroundClip = value;\n          }\n\n          break;\n        }\n\n      case 'flex':\n        {\n          if (value > 0) {\n            resolvedStyle.flexGrow = value;\n            resolvedStyle.flexShrink = 1;\n            resolvedStyle.flexBasis = '0%';\n          } else if (value === 0) {\n            resolvedStyle.flexGrow = 0;\n            resolvedStyle.flexShrink = 0;\n            resolvedStyle.flexBasis = '0%';\n          } else if (value === -1) {\n            resolvedStyle.flexGrow = 0;\n            resolvedStyle.flexShrink = 1;\n            resolvedStyle.flexBasis = 'auto';\n          }\n\n          break;\n        }\n\n      case 'font':\n        {\n          resolvedStyle[prop] = value.replace('System', SYSTEM_FONT_STACK);\n          break;\n        }\n\n      case 'fontFamily':\n        {\n          if (value.indexOf('System') > -1) {\n            var stack = value.split(/,\\s*/);\n            stack[stack.indexOf('System')] = SYSTEM_FONT_STACK;\n            resolvedStyle[prop] = stack.join(',');\n          } else if (value === 'monospace') {\n            resolvedStyle[prop] = MONOSPACE_FONT_STACK;\n          } else {\n            resolvedStyle[prop] = value;\n          }\n\n          break;\n        }\n\n      case 'fontVariant':\n        {\n          if (Array.isArray(value) && value.length > 0) {\n            resolvedStyle.fontVariant = value.join(' ');\n          }\n\n          break;\n        }\n\n      case 'textAlignVertical':\n        {\n          resolvedStyle.verticalAlign = value === 'center' ? 'middle' : value;\n          break;\n        }\n\n      case 'textDecorationLine':\n        {\n          if (!supportsCSS3TextDecoration) {\n            resolvedStyle.textDecoration = value;\n          } else {\n            resolvedStyle.textDecorationLine = value;\n          }\n\n          break;\n        }\n\n      case 'transform':\n      case 'transformMatrix':\n        {\n          resolveTransform(resolvedStyle, style);\n          break;\n        }\n\n      case 'writingDirection':\n        {\n          resolvedStyle.direction = value;\n          break;\n        }\n\n      default:\n        {\n          var longFormProperties = STYLE_SHORT_FORM_EXPANSIONS[prop];\n\n          if (longFormProperties) {\n            longFormProperties.forEach(function (longForm, i) {\n              if (typeof style[longForm] === 'undefined') {\n                resolvedStyle[longForm] = value;\n              }\n            });\n          } else {\n            resolvedStyle[prop] = Array.isArray(value) ? value.join(',') : value;\n          }\n        }\n    }\n  });\n  return resolvedStyle;\n};\n\nexport default createReactDOMStyle;","map":{"version":3,"sources":["C:/learning/Group-Project/node_modules/react-native-web/dist/exports/StyleSheet/createReactDOMStyle.js"],"names":["canUseDOM","MONOSPACE_FONT_STACK","SYSTEM_FONT_STACK","STYLE_SHORT_FORM_EXPANSIONS","normalizeValueWithProperty","emptyObject","supportsCSS3TextDecoration","window","CSS","supports","mapTransform","transform","type","Object","keys","value","convertTransformMatrix","transformMatrix","matrix","join","resolveTransform","resolvedStyle","style","Array","isArray","map","createReactDOMStyle","sort","forEach","prop","backgroundClip","WebkitBackgroundClip","flexGrow","flexShrink","flexBasis","replace","indexOf","stack","split","length","fontVariant","verticalAlign","textDecoration","textDecorationLine","direction","longFormProperties","longForm","i"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport { MONOSPACE_FONT_STACK, SYSTEM_FONT_STACK, STYLE_SHORT_FORM_EXPANSIONS } from './constants';\nimport normalizeValueWithProperty from './normalizeValueWithProperty';\n/**\n * The browser implements the CSS cascade, where the order of properties is a\n * factor in determining which styles to paint. React Native is different. It\n * gives giving precedence to the more specific style property. For example,\n * the value of `paddingTop` takes precedence over that of `padding`.\n *\n * This module creates mutally exclusive style declarations by expanding all of\n * React Native's supported shortform properties (e.g. `padding`) to their\n * longfrom equivalents.\n */\n\nvar emptyObject = {};\nvar supportsCSS3TextDecoration = !canUseDOM || window.CSS != null && window.CSS.supports != null && (window.CSS.supports('text-decoration-line', 'none') || window.CSS.supports('-webkit-text-decoration-line', 'none'));\n/**\n * Transform\n */\n// { scale: 2 } => 'scale(2)'\n// { translateX: 20 } => 'translateX(20px)'\n\nvar mapTransform = function mapTransform(transform) {\n  var type = Object.keys(transform)[0];\n  var value = normalizeValueWithProperty(transform[type], type);\n  return type + \"(\" + value + \")\";\n}; // [1,2,3,4,5,6] => 'matrix3d(1,2,3,4,5,6)'\n\n\nvar convertTransformMatrix = function convertTransformMatrix(transformMatrix) {\n  var matrix = transformMatrix.join(',');\n  return \"matrix3d(\" + matrix + \")\";\n};\n\nvar resolveTransform = function resolveTransform(resolvedStyle, style) {\n  var transform = style.transform;\n\n  if (Array.isArray(style.transform)) {\n    transform = style.transform.map(mapTransform).join(' ');\n  } else if (style.transformMatrix) {\n    transform = convertTransformMatrix(style.transformMatrix);\n  }\n\n  resolvedStyle.transform = transform;\n};\n/**\n * Reducer\n */\n\n\nvar createReactDOMStyle = function createReactDOMStyle(style) {\n  if (!style) {\n    return emptyObject;\n  }\n\n  var resolvedStyle = {};\n  Object.keys(style).sort().forEach(function (prop) {\n    var value = normalizeValueWithProperty(style[prop], prop); // Ignore everything else with a null value\n\n    if (value == null) {\n      return;\n    }\n\n    switch (prop) {\n      // Ignore some React Native styles\n      case 'aspectRatio':\n      case 'elevation':\n      case 'overlayColor':\n      case 'resizeMode':\n      case 'tintColor':\n        {\n          break;\n        }\n      // TODO: remove once this issue is fixed\n      // https://github.com/rofrischmann/inline-style-prefixer/issues/159\n\n      case 'backgroundClip':\n        {\n          if (value === 'text') {\n            resolvedStyle.backgroundClip = value;\n            resolvedStyle.WebkitBackgroundClip = value;\n          }\n\n          break;\n        }\n      // The 'flex' property value in React Native must be a positive integer,\n      // 0, or -1.\n\n      case 'flex':\n        {\n          if (value > 0) {\n            resolvedStyle.flexGrow = value;\n            resolvedStyle.flexShrink = 1;\n            resolvedStyle.flexBasis = '0%';\n          } else if (value === 0) {\n            resolvedStyle.flexGrow = 0;\n            resolvedStyle.flexShrink = 0;\n            resolvedStyle.flexBasis = '0%';\n          } else if (value === -1) {\n            resolvedStyle.flexGrow = 0;\n            resolvedStyle.flexShrink = 1;\n            resolvedStyle.flexBasis = 'auto';\n          }\n\n          break;\n        }\n\n      case 'font':\n        {\n          resolvedStyle[prop] = value.replace('System', SYSTEM_FONT_STACK);\n          break;\n        }\n\n      case 'fontFamily':\n        {\n          if (value.indexOf('System') > -1) {\n            var stack = value.split(/,\\s*/);\n            stack[stack.indexOf('System')] = SYSTEM_FONT_STACK;\n            resolvedStyle[prop] = stack.join(',');\n          } else if (value === 'monospace') {\n            resolvedStyle[prop] = MONOSPACE_FONT_STACK;\n          } else {\n            resolvedStyle[prop] = value;\n          }\n\n          break;\n        }\n\n      case 'fontVariant':\n        {\n          if (Array.isArray(value) && value.length > 0) {\n            resolvedStyle.fontVariant = value.join(' ');\n          }\n\n          break;\n        }\n\n      case 'textAlignVertical':\n        {\n          resolvedStyle.verticalAlign = value === 'center' ? 'middle' : value;\n          break;\n        }\n\n      case 'textDecorationLine':\n        {\n          // use 'text-decoration' for browsers that only support CSS2\n          // text-decoration (e.g., IE, Edge)\n          if (!supportsCSS3TextDecoration) {\n            resolvedStyle.textDecoration = value;\n          } else {\n            resolvedStyle.textDecorationLine = value;\n          }\n\n          break;\n        }\n\n      case 'transform':\n      case 'transformMatrix':\n        {\n          resolveTransform(resolvedStyle, style);\n          break;\n        }\n\n      case 'writingDirection':\n        {\n          resolvedStyle.direction = value;\n          break;\n        }\n\n      default:\n        {\n          var longFormProperties = STYLE_SHORT_FORM_EXPANSIONS[prop];\n\n          if (longFormProperties) {\n            longFormProperties.forEach(function (longForm, i) {\n              // The value of any longform property in the original styles takes\n              // precedence over the shortform's value.\n              if (typeof style[longForm] === 'undefined') {\n                resolvedStyle[longForm] = value;\n              }\n            });\n          } else {\n            resolvedStyle[prop] = Array.isArray(value) ? value.join(',') : value;\n          }\n        }\n    }\n  });\n  return resolvedStyle;\n};\n\nexport default createReactDOMStyle;"]},"metadata":{},"sourceType":"module"}