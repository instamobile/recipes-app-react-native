{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nexport default function createEventObjectProxyPolyfill() {\n  var nodesMap = {\n    translationX: {},\n    translationY: {},\n    state: {},\n    oldState: {},\n    absoluteX: {},\n    absoluteY: {},\n    x: {},\n    y: {},\n    velocityX: {},\n    velocityY: {},\n    scale: {},\n    focalX: {},\n    focalY: {},\n    rotation: {},\n    anchorX: {},\n    anchorY: {},\n    velocity: {},\n    numberOfPointers: {},\n    layout: {\n      x: {},\n      y: {},\n      width: {},\n      height: {}\n    },\n    contentOffset: {\n      y: {},\n      x: {}\n    },\n    layoutMeasurement: {\n      width: {},\n      height: {}\n    },\n    contentSize: {\n      width: {},\n      height: {}\n    },\n    zoomScale: {},\n    contentInset: {\n      right: {},\n      top: {},\n      left: {},\n      bottom: {}\n    }\n  };\n\n  var traverse = function traverse(obj) {\n    for (var key in obj) {\n      traverse(obj[key]);\n\n      _extends(obj[key], {\n        __isProxy: true\n      });\n    }\n  };\n\n  traverse(nodesMap);\n  return nodesMap;\n}","map":{"version":3,"sources":["createEventObjectProxyPolyfill.js"],"names":["nodesMap","translationX","translationY","state","oldState","absoluteX","absoluteY","x","y","velocityX","velocityY","scale","focalX","focalY","rotation","anchorX","anchorY","velocity","numberOfPointers","layout","width","height","contentOffset","layoutMeasurement","contentSize","zoomScale","contentInset","right","top","left","bottom","traverse","obj","Object","__isProxy"],"mappings":";AAKA,eAAe,SAAA,8BAAA,GAA0C;AACvD,MAAMA,QAAQ,GAAG;AAEfC,IAAAA,YAAY,EAFG,EAAA;AAGfC,IAAAA,YAAY,EAHG,EAAA;AAIfC,IAAAA,KAAK,EAJU,EAAA;AAKfC,IAAAA,QAAQ,EALO,EAAA;AAMfC,IAAAA,SAAS,EANM,EAAA;AAOfC,IAAAA,SAAS,EAPM,EAAA;AAQfC,IAAAA,CAAC,EARc,EAAA;AASfC,IAAAA,CAAC,EATc,EAAA;AAUfC,IAAAA,SAAS,EAVM,EAAA;AAWfC,IAAAA,SAAS,EAXM,EAAA;AAYfC,IAAAA,KAAK,EAZU,EAAA;AAafC,IAAAA,MAAM,EAbS,EAAA;AAcfC,IAAAA,MAAM,EAdS,EAAA;AAefC,IAAAA,QAAQ,EAfO,EAAA;AAgBfC,IAAAA,OAAO,EAhBQ,EAAA;AAiBfC,IAAAA,OAAO,EAjBQ,EAAA;AAkBfC,IAAAA,QAAQ,EAlBO,EAAA;AAmBfC,IAAAA,gBAAgB,EAnBD,EAAA;AAqBfC,IAAAA,MAAM,EAAE;AAAEZ,MAAAA,CAAC,EAAH,EAAA;AAASC,MAAAA,CAAC,EAAV,EAAA;AAAgBY,MAAAA,KAAK,EAArB,EAAA;AAA2BC,MAAAA,MAAM,EAAE;AAAnC,KArBO;AAuBfC,IAAAA,aAAa,EAAE;AAAEd,MAAAA,CAAC,EAAH,EAAA;AAASD,MAAAA,CAAC,EAAE;AAAZ,KAvBA;AAwBfgB,IAAAA,iBAAiB,EAAE;AAAEH,MAAAA,KAAK,EAAP,EAAA;AAAaC,MAAAA,MAAM,EAAE;AAArB,KAxBJ;AAyBfG,IAAAA,WAAW,EAAE;AAAEJ,MAAAA,KAAK,EAAP,EAAA;AAAaC,MAAAA,MAAM,EAAE;AAArB,KAzBE;AA0BfI,IAAAA,SAAS,EA1BM,EAAA;AA2BfC,IAAAA,YAAY,EAAE;AAAEC,MAAAA,KAAK,EAAP,EAAA;AAAaC,MAAAA,GAAG,EAAhB,EAAA;AAAsBC,MAAAA,IAAI,EAA1B,EAAA;AAAgCC,MAAAA,MAAM,EAAE;AAAxC;AA3BC,GAAjB;;AA6BA,MAAMC,QAAQ,GAAGC,SAAXD,QAAWC,CAAAA,GAAG,EAAI;AACtB,SAAK,IAAL,GAAA,IAAA,GAAA,EAAuB;AACrBD,MAAAA,QAAQ,CAACC,GAAG,CAAZD,GAAY,CAAJ,CAARA;;AACAE,eAAcD,GAAG,CAAjBC,GAAiB,CAAjBA,EAAwB;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAAxBD;AACD;AAJH,GAAA;;AAMAF,EAAAA,QAAQ,CAARA,QAAQ,CAARA;AACA,SAAA,QAAA;AACD","sourcesContent":["// JSC on Android and iOS 8 & 9 does not support proxies.\n// The below workaround provides a proxy-like functionality for event data by\n// creating an object which contains predefined fields for the most commonly\n// used event attributes. If your app uses even attribute which is not listed\n// here please submit a PR to add that and we will merge it right away\nexport default function createEventObjectProxyPolyfill() {\n  const nodesMap = {\n    // Gesture handlers-related event\n    translationX: {},\n    translationY: {},\n    state: {},\n    oldState: {},\n    absoluteX: {},\n    absoluteY: {},\n    x: {},\n    y: {},\n    velocityX: {},\n    velocityY: {},\n    scale: {},\n    focalX: {},\n    focalY: {},\n    rotation: {},\n    anchorX: {},\n    anchorY: {},\n    velocity: {},\n    numberOfPointers: {},\n    // onLayour-related event\n    layout: { x: {}, y: {}, width: {}, height: {} },\n    // ScrollView event\n    contentOffset: { y: {}, x: {} },\n    layoutMeasurement: { width: {}, height: {} },\n    contentSize: { width: {}, height: {} },\n    zoomScale: {},\n    contentInset: { right: {}, top: {}, left: {}, bottom: {} },\n  };\n  const traverse = obj => {\n    for (const key in obj) {\n      traverse(obj[key]);\n      Object.assign(obj[key], { __isProxy: true });\n    }\n  };\n  traverse(nodesMap);\n  return nodesMap;\n}\n"]},"metadata":{},"sourceType":"module"}