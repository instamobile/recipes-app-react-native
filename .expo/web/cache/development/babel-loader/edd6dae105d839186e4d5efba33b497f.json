{"ast":null,"code":"import invariant from 'fbjs/lib/invariant';\n\nvar twoArgumentPooler = function twoArgumentPooler(a1, a2) {\n  var Klass = this;\n\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2);\n    return instance;\n  } else {\n    return new Klass(a1, a2);\n  }\n};\n\nvar standardReleaser = function standardReleaser(instance) {\n  var Klass = this;\n  instance.destructor();\n\n  if (Klass.instancePool.length < Klass.poolSize) {\n    Klass.instancePool.push(instance);\n  }\n};\n\nvar DEFAULT_POOL_SIZE = 10;\nvar DEFAULT_POOLER = twoArgumentPooler;\n\nvar addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {\n  var NewKlass = CopyConstructor;\n  NewKlass.instancePool = [];\n  NewKlass.getPooled = pooler || DEFAULT_POOLER;\n\n  if (!NewKlass.poolSize) {\n    NewKlass.poolSize = DEFAULT_POOL_SIZE;\n  }\n\n  NewKlass.release = standardReleaser;\n  return NewKlass;\n};\n\nvar PooledClass = {\n  addPoolingTo: addPoolingTo,\n  twoArgumentPooler: twoArgumentPooler\n};\nexport default PooledClass;","map":{"version":3,"sources":["C:/learning/Group-Project/node_modules/react-native-web/dist/vendor/react-native/PooledClass/index.js"],"names":["invariant","twoArgumentPooler","a1","a2","Klass","instancePool","length","instance","pop","call","standardReleaser","destructor","poolSize","push","DEFAULT_POOL_SIZE","DEFAULT_POOLER","addPoolingTo","CopyConstructor","pooler","NewKlass","getPooled","release","PooledClass"],"mappings":"AAUA,OAAOA,SAAP,MAAsB,oBAAtB;;AAEA,IAAIC,iBAAiB,GAAG,SAASA,iBAAT,CAA2BC,EAA3B,EAA+BC,EAA/B,EAAmC;AACzD,MAAIC,KAAK,GAAG,IAAZ;;AAEA,MAAIA,KAAK,CAACC,YAAN,CAAmBC,MAAvB,EAA+B;AAC7B,QAAIC,QAAQ,GAAGH,KAAK,CAACC,YAAN,CAAmBG,GAAnB,EAAf;AACAJ,IAAAA,KAAK,CAACK,IAAN,CAAWF,QAAX,EAAqBL,EAArB,EAAyBC,EAAzB;AACA,WAAOI,QAAP;AACD,GAJD,MAIO;AACL,WAAO,IAAIH,KAAJ,CAAUF,EAAV,EAAcC,EAAd,CAAP;AACD;AACF,CAVD;;AAYA,IAAIO,gBAAgB,GAAG,SAASA,gBAAT,CAA0BH,QAA1B,EAAoC;AACzD,MAAIH,KAAK,GAAG,IAAZ;AACAG,EAAAA,QAAQ,CAACI,UAAT;;AAEA,MAAIP,KAAK,CAACC,YAAN,CAAmBC,MAAnB,GAA4BF,KAAK,CAACQ,QAAtC,EAAgD;AAC9CR,IAAAA,KAAK,CAACC,YAAN,CAAmBQ,IAAnB,CAAwBN,QAAxB;AACD;AACF,CAPD;;AASA,IAAIO,iBAAiB,GAAG,EAAxB;AACA,IAAIC,cAAc,GAAGd,iBAArB;;AAWA,IAAIe,YAAY,GAAG,SAASA,YAAT,CAAsBC,eAAtB,EAAuCC,MAAvC,EAA+C;AAGhE,MAAIC,QAAQ,GAAGF,eAAf;AACAE,EAAAA,QAAQ,CAACd,YAAT,GAAwB,EAAxB;AACAc,EAAAA,QAAQ,CAACC,SAAT,GAAqBF,MAAM,IAAIH,cAA/B;;AAEA,MAAI,CAACI,QAAQ,CAACP,QAAd,EAAwB;AACtBO,IAAAA,QAAQ,CAACP,QAAT,GAAoBE,iBAApB;AACD;;AAEDK,EAAAA,QAAQ,CAACE,OAAT,GAAmBX,gBAAnB;AACA,SAAOS,QAAP;AACD,CAbD;;AAeA,IAAIG,WAAW,GAAG;AAChBN,EAAAA,YAAY,EAAEA,YADE;AAEhBf,EAAAA,iBAAiB,EAAEA;AAFH,CAAlB;AAIA,eAAeqB,WAAf","sourcesContent":["/* eslint-disable */\n\n/**\n * Copyright 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * From React 16.0.0\n */\nimport invariant from 'fbjs/lib/invariant';\n\nvar twoArgumentPooler = function twoArgumentPooler(a1, a2) {\n  var Klass = this;\n\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2);\n    return instance;\n  } else {\n    return new Klass(a1, a2);\n  }\n};\n\nvar standardReleaser = function standardReleaser(instance) {\n  var Klass = this;\n  instance.destructor();\n\n  if (Klass.instancePool.length < Klass.poolSize) {\n    Klass.instancePool.push(instance);\n  }\n};\n\nvar DEFAULT_POOL_SIZE = 10;\nvar DEFAULT_POOLER = twoArgumentPooler;\n/**\n * Augments `CopyConstructor` to be a poolable class, augmenting only the class\n * itself (statically) not adding any prototypical fields. Any CopyConstructor\n * you give this may have a `poolSize` property, and will look for a\n * prototypical `destructor` on instances.\n *\n * @param {Function} CopyConstructor Constructor that can be used to reset.\n * @param {Function} pooler Customizable pooler.\n */\n\nvar addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {\n  // Casting as any so that flow ignores the actual implementation and trusts\n  // it to match the type we declared\n  var NewKlass = CopyConstructor;\n  NewKlass.instancePool = [];\n  NewKlass.getPooled = pooler || DEFAULT_POOLER;\n\n  if (!NewKlass.poolSize) {\n    NewKlass.poolSize = DEFAULT_POOL_SIZE;\n  }\n\n  NewKlass.release = standardReleaser;\n  return NewKlass;\n};\n\nvar PooledClass = {\n  addPoolingTo: addPoolingTo,\n  twoArgumentPooler: twoArgumentPooler\n};\nexport default PooledClass;"]},"metadata":{},"sourceType":"module"}