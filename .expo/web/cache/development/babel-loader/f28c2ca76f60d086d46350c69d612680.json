{"ast":null,"code":"'use strict';\n\nimport Platform from \"../../../exports/Platform\";\nimport UIManager from \"../../../exports/UIManager\";\n\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nfunction configureNext(config, onAnimationDidEnd) {\n  if (!Platform.isTesting) {\n    UIManager.configureNextLayoutAnimation(config, onAnimationDidEnd !== null && onAnimationDidEnd !== void 0 ? onAnimationDidEnd : function () {}, function () {});\n  }\n}\n\nfunction create(duration, type, property) {\n  return {\n    duration: duration,\n    create: {\n      type: type,\n      property: property\n    },\n    update: {\n      type: type\n    },\n    delete: {\n      type: type,\n      property: property\n    }\n  };\n}\n\nvar Presets = {\n  easeInEaseOut: create(300, 'easeInEaseOut', 'opacity'),\n  linear: create(500, 'linear', 'opacity'),\n  spring: {\n    duration: 700,\n    create: {\n      type: 'linear',\n      property: 'opacity'\n    },\n    update: {\n      type: 'spring',\n      springDamping: 0.4\n    },\n    delete: {\n      type: 'linear',\n      property: 'opacity'\n    }\n  }\n};\nvar LayoutAnimation = {\n  configureNext: configureNext,\n  create: create,\n  Types: Object.freeze({\n    spring: 'spring',\n    linear: 'linear',\n    easeInEaseOut: 'easeInEaseOut',\n    easeIn: 'easeIn',\n    easeOut: 'easeOut',\n    keyboard: 'keyboard'\n  }),\n  Properties: Object.freeze({\n    opacity: 'opacity',\n    scaleX: 'scaleX',\n    scaleY: 'scaleY',\n    scaleXY: 'scaleXY'\n  }),\n  checkConfig: function checkConfig() {\n    console.error('LayoutAnimation.checkConfig(...) has been disabled.');\n  },\n  Presets: Presets,\n  easeInEaseOut: configureNext.bind(null, Presets.easeInEaseOut),\n  linear: configureNext.bind(null, Presets.linear),\n  spring: configureNext.bind(null, Presets.spring)\n};\nexport default LayoutAnimation;","map":{"version":3,"sources":["E:/Users/Nayla/Escritorio/UADEE/Distribuidas desk/SUBASTAPP/node_modules/react-native-web/dist/vendor/react-native/LayoutAnimation/index.js"],"names":["Platform","UIManager","__DEV__","process","env","NODE_ENV","configureNext","config","onAnimationDidEnd","isTesting","configureNextLayoutAnimation","create","duration","type","property","update","delete","Presets","easeInEaseOut","linear","spring","springDamping","LayoutAnimation","Types","Object","freeze","easeIn","easeOut","keyboard","Properties","opacity","scaleX","scaleY","scaleXY","checkConfig","console","error","bind"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport Platform from '../../../exports/Platform';\nimport UIManager from '../../../exports/UIManager';\n\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nfunction configureNext(config, onAnimationDidEnd) {\n  if (!Platform.isTesting) {\n    UIManager.configureNextLayoutAnimation(config, onAnimationDidEnd !== null && onAnimationDidEnd !== void 0 ? onAnimationDidEnd : function () {}, function () {}\n    /* unused onError */\n    );\n  }\n}\n\nfunction create(duration, type, property) {\n  return {\n    duration: duration,\n    create: {\n      type: type,\n      property: property\n    },\n    update: {\n      type: type\n    },\n    delete: {\n      type: type,\n      property: property\n    }\n  };\n}\n\nvar Presets = {\n  easeInEaseOut: create(300, 'easeInEaseOut', 'opacity'),\n  linear: create(500, 'linear', 'opacity'),\n  spring: {\n    duration: 700,\n    create: {\n      type: 'linear',\n      property: 'opacity'\n    },\n    update: {\n      type: 'spring',\n      springDamping: 0.4\n    },\n    delete: {\n      type: 'linear',\n      property: 'opacity'\n    }\n  }\n};\n/**\n * Automatically animates views to their new positions when the\n * next layout happens.\n *\n * A common way to use this API is to call it before calling `setState`.\n *\n * Note that in order to get this to work on **Android** you need to set the following flags via `UIManager`:\n *\n *     UIManager.setLayoutAnimationEnabledExperimental && UIManager.setLayoutAnimationEnabledExperimental(true);\n */\n\nvar LayoutAnimation = {\n  /**\n   * Schedules an animation to happen on the next layout.\n   *\n   * @param config Specifies animation properties:\n   *\n   *   - `duration` in milliseconds\n   *   - `create`, `AnimationConfig` for animating in new views\n   *   - `update`, `AnimationConfig` for animating views that have been updated\n   *\n   * @param onAnimationDidEnd Called when the animation finished.\n   * Only supported on iOS.\n   * @param onError Called on error. Only supported on iOS.\n   */\n  configureNext: configureNext,\n\n  /**\n   * Helper for creating a config for `configureNext`.\n   */\n  create: create,\n  Types: Object.freeze({\n    spring: 'spring',\n    linear: 'linear',\n    easeInEaseOut: 'easeInEaseOut',\n    easeIn: 'easeIn',\n    easeOut: 'easeOut',\n    keyboard: 'keyboard'\n  }),\n  Properties: Object.freeze({\n    opacity: 'opacity',\n    scaleX: 'scaleX',\n    scaleY: 'scaleY',\n    scaleXY: 'scaleXY'\n  }),\n  checkConfig: function checkConfig() {\n    console.error('LayoutAnimation.checkConfig(...) has been disabled.');\n  },\n  Presets: Presets,\n  easeInEaseOut: configureNext.bind(null, Presets.easeInEaseOut),\n  linear: configureNext.bind(null, Presets.linear),\n  spring: configureNext.bind(null, Presets.spring)\n};\nexport default LayoutAnimation;"]},"metadata":{},"sourceType":"module"}