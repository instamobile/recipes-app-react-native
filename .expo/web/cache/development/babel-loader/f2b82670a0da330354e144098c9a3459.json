{"ast":null,"code":"'use strict';\n\nimport PressResponder from \"./PressResponder\";\nimport { useDebugValue, useEffect, useRef } from 'react';\nexport default function usePressEvents(hostRef, config) {\n  var pressResponderRef = useRef(null);\n\n  if (pressResponderRef.current == null) {\n    pressResponderRef.current = new PressResponder(config);\n  }\n\n  var pressResponder = pressResponderRef.current;\n  useEffect(function () {\n    pressResponder.configure(config);\n  }, [config, pressResponder]);\n  useEffect(function () {\n    return function () {\n      pressResponder.reset();\n    };\n  }, [pressResponder]);\n  useDebugValue(config);\n  return pressResponder.getEventHandlers();\n}","map":{"version":3,"sources":["C:/learning/Group-Project/node_modules/react-native-web/dist/hooks/usePressEvents/index.js"],"names":["PressResponder","useDebugValue","useEffect","useRef","usePressEvents","hostRef","config","pressResponderRef","current","pressResponder","configure","reset","getEventHandlers"],"mappings":"AASA;;AAEA,OAAOA,cAAP;AACA,SAASC,aAAT,EAAwBC,SAAxB,EAAmCC,MAAnC,QAAiD,OAAjD;AACA,eAAe,SAASC,cAAT,CAAwBC,OAAxB,EAAiCC,MAAjC,EAAyC;AACtD,MAAIC,iBAAiB,GAAGJ,MAAM,CAAC,IAAD,CAA9B;;AAEA,MAAII,iBAAiB,CAACC,OAAlB,IAA6B,IAAjC,EAAuC;AACrCD,IAAAA,iBAAiB,CAACC,OAAlB,GAA4B,IAAIR,cAAJ,CAAmBM,MAAnB,CAA5B;AACD;;AAED,MAAIG,cAAc,GAAGF,iBAAiB,CAACC,OAAvC;AAEAN,EAAAA,SAAS,CAAC,YAAY;AACpBO,IAAAA,cAAc,CAACC,SAAf,CAAyBJ,MAAzB;AACD,GAFQ,EAEN,CAACA,MAAD,EAASG,cAAT,CAFM,CAAT;AAKAP,EAAAA,SAAS,CAAC,YAAY;AACpB,WAAO,YAAY;AACjBO,MAAAA,cAAc,CAACE,KAAf;AACD,KAFD;AAGD,GAJQ,EAIN,CAACF,cAAD,CAJM,CAAT;AAKAR,EAAAA,aAAa,CAACK,MAAD,CAAb;AACA,SAAOG,cAAc,CAACG,gBAAf,EAAP;AACD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport PressResponder from './PressResponder';\nimport { useDebugValue, useEffect, useRef } from 'react';\nexport default function usePressEvents(hostRef, config) {\n  var pressResponderRef = useRef(null);\n\n  if (pressResponderRef.current == null) {\n    pressResponderRef.current = new PressResponder(config);\n  }\n\n  var pressResponder = pressResponderRef.current; // Re-configure to use the current node and configuration.\n\n  useEffect(function () {\n    pressResponder.configure(config);\n  }, [config, pressResponder]); // Reset the `pressResponder` when cleanup needs to occur. This is\n  // a separate effect because we do not want to rest the responder when `config` changes.\n\n  useEffect(function () {\n    return function () {\n      pressResponder.reset();\n    };\n  }, [pressResponder]);\n  useDebugValue(config);\n  return pressResponder.getEventHandlers();\n}"]},"metadata":{},"sourceType":"module"}