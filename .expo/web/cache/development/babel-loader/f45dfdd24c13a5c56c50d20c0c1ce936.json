{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _stateToPropMappings;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport findNodeHandleRN from \"react-native-web/dist/exports/findNodeHandle\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Touchable from \"react-native-web/dist/exports/Touchable\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport deepEqual from 'fbjs/lib/areEqual';\nimport RNGestureHandlerModule from \"./RNGestureHandlerModule\";\nimport State from \"./State\";\n\nfunction findNodeHandle(node) {\n  if (Platform.OS === 'web') return node;\n  return findNodeHandleRN(node);\n}\n\nvar _NativeModules$UIMana = NativeModules.UIManager,\n    UIManager = _NativeModules$UIMana === void 0 ? {} : _NativeModules$UIMana;\nvar customGHEventsConfig = {\n  onGestureHandlerEvent: {\n    registrationName: 'onGestureHandlerEvent'\n  },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange'\n  }\n};\nUIManager.genericDirectEventTypes = _objectSpread(_objectSpread({}, UIManager.genericDirectEventTypes), customGHEventsConfig);\n\nif (UIManager.getConstants) {\n  UIManager.getConstants().genericDirectEventTypes = _objectSpread(_objectSpread({}, UIManager.getConstants().genericDirectEventTypes), customGHEventsConfig);\n}\n\nvar _UIManager$setJSRespo = UIManager.setJSResponder,\n    oldSetJSResponder = _UIManager$setJSRespo === void 0 ? function () {} : _UIManager$setJSRespo,\n    _UIManager$clearJSRes = UIManager.clearJSResponder,\n    oldClearJSResponder = _UIManager$clearJSRes === void 0 ? function () {} : _UIManager$clearJSRes;\n\nUIManager.setJSResponder = function (tag, blockNativeResponder) {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\n\nUIManager.clearJSResponder = function () {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nvar handlerTag = 1;\nvar handlerIDToTag = {};\n\nfunction isConfigParam(param, name) {\n  return param !== undefined && (param !== Object(param) || !('__isNative' in param)) && name !== 'onHandlerStateChange' && name !== 'onGestureEvent';\n}\n\nfunction filterConfig(props, validProps) {\n  var defaults = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var res = _objectSpread({}, defaults);\n\n  Object.keys(validProps).forEach(function (key) {\n    var value = props[key];\n\n    if (isConfigParam(value, key)) {\n      var _value = props[key];\n\n      if (key === 'simultaneousHandlers' || key === 'waitFor') {\n        _value = transformIntoHandlerTags(props[key]);\n      } else if (key === 'hitSlop') {\n        if (typeof _value !== 'object') {\n          _value = {\n            top: _value,\n            left: _value,\n            bottom: _value,\n            right: _value\n          };\n        }\n      }\n\n      res[key] = _value;\n    }\n  });\n  return res;\n}\n\nfunction transformIntoHandlerTags(handlerIDs) {\n  if (!Array.isArray(handlerIDs)) {\n    handlerIDs = [handlerIDs];\n  }\n\n  if (Platform.OS === 'web') {\n    return handlerIDs.map(function (_ref) {\n      var current = _ref.current;\n      return current;\n    }).filter(function (handle) {\n      return handle;\n    });\n  }\n\n  return handlerIDs.map(function (handlerID) {\n    return handlerIDToTag[handlerID] || handlerID.current && handlerID.current._handlerTag || -1;\n  }).filter(function (handlerTag) {\n    return handlerTag > 0;\n  });\n}\n\nfunction hasUnresolvedRefs(props) {\n  var extract = function extract(refs) {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n\n    return refs.some(function (r) {\n      return r && r.current === null;\n    });\n  };\n\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nvar stateToPropMappings = (_stateToPropMappings = {}, _defineProperty(_stateToPropMappings, State.BEGAN, 'onBegan'), _defineProperty(_stateToPropMappings, State.FAILED, 'onFailed'), _defineProperty(_stateToPropMappings, State.CANCELLED, 'onCancelled'), _defineProperty(_stateToPropMappings, State.ACTIVE, 'onActivated'), _defineProperty(_stateToPropMappings, State.END, 'onEnded'), _stateToPropMappings);\nexport default function createHandler(handlerName) {\n  var propTypes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var transformProps = arguments.length > 3 ? arguments[3] : undefined;\n  var customNativeProps = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n\n  var Handler = function (_React$Component) {\n    _inherits(Handler, _React$Component);\n\n    var _super = _createSuper(Handler);\n\n    function Handler(props) {\n      var _this;\n\n      _classCallCheck(this, Handler);\n\n      _this = _super.call(this, props);\n\n      _this._onGestureHandlerEvent = function (event) {\n        if (event.nativeEvent.handlerTag === _this._handlerTag) {\n          _this.props.onGestureEvent && _this.props.onGestureEvent(event);\n        } else {\n          _this.props.onGestureHandlerEvent && _this.props.onGestureHandlerEvent(event);\n        }\n      };\n\n      _this._onGestureHandlerStateChange = function (event) {\n        if (event.nativeEvent.handlerTag === _this._handlerTag) {\n          _this.props.onHandlerStateChange && _this.props.onHandlerStateChange(event);\n          var stateEventName = stateToPropMappings[event.nativeEvent.state];\n\n          if (typeof _this.props[stateEventName] === 'function') {\n            _this.props[stateEventName](event);\n          }\n        } else {\n          _this.props.onGestureHandlerStateChange && _this.props.onGestureHandlerStateChange(event);\n        }\n      };\n\n      _this._refHandler = function (node) {\n        _this._viewNode = node;\n        var child = React.Children.only(_this.props.children);\n        var ref = child.ref;\n\n        if (ref !== null) {\n          if (typeof ref === 'function') {\n            ref(node);\n          } else {\n            ref.current = node;\n          }\n        }\n      };\n\n      _this._createGestureHandler = function (newConfig) {\n        _this._config = newConfig;\n        RNGestureHandlerModule.createGestureHandler(handlerName, _this._handlerTag, newConfig);\n      };\n\n      _this._attachGestureHandler = function (newViewTag) {\n        _this._viewTag = newViewTag;\n        RNGestureHandlerModule.attachGestureHandler(_this._handlerTag, newViewTag);\n      };\n\n      _this._updateGestureHandler = function (newConfig) {\n        _this._config = newConfig;\n        RNGestureHandlerModule.updateGestureHandler(_this._handlerTag, newConfig);\n      };\n\n      _this._handlerTag = handlerTag++;\n      _this._config = {};\n\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(\"Handler with ID \\\"\" + props.id + \"\\\" already registered\");\n        }\n\n        handlerIDToTag[props.id] = _this._handlerTag;\n      }\n\n      return _this;\n    }\n\n    _createClass(Handler, [{\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        RNGestureHandlerModule.dropGestureHandler(this._handlerTag);\n\n        if (this._updateEnqueued) {\n          clearImmediate(this._updateEnqueued);\n        }\n\n        if (this.props.id) {\n          delete handlerIDToTag[this.props.id];\n        }\n      }\n    }, {\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var _this2 = this;\n\n        if (hasUnresolvedRefs(this.props)) {\n          this._updateEnqueued = setImmediate(function () {\n            _this2._updateEnqueued = null;\n\n            _this2._update();\n          });\n        }\n\n        this._createGestureHandler(filterConfig(transformProps ? transformProps(this.props) : this.props, _objectSpread(_objectSpread({}, this.constructor.propTypes), customNativeProps), config));\n\n        this._attachGestureHandler(findNodeHandle(this._viewNode));\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate() {\n        var viewTag = findNodeHandle(this._viewNode);\n\n        if (this._viewTag !== viewTag) {\n          this._attachGestureHandler(viewTag);\n        }\n\n        this._update();\n      }\n    }, {\n      key: \"_update\",\n      value: function _update() {\n        var newConfig = filterConfig(transformProps ? transformProps(this.props) : this.props, _objectSpread(_objectSpread({}, this.constructor.propTypes), customNativeProps), config);\n\n        if (!deepEqual(this._config, newConfig)) {\n          this._updateGestureHandler(newConfig);\n        }\n      }\n    }, {\n      key: \"setNativeProps\",\n      value: function setNativeProps(updates) {\n        var mergedProps = _objectSpread(_objectSpread({}, this.props), updates);\n\n        var newConfig = filterConfig(transformProps ? transformProps(mergedProps) : mergedProps, _objectSpread(_objectSpread({}, this.constructor.propTypes), customNativeProps), config);\n\n        this._updateGestureHandler(newConfig);\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var gestureEventHandler = this._onGestureHandlerEvent;\n        var _this$props = this.props,\n            onGestureEvent = _this$props.onGestureEvent,\n            onGestureHandlerEvent = _this$props.onGestureHandlerEvent;\n\n        if (onGestureEvent && typeof onGestureEvent !== 'function') {\n          if (onGestureHandlerEvent) {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n\n          gestureEventHandler = this.props.onGestureEvent;\n        } else {\n          if (onGestureHandlerEvent && typeof onGestureHandlerEvent !== 'function') {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n        }\n\n        var gestureStateEventHandler = this._onGestureHandlerStateChange;\n        var _this$props2 = this.props,\n            onHandlerStateChange = _this$props2.onHandlerStateChange,\n            onGestureHandlerStateChange = _this$props2.onGestureHandlerStateChange;\n\n        if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n          if (onGestureHandlerStateChange) {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n\n          gestureStateEventHandler = this.props.onHandlerStateChange;\n        } else {\n          if (onGestureHandlerStateChange && typeof onGestureHandlerStateChange !== 'function') {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n        }\n\n        var child = React.Children.only(this.props.children);\n        var grandChildren = child.props.children;\n\n        if (Touchable.TOUCH_TARGET_DEBUG && child.type && (child.type === 'RNGestureHandlerButton' || child.type.name === 'View' || child.type.displayName === 'View')) {\n          grandChildren = React.Children.toArray(grandChildren);\n          grandChildren.push(Touchable.renderDebugView({\n            color: 'mediumspringgreen',\n            hitSlop: child.props.hitSlop\n          }));\n        }\n\n        return React.cloneElement(child, {\n          ref: this._refHandler,\n          collapsable: false,\n          onGestureHandlerEvent: gestureEventHandler,\n          onGestureHandlerStateChange: gestureStateEventHandler\n        }, grandChildren);\n      }\n    }]);\n\n    return Handler;\n  }(React.Component);\n\n  Handler.displayName = handlerName;\n  Handler.propTypes = propTypes;\n  return Handler;\n}","map":{"version":3,"sources":["C:/learning/Group-Project/node_modules/react-native-gesture-handler/createHandler.js"],"names":["React","deepEqual","RNGestureHandlerModule","State","findNodeHandle","node","Platform","OS","findNodeHandleRN","NativeModules","UIManager","customGHEventsConfig","onGestureHandlerEvent","registrationName","onGestureHandlerStateChange","genericDirectEventTypes","getConstants","setJSResponder","oldSetJSResponder","clearJSResponder","oldClearJSResponder","tag","blockNativeResponder","handleSetJSResponder","handleClearJSResponder","handlerTag","handlerIDToTag","isConfigParam","param","name","undefined","Object","filterConfig","props","validProps","defaults","res","keys","forEach","key","value","transformIntoHandlerTags","top","left","bottom","right","handlerIDs","Array","isArray","map","current","filter","handle","handlerID","_handlerTag","hasUnresolvedRefs","extract","refs","some","r","stateToPropMappings","BEGAN","FAILED","CANCELLED","ACTIVE","END","createHandler","handlerName","propTypes","config","transformProps","customNativeProps","Handler","_onGestureHandlerEvent","event","nativeEvent","onGestureEvent","_onGestureHandlerStateChange","onHandlerStateChange","stateEventName","state","_refHandler","_viewNode","child","Children","only","children","ref","_createGestureHandler","newConfig","_config","createGestureHandler","_attachGestureHandler","newViewTag","_viewTag","attachGestureHandler","_updateGestureHandler","updateGestureHandler","id","Error","dropGestureHandler","_updateEnqueued","clearImmediate","setImmediate","_update","constructor","viewTag","updates","mergedProps","gestureEventHandler","gestureStateEventHandler","grandChildren","Touchable","TOUCH_TARGET_DEBUG","type","displayName","toArray","push","renderDebugView","color","hitSlop","cloneElement","collapsable","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  findNodeHandle as findNodeHandleRN,\n  NativeModules,\n  Touchable,\n  Platform,\n} from 'react-native';\nimport deepEqual from 'fbjs/lib/areEqual';\nimport RNGestureHandlerModule from './RNGestureHandlerModule';\nimport State from './State';\n\nfunction findNodeHandle(node) {\n  if (Platform.OS === 'web') return node;\n  return findNodeHandleRN(node);\n}\n\nconst { UIManager = {} } = NativeModules;\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManager.genericDirectEventTypes = {\n  ...UIManager.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nif (UIManager.getConstants) {\n  UIManager.getConstants().genericDirectEventTypes = {\n    ...UIManager.getConstants().genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {},\n  clearJSResponder: oldClearJSResponder = () => {},\n} = UIManager;\nUIManager.setJSResponder = (tag, blockNativeResponder) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManager.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet handlerTag = 1;\nconst handlerIDToTag = {};\n\nfunction isConfigParam(param, name) {\n  // param !== Object(param) returns false if `param` is a function\n  // or an object and returns true if `param` is null\n  return (\n    param !== undefined &&\n    (param !== Object(param) || !('__isNative' in param)) &&\n    name !== 'onHandlerStateChange' &&\n    name !== 'onGestureEvent'\n  );\n}\n\nfunction filterConfig(props, validProps, defaults = {}) {\n  const res = { ...defaults };\n  Object.keys(validProps).forEach(key => {\n    const value = props[key];\n    if (isConfigParam(value, key)) {\n      let value = props[key];\n      if (key === 'simultaneousHandlers' || key === 'waitFor') {\n        value = transformIntoHandlerTags(props[key]);\n      } else if (key === 'hitSlop') {\n        if (typeof value !== 'object') {\n          value = { top: value, left: value, bottom: value, right: value };\n        }\n      }\n      res[key] = value;\n    }\n  });\n  return res;\n}\n\nfunction transformIntoHandlerTags(handlerIDs) {\n  if (!Array.isArray(handlerIDs)) {\n    handlerIDs = [handlerIDs];\n  }\n\n  if (Platform.OS === 'web') {\n    return handlerIDs.map(({ current }) => current).filter(handle => handle);\n  }\n  // converts handler string IDs into their numeric tags\n  return handlerIDs\n    .map(\n      handlerID =>\n        handlerIDToTag[handlerID] ||\n        (handlerID.current && handlerID.current._handlerTag) ||\n        -1\n    )\n    .filter(handlerTag => handlerTag > 0);\n}\n\nfunction hasUnresolvedRefs(props) {\n  const extract = refs => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some(r => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n};\n\nexport default function createHandler(\n  handlerName,\n  propTypes = {},\n  config = {},\n  transformProps,\n  customNativeProps = {}\n) {\n  class Handler extends React.Component {\n    static displayName = handlerName;\n\n    static propTypes = propTypes;\n\n    constructor(props) {\n      super(props);\n      this._handlerTag = handlerTag++;\n      this._config = {};\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this._handlerTag;\n      }\n    }\n\n    _onGestureHandlerEvent = event => {\n      if (event.nativeEvent.handlerTag === this._handlerTag) {\n        this.props.onGestureEvent && this.props.onGestureEvent(event);\n      } else {\n        this.props.onGestureHandlerEvent &&\n          this.props.onGestureHandlerEvent(event);\n      }\n    };\n\n    _onGestureHandlerStateChange = event => {\n      if (event.nativeEvent.handlerTag === this._handlerTag) {\n        this.props.onHandlerStateChange &&\n          this.props.onHandlerStateChange(event);\n\n        const stateEventName = stateToPropMappings[event.nativeEvent.state];\n        if (typeof this.props[stateEventName] === 'function') {\n          this.props[stateEventName](event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange &&\n          this.props.onGestureHandlerStateChange(event);\n      }\n    };\n\n    _refHandler = node => {\n      this._viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      const { ref } = child;\n      if (ref !== null) {\n        if (typeof ref === 'function') {\n          ref(node);\n        } else {\n          ref.current = node;\n        }\n      }\n    };\n\n    _createGestureHandler = newConfig => {\n      this._config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        handlerName,\n        this._handlerTag,\n        newConfig\n      );\n    };\n\n    _attachGestureHandler = newViewTag => {\n      this._viewTag = newViewTag;\n\n      RNGestureHandlerModule.attachGestureHandler(this._handlerTag, newViewTag);\n    };\n\n    _updateGestureHandler = newConfig => {\n      this._config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this._handlerTag, newConfig);\n    };\n\n    componentWillUnmount() {\n      RNGestureHandlerModule.dropGestureHandler(this._handlerTag);\n      if (this._updateEnqueued) {\n        clearImmediate(this._updateEnqueued);\n      }\n      if (this.props.id) {\n        delete handlerIDToTag[this.props.id];\n      }\n    }\n\n    componentDidMount() {\n      if (hasUnresolvedRefs(this.props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // setImmediate. This makes it so _update function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        this._updateEnqueued = setImmediate(() => {\n          this._updateEnqueued = null;\n          this._update();\n        });\n      }\n\n      this._createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          { ...this.constructor.propTypes, ...customNativeProps },\n          config\n        )\n      );\n      this._attachGestureHandler(findNodeHandle(this._viewNode));\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this._viewNode);\n      if (this._viewTag !== viewTag) {\n        this._attachGestureHandler(viewTag);\n      }\n      this._update();\n    }\n\n    _update() {\n      const newConfig = filterConfig(\n        transformProps ? transformProps(this.props) : this.props,\n        { ...this.constructor.propTypes, ...customNativeProps },\n        config\n      );\n      if (!deepEqual(this._config, newConfig)) {\n        this._updateGestureHandler(newConfig);\n      }\n    }\n\n    setNativeProps(updates) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        { ...this.constructor.propTypes, ...customNativeProps },\n        config\n      );\n      this._updateGestureHandler(newConfig);\n    }\n\n    render() {\n      let gestureEventHandler = this._onGestureHandlerEvent;\n      const { onGestureEvent, onGestureHandlerEvent } = this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = this.props.onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this._onGestureHandlerStateChange;\n      const { onHandlerStateChange, onGestureHandlerStateChange } = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = this.props.onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      const child = React.Children.only(this.props.children);\n      let grandChildren = child.props.children;\n      if (\n        Touchable.TOUCH_TARGET_DEBUG &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          Touchable.renderDebugView({\n            color: 'mediumspringgreen',\n            hitSlop: child.props.hitSlop,\n          })\n        );\n      }\n      return React.cloneElement(\n        child,\n        {\n          ref: this._refHandler,\n          collapsable: false,\n          onGestureHandlerEvent: gestureEventHandler,\n          onGestureHandlerStateChange: gestureStateEventHandler,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"]},"metadata":{},"sourceType":"module"}