{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport AnimatedNode from \"./AnimatedNode\";\nimport { val } from \"../val\";\nimport ReanimatedModule from \"../ReanimatedModule\";\nimport invariant from 'fbjs/lib/invariant';\n\nfunction sanitizeValue(value) {\n  return value === null || value === undefined || typeof value === 'string' ? value : Number(value);\n}\n\nvar CONSTANT_VALUES = new Map();\n\nfunction initializeConstantValues() {\n  if (CONSTANT_VALUES.size !== 0) {\n    return;\n  }\n\n  [0, -1, 1, -2, 2].forEach(function (v) {\n    return CONSTANT_VALUES.set(v, new InternalAnimatedValue(v, true));\n  });\n}\n\nvar InternalAnimatedValue = function (_AnimatedNode) {\n  _inherits(InternalAnimatedValue, _AnimatedNode);\n\n  var _super = _createSuper(InternalAnimatedValue);\n\n  function InternalAnimatedValue(value) {\n    var _this;\n\n    var constant = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    _classCallCheck(this, InternalAnimatedValue);\n\n    invariant(value !== null, 'Animated.Value cannot be set to the null');\n    _this = _super.call(this, {\n      type: 'value',\n      value: sanitizeValue(value)\n    });\n    _this._startingValue = _this._value = value;\n    _this._animation = null;\n    _this._constant = constant;\n    return _this;\n  }\n\n  _createClass(InternalAnimatedValue, [{\n    key: \"__detach\",\n    value: function __detach() {\n      var _this2 = this;\n\n      if (!this._constant) {\n        if (ReanimatedModule.getValue) {\n          ReanimatedModule.getValue(this.__nodeID, function (val) {\n            return _this2.__nodeConfig.value = val;\n          });\n        } else {\n          this.__nodeConfig.value = this.__getValue();\n        }\n      }\n\n      this.__detachAnimation(this._animation);\n\n      _get(_getPrototypeOf(InternalAnimatedValue.prototype), \"__detach\", this).call(this);\n    }\n  }, {\n    key: \"__detachAnimation\",\n    value: function __detachAnimation(animation) {\n      animation && animation.__detach();\n\n      if (this._animation === animation) {\n        this._animation = null;\n      }\n    }\n  }, {\n    key: \"__attachAnimation\",\n    value: function __attachAnimation(animation) {\n      this.__detachAnimation(this._animation);\n\n      this._animation = animation;\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      if (this.__inputNodes && this.__inputNodes.length) {\n        this.__inputNodes.forEach(val);\n      }\n\n      return this._value;\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      this.__detachAnimation(this._animation);\n\n      this._updateValue(value);\n    }\n  }, {\n    key: \"_updateValue\",\n    value: function _updateValue(value) {\n      this._value = value;\n\n      this.__forceUpdateCache(value);\n    }\n  }], [{\n    key: \"valueForConstant\",\n    value: function valueForConstant(number) {\n      initializeConstantValues();\n      return CONSTANT_VALUES.get(number) || new InternalAnimatedValue(number, true);\n    }\n  }]);\n\n  return InternalAnimatedValue;\n}(AnimatedNode);\n\nexport { InternalAnimatedValue as default };","map":{"version":3,"sources":["InternalAnimatedValue.js"],"names":["value","Number","CONSTANT_VALUES","v","initializeConstantValues","constructor","constant","invariant","type","sanitizeValue","__detach","ReanimatedModule","val","__detachAnimation","animation","__attachAnimation","__onEvaluate","setValue","_updateValue"],"mappings":";;;;;;;;;;;AAAA,OAAA,YAAA;AACA,SAAA,GAAA;AACA,OAAA,gBAAA;AACA,OAAA,SAAA,MAAA,oBAAA;;AAEA,SAAA,aAAA,CAAA,KAAA,EAA8B;AAC5B,SAAOA,KAAK,KAALA,IAAAA,IAAkBA,KAAK,KAAvBA,SAAAA,IAAyC,OAAA,KAAA,KAAzCA,QAAAA,GAAAA,KAAAA,GAEHC,MAAM,CAFV,KAEU,CAFV;AAGD;;AAED,IAAMC,eAAe,GAAG,IAAxB,GAAwB,EAAxB;;AAEA,SAAA,wBAAA,GAAoC;AAClC,MAAIA,eAAe,CAAfA,IAAAA,KAAJ,CAAA,EAAgC;AAC9B;AACD;;AACD,GAAA,CAAA,EAAI,CAAJ,CAAA,EAAA,CAAA,EAAW,CAAX,CAAA,EAAA,CAAA,EAAA,OAAA,CAA0BC,UAAAA,CAAC;AAAA,WACzBD,eAAe,CAAfA,GAAAA,CAAAA,CAAAA,EAAuB,IAAA,qBAAA,CAAA,CAAA,EADzB,IACyB,CAAvBA,CADyB;AAAA,GAA3B;AAGD;;IAMc,qB;;;;;AAQbG,iCAAW,KAAXA,EAAqC;AAAA;;AAAA,QAAlBC,QAAkB,uEAA1B,KAA0B;;AAAA;;AACnCC,IAAAA,SAAS,CACPP,KAAK,KADE,IAAA,EAATO,0CAAS,CAATA;AAIA,8BAAM;AAAEC,MAAAA,IAAI,EAAN,OAAA;AAAiBR,MAAAA,KAAK,EAAES,aAAa,CAAA,KAAA;AAArC,KAAN;AACA,UAAA,cAAA,GAAsB,MAAA,MAAA,GAAtB,KAAA;AACA,UAAA,UAAA,GAAA,IAAA;AACA,UAAA,SAAA,GAAA,QAAA;AARmC;AASpC;;;;WAEDC,oBAAW;AAAA;;AACT,UAAI,CAAC,KAAL,SAAA,EAAqB;AACnB,YAAIC,gBAAgB,CAApB,QAAA,EAA+B;AAC7BA,UAAAA,gBAAgB,CAAhBA,QAAAA,CACE,KADFA,QAAAA,EAEEC,UAAAA,GAAG;AAAA,mBAAK,MAAA,CAAA,YAAA,CAAA,KAAA,GAFVD,GAEK;AAAA,WAFLA;AADF,SAAA,MAKO;AACL,eAAA,YAAA,CAAA,KAAA,GAA0B,KAA1B,UAA0B,EAA1B;AACD;AACF;;AACD,WAAA,iBAAA,CAAuB,KAAvB,UAAA;;AACA;AACD;;;WAEDE,2BAAiB,SAAjBA,EAA6B;AAC3BC,MAAAA,SAAS,IAAIA,SAAS,CAAtBA,QAAaA,EAAbA;;AACA,UAAI,KAAA,UAAA,KAAJ,SAAA,EAAmC;AACjC,aAAA,UAAA,GAAA,IAAA;AACD;AACF;;;WAEDC,2BAAiB,SAAjBA,EAA6B;AAC3B,WAAA,iBAAA,CAAuB,KAAvB,UAAA;;AACA,WAAA,UAAA,GAAA,SAAA;AACD;;;WAEDC,wBAAe;AACb,UAAI,KAAA,YAAA,IAAqB,KAAA,YAAA,CAAzB,MAAA,EAAmD;AACjD,aAAA,YAAA,CAAA,OAAA,CAAA,GAAA;AACD;;AACD,aAAO,KAAP,MAAA;AAlD4D;;;WAsD9DC,kBAAQ,KAARA,EAAgB;AACd,WAAA,iBAAA,CAAuB,KAAvB,UAAA;;AACA,WAAA,YAAA,CAAA,KAAA;AACD;;;WAEDC,sBAAY,KAAZA,EAAoB;AAClB,WAAA,MAAA,GAAA,KAAA;;AACA,WAAA,kBAAA,CAAA,KAAA;AACD;;;WA7DD,0BAAA,MAAA,EAAgC;AAC9Bd,MAAAA,wBAAwB;AACxB,aACEF,eAAe,CAAfA,GAAAA,CAAAA,MAAAA,KAA+B,IAAA,qBAAA,CAAA,MAAA,EADjC,IACiC,CADjC;AAGD;;;;EANY,Y;;SAAA,qB","sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport { val } from '../val';\nimport ReanimatedModule from '../ReanimatedModule';\nimport invariant from 'fbjs/lib/invariant';\n\nfunction sanitizeValue(value) {\n  return value === null || value === undefined || typeof value === 'string'\n    ? value\n    : Number(value);\n}\n\nconst CONSTANT_VALUES = new Map();\n\nfunction initializeConstantValues() {\n  if (CONSTANT_VALUES.size !== 0) {\n    return;\n  }\n  [0, -1, 1, -2, 2].forEach(v =>\n    CONSTANT_VALUES.set(v, new InternalAnimatedValue(v, true))\n  );\n}\n\n/**\n * This class has been made internal in order to omit dependencies' cycles which\n * were caused by imperative setValue and interpolate â€“ they are currently exposed with AnimatedValue.js\n */\nexport default class InternalAnimatedValue extends AnimatedNode {\n  static valueForConstant(number) {\n    initializeConstantValues();\n    return (\n      CONSTANT_VALUES.get(number) || new InternalAnimatedValue(number, true)\n    );\n  }\n\n  constructor(value, constant = false) {\n    invariant(\n      value !== null,\n      'Animated.Value cannot be set to the null'\n    );\n    super({ type: 'value', value: sanitizeValue(value) });\n    this._startingValue = this._value = value;\n    this._animation = null;\n    this._constant = constant;\n  }\n\n  __detach() {\n    if (!this._constant) {\n      if (ReanimatedModule.getValue) {\n        ReanimatedModule.getValue(\n          this.__nodeID,\n          val => (this.__nodeConfig.value = val)\n        );\n      } else {\n        this.__nodeConfig.value = this.__getValue();\n      }\n    }\n    this.__detachAnimation(this._animation);\n    super.__detach();\n  }\n\n  __detachAnimation(animation) {\n    animation && animation.__detach();\n    if (this._animation === animation) {\n      this._animation = null;\n    }\n  }\n\n  __attachAnimation(animation) {\n    this.__detachAnimation(this._animation);\n    this._animation = animation;\n  }\n\n  __onEvaluate() {\n    if (this.__inputNodes && this.__inputNodes.length) {\n      this.__inputNodes.forEach(val);\n    }\n    return this._value;\n  }\n\n  // AnimatedValue will override this method to modify the value of a native node.\n  setValue(value) {\n    this.__detachAnimation(this._animation);\n    this._updateValue(value);\n  }\n\n  _updateValue(value) {\n    this._value = value;\n    this.__forceUpdateCache(value);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}